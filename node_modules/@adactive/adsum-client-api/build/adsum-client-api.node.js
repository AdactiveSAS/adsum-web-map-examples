/**
 * Copyright (C) 2018 Adactive SAS
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var adactiveAbstractOptions = require('@adactive/adactive-abstract-options');
var adactiveLogger = require('@adactive/adactive-logger');
var EventEmitter = _interopDefault(require('eventemitter3'));
var axios = _interopDefault(require('axios'));
var crypto = _interopDefault(require('crypto'));
var SHA1 = _interopDefault(require('crypto-js/sha1'));
var MD5 = _interopDefault(require('crypto-js/md5'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

/**
 * @public
 * @typedef {string} State
 */

/**
 * @readonly
 * @enum {State}
 * @public
 * @alias AdsumClientApi.STATES
 */
var STATES = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var apiVersion = '2.3';

/**
 * Helper class used to provide {@link EntityManager} options
 *
 * @public
 * @alias AdsumClientApi.Options
 * @extends AdactiveAbstractOptions.AbstractOptions
 */

var Options = function (_AbstractOptions) {
  inherits(Options, _AbstractOptions);

  function Options() {
    classCallCheck(this, Options);
    return possibleConstructorReturn(this, (Options.__proto__ || Object.getPrototypeOf(Options)).apply(this, arguments));
  }

  createClass(Options, [{
    key: 'reset',
    value: function reset() {
      /**
       * The api endpoint without api version (i.e. https://api.adsum.io )
       *
       * @public
       * @type {string}
       */
      this.endpoint = null;

      /**
       *
       * The username in format {id}-user and {id}-device for respectively an user and a device with {id} it's actual id
       *
       * @public
       * @type {string}
       */
      this.username = null;

      /**
       * The username's specific api key
       *
       * @public
       * @type {string}
       */
      this.key = null;

      /**
       * The site id
       *
       * @public
       * @type {number}
       */
      this.site = null;

      /**
       * The main local to load, if null it will load the default locale
       *
       * @public
       * @type {string|null}
       */
      this.locale = null;

      /**
       * @public
       * @type {STATES}
       */
      this.state = STATES.PUBLISHED;

      /**
       * A logger instance
       *
       * @type {AdactiveLogger.AbstractLogger}
       * @default {AdactiveLogger.ConsoleLogger} A ConsoleLogger instance
       */
      this.logger = new adactiveLogger.ConsoleLogger();

      /**
       * @public
       * @type {null|CacheManager}
       */
      this.cacheManager = null;
    }

    /**
     * @package
     * @return {string}
     */

  }, {
    key: 'getEndpoint',


    /**
     * @package
     * @return {string}
     */
    value: function getEndpoint() {
      return this.constructor.formatApiEndpoint(this.endpoint);
    }

    /**
     * @package
     * @return {string}
     */

  }, {
    key: 'validate',
    value: function validate() {
      if (typeof this.endpoint !== 'string') {
        throw new TypeError('AdsumClientApi.Options.endpoint: Should be a string');
      }

      if (typeof this.username !== 'string') {
        throw new TypeError('AdsumClientApi.Options.username: Should be a string');
      }

      if (typeof this.key !== 'string') {
        throw new TypeError('AdsumClientApi.Options.key: Should be a string');
      }

      if (!Number.isInteger(this.site)) {
        throw new TypeError('AdsumClientApi.Options.site: Should be an integer');
      }
      if (this.site <= 0) {
        throw new TypeError('AdsumClientApi.Options.site: Should be positive');
      }

      var _AbstractLogger$isVal = adactiveLogger.AbstractLogger.isValidLogger(this.logger),
          isValid = _AbstractLogger$isVal.isValid,
          reasons = _AbstractLogger$isVal.reasons;

      if (!isValid) {
        throw new TypeError(reasons.join(', '));
      }
    }
  }], [{
    key: 'getApiVersion',
    value: function getApiVersion() {
      return apiVersion;
    }

    /**
     * @package
     * @return {string}
     */

  }, {
    key: 'formatApiEndpoint',
    value: function formatApiEndpoint(endpoint) {
      if (endpoint.charAt(endpoint.length - 1) !== '/') {
        return endpoint + '/' + apiVersion;
      }

      return '' + endpoint + apiVersion;
    }
  }]);
  return Options;
}(adactiveAbstractOptions.AbstractOptions);

var uidGenerator = function () {
  var uid = 0;

  return function () {
    uid++;

    return uid;
  };
}();

var _objectsUid = new WeakMap();
var eventEmitter = new EventEmitter();

/**
 * @public
 */

var EventDispatcher = function () {
  /**
   * @private
   */
  function EventDispatcher() {
    classCallCheck(this, EventDispatcher);

    throw new Error("EventDispatcher couldn't be instantiated");
  }

  /**
   *
   * @param object
   * @return {any}
   * @private
   */


  createClass(EventDispatcher, null, [{
    key: "_getObjectId",
    value: function _getObjectId(object) {
      if (!_objectsUid.has(object)) {
        _objectsUid.set(object, uidGenerator());
      }

      return _objectsUid.get(object);
    }

    /**
     *
     * @param object
     * @param event
     * @return {string}
     * @private
     */

  }, {
    key: "_getUniversalEventName",
    value: function _getUniversalEventName(object, event) {
      return object.constructor.name + event + this._getObjectId(object);
    }

    /**
     * @public
     *
     * @param {Object} object The object on which subscribe
     * @param {string} event The event to subscribe
     * @param {function} subscriber The function to execute when the event is emitted
     */

  }, {
    key: "subscribe",
    value: function subscribe(object, event, subscriber) {
      var name = this._getUniversalEventName(object, event);

      eventEmitter.on(name, subscriber);
    }

    /**
     * @public
     *
     * @param {Object} object The object on which subscribe
     * @param {string} event The event to subscribe
     * @param {function} subscriber The function used in subscribe
     */

  }, {
    key: "unsubscribe",
    value: function unsubscribe(object, event, subscriber) {
      var name = this._getUniversalEventName(object, event);

      eventEmitter.removeListener(name, subscriber);
    }

    /**
     * @package
     *
     * @param {Object} object The object on which subscribe
     * @param {string} event The event to subscribe
     * @param {*} data data to pass to subscribers
     */

  }, {
    key: "publish",
    value: function publish(object, event, data) {
      eventEmitter.emit(this._getUniversalEventName(object, event), data);
    }
  }]);
  return EventDispatcher;
}();

/**
 * @public
 * @typedef {string} RepositoryEvent
 */

/**
 * @readonly
 * @enum {RepositoryEvent}
 * @public
 * @alias AdsumClientApi.REPOSITORY_EVENTS
 */
var REPOSITORY_EVENTS = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  REMOVE: 'REMOVE',
  IDENTIFIER_WILL_CHANGE: 'IDENTIFIER_WILL_CHANGE',
  IDENTIFIER_DID_CHANGE: 'IDENTIFIER_DID_CHANGE'
};

/**
 * @public
 * @typedef {string} RepositoryStatus
 */

/**
 * @readonly
 * @enum {RepositoryStatus}
 * @public
 * @alias AdsumClientApi.REPOSITORY_STATUSES
 */
var REPOSITORY_STATUSES = {
  INITIAL: 'INITIAL', LOADING: 'LOADING', LOADED: 'LOADED', ERROR: 'ERROR'
};

/**
 * @public
 */
var Vector = function () {
  createClass(Vector, null, [{
    key: "fromJSON",

    /**
     * @public
     * @param {{x: number, y: number, z: number}} json
     * @return {Vector}
     */
    value: function fromJSON(json) {
      var vector = new Vector();
      vector.set(json);

      return vector;
    }

    /**
     * @public
     *
     * @param {Number} [x=0]
     * @param {Number} [y=0]
     * @param {Number} [z=0]
     */

  }]);

  function Vector() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    classCallCheck(this, Vector);

    /**
     *
     * @type {Number}
     */
    this.x = x;

    /**
     *
     * @type {Number}
     */
    this.y = y;

    /**
     *
     * @type {Number}
     */
    this.z = z;
  }

  /**
   * @public
   * @param {{x: number, y: number, z: number}} value
   * @return {Vector}
   */


  createClass(Vector, [{
    key: "set",
    value: function set$$1(value) {
      this.x = value.x;
      this.y = value.y;
      this.z = value.z;

      return this;
    }

    /**
     * @public
     * @return {{x: Number, y: Number, z: Number}}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return { x: this.x, y: this.y, z: this.z };
    }
  }]);
  return Vector;
}();

/**
 *
 * @readonly
 * @enum {string}
 * @package
 */
var ValidatorsMessages = {
  INVALID: 'Must be valid',
  SYMBOL: 'Must be a Symbol'
};

var AbstractValidator = function () {
  function AbstractValidator() {
    classCallCheck(this, AbstractValidator);

    if (this.constructor === AbstractValidator) {
      throw new TypeError('AbstractValidator is abstract');
    }

    if (typeof this.isValid === 'undefined') {
      throw new TypeError('#isValid is abstract');
    }
  }

  createClass(AbstractValidator, null, [{
    key: 'message',
    get: function get$$1() {
      return ValidatorsMessages.INVALID;
    }
  }]);
  return AbstractValidator;
}();

var AnyValidator = function (_AbstractValidator) {
  inherits(AnyValidator, _AbstractValidator);

  function AnyValidator(validators) {
    classCallCheck(this, AnyValidator);

    var _this = possibleConstructorReturn(this, (AnyValidator.__proto__ || Object.getPrototypeOf(AnyValidator)).call(this));

    _this.validators = validators;
    return _this;
  }

  createClass(AnyValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      for (var i = 0; i < this.validators.length; i++) {
        var validator = this.validators[i];
        if (validator.isValid(em, entity, property)) {
          return true;
        }
      }

      return false;
    }
  }]);
  return AnyValidator;
}(AbstractValidator);

var AllValidator = function (_AbstractValidator) {
  inherits(AllValidator, _AbstractValidator);

  function AllValidator(validators) {
    classCallCheck(this, AllValidator);

    var _this = possibleConstructorReturn(this, (AllValidator.__proto__ || Object.getPrototypeOf(AllValidator)).call(this));

    _this.validators = validators;
    return _this;
  }

  createClass(AllValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      for (var i = 0; i < this.validators.length; i++) {
        var validator = this.validators[i];
        if (!validator.isValid(em, entity, property)) {
          return false;
        }
      }

      return true;
    }
  }]);
  return AllValidator;
}(AbstractValidator);

var NullValidator = function (_AbstractValidator) {
  inherits(NullValidator, _AbstractValidator);

  function NullValidator() {
    classCallCheck(this, NullValidator);
    return possibleConstructorReturn(this, (NullValidator.__proto__ || Object.getPrototypeOf(NullValidator)).apply(this, arguments));
  }

  createClass(NullValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return entity[property] === null;
    }
  }]);
  return NullValidator;
}(AbstractValidator);

var SymbolValidator = function (_AbstractValidator) {
  inherits(SymbolValidator, _AbstractValidator);

  function SymbolValidator() {
    classCallCheck(this, SymbolValidator);
    return possibleConstructorReturn(this, (SymbolValidator.__proto__ || Object.getPrototypeOf(SymbolValidator)).apply(this, arguments));
  }

  createClass(SymbolValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return _typeof(entity[property]) === 'symbol';
    }
  }], [{
    key: 'message',
    get: function get$$1() {
      return ValidatorsMessages.SYMBOL;
    }
  }]);
  return SymbolValidator;
}(AbstractValidator);

var IntegerValidator = function (_AbstractValidator) {
  inherits(IntegerValidator, _AbstractValidator);

  function IntegerValidator() {
    classCallCheck(this, IntegerValidator);
    return possibleConstructorReturn(this, (IntegerValidator.__proto__ || Object.getPrototypeOf(IntegerValidator)).apply(this, arguments));
  }

  createClass(IntegerValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return Number.isInteger(entity[property]);
    }
  }]);
  return IntegerValidator;
}(AbstractValidator);

var NegativeValidator = function (_AbstractValidator) {
  inherits(NegativeValidator, _AbstractValidator);

  function NegativeValidator() {
    classCallCheck(this, NegativeValidator);
    return possibleConstructorReturn(this, (NegativeValidator.__proto__ || Object.getPrototypeOf(NegativeValidator)).apply(this, arguments));
  }

  createClass(NegativeValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return Number.isFinite(entity[property]) && entity[property] < 0;
    }
  }]);
  return NegativeValidator;
}(AbstractValidator);

var NotValidator = function (_AbstractValidator) {
  inherits(NotValidator, _AbstractValidator);

  function NotValidator(validator) {
    classCallCheck(this, NotValidator);

    var _this = possibleConstructorReturn(this, (NotValidator.__proto__ || Object.getPrototypeOf(NotValidator)).call(this));

    _this.validator = validator;
    return _this;
  }

  createClass(NotValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return !this.validator.isValid(em, entity, property);
    }
  }]);
  return NotValidator;
}(AbstractValidator);

/**
 * Utils to Set ES6
 * @private
 */
var SetUtils = function () {
  function SetUtils() {
    classCallCheck(this, SetUtils);
  }

  createClass(SetUtils, null, [{
    key: 'toJSON',

    /**
     *
     * @param {Set} instance
     * @return {Array}
     */
    value: function toJSON(instance) {
      var data = Array.from(instance.values());

      for (var i = 0; i < data.length; i++) {
        if (_typeof(data[i]) === 'object' && data[i] !== null && typeof data[i].toJSON === 'function') {
          data[i] = data[i].toJSON();
        }
      }

      return data;
    }

    /**
     *
     * @param {Set} instance
     * @param {Set|Array} data
     */

  }, {
    key: 'set',
    value: function set$$1(instance, data) {
      instance.clear();
      data.forEach(function (value) {
        instance.add(value);
      });
    }
  }]);
  return SetUtils;
}();

/**
 * Utils to Map ES6
 * @private
 */
var MapUtils = function () {
  function MapUtils() {
    classCallCheck(this, MapUtils);
  }

  createClass(MapUtils, null, [{
    key: 'toJSON',
    value: function toJSON(map) {
      var obj = Object.create(null);
      map.forEach(function (v, k) {
        obj[k] = v;
      });

      return obj;
    }
  }, {
    key: 'set',
    value: function set$$1(map, data) {
      map.clear();

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        Object.keys(data).forEach(function (k) {
          map.set(k, data[k]);
        });
      } else {
        data.forEach(function (_ref) {
          var _ref2 = slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map.set(key, value);
        });
      }
    }
  }]);
  return MapUtils;
}();

/**
 * Used to represent a reference to an AbstractEntity without loading it
 *
 * @public
 */
var Reference = function () {
  createClass(Reference, null, [{
    key: 'cast',

    /**
     * @package
     *
     * @param {string} classOf
     * @param {Number|null|Symbol|Reference|AbstractEntity} value
     * @return {number}
     */
    value: function cast(classOf, value) {
      if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol' || Number.isInteger(value)) {
        return value;
      }

      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
        throw new TypeError('Expected integer, null, ' + classOf + ' or Reference<' + classOf + '> but got ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
      }

      if (value instanceof Reference) {
        if (value.classOf !== classOf) {
          throw new TypeError('Expected reference of ' + classOf + ' but got reference of ' + value.classOf);
        }

        return value.value;
      }

      var name = null;
      switch (value.constructor.getName()) {
        case 'Label':
        case 'Picto':
          name = 'CustomObject';
          break;
        case 'Kiosk':
        case 'Mobile':
        case 'Web':
          name = 'Device';
          break;
        case 'MapAoDae':
        case 'MapConfig':
        case 'MapDae':
        case 'MapHelper':
        case 'MapLight':
        case 'MapPath':
          name = 'MapFile';
          break;
        case 'MediaImage':
        case 'MediaPdf':
        case 'MediaText':
        case 'MediaUrl':
        case 'MediaVideo':
        case 'Movie':
          name = 'Media';
          break;
        case 'Exhibitor':
        case 'Person':
        case 'Product':
        case 'Room':
        case 'Service':
        case 'Store':
          name = 'Poi';
          break;
        default:
          name = value.constructor.name;

      }

      if (!value._isEntity) {
        throw new TypeError('Expected integer, null or ' + classOf + ' or Reference<' + classOf + '>');
      }

      if (name !== classOf) {
        throw new TypeError('Expected integer, null or ' + classOf + ' or Reference<' + classOf + '> but got ' + value.constructor.getName());
      }

      return value.id;
    }

    /**
     * @param {String} classname Referencing the type of AbstractEntity included in the Collection
     * @param {Number|null|Symbol|Reference|AbstractEntity} [value=null]
     */

  }]);

  function Reference(classname) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    classCallCheck(this, Reference);

    /**
     * Referencing the type of AbstractEntity included in the Collection
     *
     * @public
     * @type {String}
     */
    this.classOf = classname;

    /**
     * @public
     * @type {null|number|symbol}
     */
    this.value = null;

    this.set(value);
  }

  /**
   *
   * @public
   * @param {Number|null|Symbol|Reference|AbstractEntity} value
   * @return {Reference}
   */


  createClass(Reference, [{
    key: 'set',
    value: function set$$1(value) {
      this.value = this.constructor.cast(this.classOf, value);

      return this;
    }

    /**
     *
     * @public
     * @return {Number|Symbol|null}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.value;
    }

    /**
     * Check if it's a Reference of something
     *
     * @public
     * @param {Number|Symbol|null|AbstractEntity|Reference} something
     * @return {boolean}
     */

  }, {
    key: 'is',
    value: function is(something) {
      return this.constructor.cast(this.classOf, something) === this.value;
    }
  }]);
  return Reference;
}();

/**
 * Used to represent a collection of another Entity without loading them. Is equivalent to an array of target entities identifier.
 *
 * @public
 * @hideconstructor
 */

var Collection = function () {
  /**
   * @package
   * @param {string} classOf Referencing the type of AbstractEntity included in the Collection
   * @param {Reference[]|Number[]|AbstractEntity[]} [values=null]
   */
  function Collection(classOf) {
    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    classCallCheck(this, Collection);

    /**
     * Referencing the type of AbstractEntity included in the Collection
     *
     * @public
     * @type {string}
     */
    this.classOf = classOf;

    /**
     * @public
     * @readonly
     * @type {Set<Reference>}
     */
    this.values = new Set();

    if (values) {
      this.set(values);
    }
  }

  /**
   * Iterator constructed from values property array
   *
   * @public
   * @return {Iterator}
   */


  createClass(Collection, [{
    key: Symbol.iterator,
    value: function value() {
      return this.values[Symbol.iterator]();
    }

    /**
     * @public
     * @callback Collection~forEachCallback
     * @param {Reference}
     */

    /**
     *
     * @public
     * @param {Collection~forEachCallback} callback
     * @returns {Collection}
     */

  }, {
    key: 'forEach',
    value: function forEach(callback) {
      this.values.forEach(callback);

      return this;
    }

    /**
     * @public
     * @param {Array<Reference|AbstractEntity|Number|Symbol>} values
     * @return {Collection}
     */

  }, {
    key: 'set',
    value: function set$$1(values) {
      var _this = this;

      this.clear();

      values.forEach(function (value) {
        _this.add(value);
      });

      return this;
    }

    /**
     * @public
     * @param {int} index
     * @return {Reference|null}
     */

  }, {
    key: 'at',
    value: function at(index) {
      var i = 0;
      var result = null;

      this.values.forEach(function (value) {
        if (i === index) {
          result = value;
        }

        i++;
      });

      return result;
    }

    /**
     * @public
     * @param {Reference|AbstractEntity|Number|Symbol} value
     * @return {Collection}
     */

  }, {
    key: 'add',
    value: function add(value) {
      if (this.has(value)) {
        return this;
      }

      this.values.add(new Reference(this.classOf, value));

      return this;
    }

    /**
     * @public
     * @param {Reference|AbstractEntity|Number|Symbol} value
     * @return {Collection}
     */

  }, {
    key: 'remove',
    value: function remove(value) {
      var _this2 = this;

      this.forEach(function (reference) {
        if (reference.is(value)) {
          _this2.values.delete(reference);
        }
      });

      return this;
    }

    /**
     * @public
     * @param {Reference|AbstractEntity|Number|Symbol} value
     * @return {Boolean}
     */

  }, {
    key: 'has',
    value: function has(value) {
      var found = false;

      this.forEach(function (reference) {
        if (!found && reference.is(value)) {
          found = true;
        }
      });

      return found;
    }

    /**
     * @public
     * @param {Reference|AbstractEntity|Number|Symbol} value
     * @return {int}
     */

  }, {
    key: 'indexOf',
    value: function indexOf(value) {
      var index = -1;

      var i = 0;
      this.forEach(function (reference) {
        if (index === -1 && reference.is(value)) {
          index = i;
        }

        i++;
      });

      return index;
    }

    /**
     * Get the collection size
     *
     * @public
     * @type {Number}
     */

  }, {
    key: 'clear',


    /**
     * Remove all elements from collection
     *
     * @public
     */
    value: function clear() {
      return this.values.clear();
    }

    /**
     * @public
     * @return {Number[]|Symbol[]}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = [];

      this.forEach(function (value) {
        json.push(value.toJSON());
      });

      return json;
    }
  }, {
    key: 'size',
    get: function get$$1() {
      return this.values.size;
    }
  }]);
  return Collection;
}();

/**
 * Used to represent an ordered collection of another Entity without loading them.
 *
 * @public
 * @hideconstructor
 *
 */

var OrderedCollection = function () {
  createClass(OrderedCollection, null, [{
    key: 'castPosition',

    /**
     * @package
     * @param position
     * @param size
     * @return {*}
     */
    value: function castPosition(position, size) {
      var result = position;

      if (position === null || position === undefined) {
        return null;
      }

      if (typeof position === 'string') {
        result = Number.isNaN(Number(position)) ? position : parseInt(position, 10);
      }

      if (!Number.isInteger(result)) {
        throw new TypeError('Position has to be an integer.');
      }

      return result >= size ? null : result;
    }

    /**
     * @package
     * @param {Array<{id: Reference|Number|symbol|AbstractEntity, position: Number}|Reference|Number|symbol|AbstractEntity>} values
     * @return {Array}
     */

  }, {
    key: 'order',
    value: function order(values) {
      var i = -1;
      var normalizedValues = values.map(function (value) {
        i++;

        if (value === null) {
          throw new TypeError('OrderedCollection should not have null value');
        }

        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
          return { id: value, position: i };
        }

        if (value instanceof Reference || value._isEntity) {
          return { id: value, position: i };
        }

        return value;
      });

      var orderedValues = normalizedValues.sort(function (a, b) {
        if (b.position !== a.position) {
          return b.position - a.position;
        }

        if (_typeof(a.id) === 'symbol' && _typeof(b.id) === 'symbol') {
          // Keep insertion order
          return values.indexOf(a) - values.indexOf(b);
        }

        if (_typeof(a.id) === 'symbol') {
          return 1;
        }

        if (_typeof(b.id) === 'symbol') {
          return -1;
        }

        return a.id - b.id;
      });

      return orderedValues.map(function (_ref) {
        var id = _ref.id;
        return id;
      });
    }

    /**
     *
     * @param {string} classOf Referencing the type of AbstractEntity included in the Collection
     * @param {Array<{id: Reference|Number|symbol|AbstractEntity, position: Number}|Reference|Number|symbol|AbstractEntity>} [values=null]
     */

  }]);

  function OrderedCollection(classOf) {
    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    classCallCheck(this, OrderedCollection);

    /**
     *
     * Referencing the type of AbstractEntity included in the Collection
     *
     * @public
     * @readonly
     * @type {string}
     */
    this.classOf = classOf;

    /**
     * @public
     * @readonly
     * @type {Reference[]}
     */
    this.values = [];

    if (values) {
      this.set(values);
    }
  }

  /**
   * Iterator constructed from values property array
   *
   * @public
   * @return {Iterator}
   */


  createClass(OrderedCollection, [{
    key: Symbol.iterator,
    value: function value() {
      return this.values[Symbol.iterator]();
    }

    /**
     * @public
     * @callback OrderedCollection~forEachCallback
     * @param {Reference}
     */

    /**
     *
     * @public
     * @param {OrderedCollection~forEachCallback} callback
     */

  }, {
    key: 'forEach',
    value: function forEach(callback) {
      this.values.forEach(function (reference) {
        callback(reference);
      });
    }

    /**
     * @public
     * @param {Array<{id: Reference|Number|symbol|AbstractEntity, position: Number}|Reference|Number|symbol|AbstractEntity>} values
     * @return {OrderedCollection}
     */

  }, {
    key: 'set',
    value: function set$$1(values) {
      var _this = this;

      this.clear();

      this.constructor.order(values).forEach(function (id) {
        _this.values.push(new Reference(_this.classOf, id));
      });

      return this;
    }

    /**
     * @public
     * @param {Reference|Number|symbol|AbstractEntity} reference
     * @param {Number|null} [position=null]
     * @return {OrderedCollection}
     */

  }, {
    key: 'add',
    value: function add(reference) {
      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var castedPosition = this.constructor.castPosition(position, this.size);

      var index = this.indexOf(reference);
      if (index !== -1) {
        this.removeAt(index);
      }

      if (castedPosition === null) {
        this.values.push(new Reference(this.classOf, reference));
      } else {
        this.values.splice(castedPosition, 0, new Reference(this.classOf, reference));
      }

      return this;
    }

    /**
     * @public
     * @param {Reference|Number|symbol|AbstractEntity} value
     * @return {OrderedCollection}
     */

  }, {
    key: 'remove',
    value: function remove(value) {
      var index = this.indexOf(value);

      if (index > -1) {
        this.removeAt(index);
      }

      return this;
    }

    /**
     * @public
     * @param {int} index
     * @return {OrderedCollection}
     */

  }, {
    key: 'removeAt',
    value: function removeAt(index) {
      this.values.splice(index, 1);

      return this;
    }

    /**
     * @public
     * @param {Reference|Number|symbol|AbstractEntity} value
     * @return {Boolean}
     */

  }, {
    key: 'has',
    value: function has(value) {
      var found = false;

      this.forEach(function (reference) {
        if (!found && reference.is(value)) {
          found = true;
        }
      });

      return found;
    }

    /**
     * @public
     * @param {Reference|AbstractEntity|Number|Symbol} value
     * @return {int}
     */

  }, {
    key: 'indexOf',
    value: function indexOf(value) {
      var index = -1;

      var i = 0;
      this.forEach(function (reference) {
        if (index === -1 && reference.is(value)) {
          index = i;
        }

        i++;
      });

      return index;
    }

    /**
     * @public
     * @param {int} index
     * @return {Reference|null}
     */

  }, {
    key: 'at',
    value: function at(index) {
      var i = 0;
      var result = null;

      this.values.forEach(function (value) {
        if (i === index) {
          result = value;
        }

        i++;
      });

      return result;
    }

    /**
     * @public
     * @member {Number}
     */

  }, {
    key: 'clear',


    /**
     * @public
     */
    value: function clear() {
      this.values.length = 0;

      return this;
    }

    /**
     * @public
     * @return {Array<{id: Number|Symbol, position: Number}>}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      var i = this.size;

      return this.values.map(function (reference) {
        return {
          id: reference.toJSON(),
          position: --i
        };
      });
    }
  }, {
    key: 'size',
    get: function get$$1() {
      return this.values.length;
    }
  }]);
  return OrderedCollection;
}();

var validatorsByEntityName = new Map();

/**
 *
 * @abstract
 */

var AbstractEntity = function () {
  createClass(AbstractEntity, [{
    key: 'set',


    /**
     * @package
     * @param property
     * @param value
     * @return {AbstractEntity}
     */
    value: function set$$1(property, value) {
      if (this[property] instanceof Set) {
        SetUtils.set(this[property], value);
      } else if (this[property] instanceof Map) {
        MapUtils.set(this[property], value);
      } else if (this[property] instanceof Reference || this[property] instanceof Collection || this[property] instanceof OrderedCollection || this[property] instanceof Vector) {
        this[property].set(value);
      } else {
        this[property] = value;
      }

      return this;
    }

    /**
     *
     * @param {?Object} [json=null] Used to constructor from a JSON representation {@see ~fromJSON}
     */

  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'AbstractEntity';
    }

    /**
     * Returns all readable keys
     * @package
     * @return {String[]}
     */

  }, {
    key: 'create',
    value: function create() {
      var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      return new this(json);
    }

    /**
     *
     * @param {?Object} [json=null] Used to constructor from a JSON representation {@see ~fromJSON}
     */

  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = [];

      keys.push('id');

      return keys;
    }
  }]);

  function AbstractEntity() {
    var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, AbstractEntity);

    if (this.constructor._isAbstract()) {
      this._throwIsAbstract();
    }

    /**
     * @type {boolean}
     * @package
     */
    this._isEntity = true;

    this._reset();

    if (json !== null) {
      this.fromJSON(json);
    }
  }

  /**
   *
   * @return {Object} JSON representation of the entity in the same format as the parameter of fromJSON method
   */


  createClass(AbstractEntity, [{
    key: 'toJSON',
    value: function toJSON() {
      var _this = this;

      var json = {};

      this.constructor.keys.forEach(function (key) {
        if (_this[key] instanceof Date || _this[key] instanceof Reference || _this[key] instanceof Collection || _this[key] instanceof OrderedCollection || _this[key] instanceof Vector) {
          json[key] = _this[key].toJSON();
        } else if (_this[key] instanceof Set) {
          json[key] = SetUtils.toJSON(_this[key]);
        } else if (_this[key] instanceof Map) {
          json[key] = MapUtils.toJSON(_this[key]);
        } else {
          json[key] = _this[key];
        }
      });

      return json;
    }

    /**
     *
     * @param {Object} json
     */

  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      var _this2 = this;

      this.constructor.keys.forEach(function (key) {
        if (json.hasOwnProperty(key)) {
          _this2.set(key, json[key]);
        }
      });

      return this;
    }

    /**
     * @return {AbstractEntity}
     */

  }, {
    key: 'clone',
    value: function clone() {
      return this.constructor.create(this.constructor._deepClone(this.toJSON()));
    }

    /**
     *
     * @param properties
     * @return {*}
     * @package
     */

  }, {
    key: '_reset',


    /**
     *
     * @package
     */
    value: function _reset() {
      /**
       *
       * @type {?Number}
       */
      this.id = null;
    }
  }, {
    key: '_throwIsAbstract',
    value: function _throwIsAbstract() {
      throw new TypeError(this.constructor.getName() + ' is abstract');
    }
  }], [{
    key: '_deepClone',
    value: function _deepClone(properties) {
      if (properties === null || (typeof properties === 'undefined' ? 'undefined' : _typeof(properties)) !== 'object') {
        return properties;
      }

      if (Array.isArray(properties)) {
        var _cloned = [];
        for (var i = 0; i < properties.length; i++) {
          _cloned.push(this._deepClone(properties[i]));
        }

        return _cloned;
      }

      // Only not null object from here
      var cloned = {};
      var keys = Object.keys(properties);
      for (var _i = 0; _i < keys.length; _i++) {
        var key = keys[_i];
        cloned[key] = this._deepClone(properties[key]);
      }

      return cloned;
    }

    /**
     *
     * @return {any}
     * @package
     */

  }, {
    key: '_setPropertyValidator',


    /**
     *
     * @param property
     * @param validator
     * @package
     */
    value: function _setPropertyValidator(property, validator) {
      validatorsByEntityName.get(this.getName()).set(property, validator);
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return true;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      validatorsByEntityName.set(this.getName(), new Map());

      this._setPropertyValidator('id', new AnyValidator([new NullValidator(), new SymbolValidator(), new AllValidator([new IntegerValidator(), new NotValidator(new NegativeValidator())])]));
    }
  }, {
    key: '_validators',
    get: function get$$1() {
      if (!validatorsByEntityName.has(this.getName())) {
        this._buildValidators();
      }

      return validatorsByEntityName.get(this.getName());
    }
  }]);
  return AbstractEntity;
}();

var HasSiteTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasSiteTrait = function (_superclass) {
    inherits(HasSiteTrait, _superclass);

    function HasSiteTrait() {
      classCallCheck(this, HasSiteTrait);
      return possibleConstructorReturn(this, (HasSiteTrait.__proto__ || Object.getPrototypeOf(HasSiteTrait)).apply(this, arguments));
    }

    createClass(HasSiteTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasSiteTrait.prototype.__proto__ || Object.getPrototypeOf(HasSiteTrait.prototype), '_reset', this).call(this);

        /**
         * @type {Reference<Site>}
         */
        this.site = new Reference('Site', null);
      }
    }], [{
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasSiteTrait.__proto__ || Object.getPrototypeOf(HasSiteTrait), 'keys', this);

        keys.push('site');

        return keys;
      }
    }]);
    return HasSiteTrait;
  }(superclass);

  return HasSiteTrait;
});

var NonEmptyStringValidator = function (_AbstractValidator) {
  inherits(NonEmptyStringValidator, _AbstractValidator);

  function NonEmptyStringValidator() {
    classCallCheck(this, NonEmptyStringValidator);
    return possibleConstructorReturn(this, (NonEmptyStringValidator.__proto__ || Object.getPrototypeOf(NonEmptyStringValidator)).apply(this, arguments));
  }

  createClass(NonEmptyStringValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return typeof entity[property] === 'string' && entity[property].length > 0 && entity[property].length <= 255;
    }
  }]);
  return NonEmptyStringValidator;
}(AbstractValidator);

var HasNameTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasNameTrait = function (_superclass) {
    inherits(HasNameTrait, _superclass);

    function HasNameTrait() {
      classCallCheck(this, HasNameTrait);
      return possibleConstructorReturn(this, (HasNameTrait.__proto__ || Object.getPrototypeOf(HasNameTrait)).apply(this, arguments));
    }

    createClass(HasNameTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasNameTrait.prototype.__proto__ || Object.getPrototypeOf(HasNameTrait.prototype), '_reset', this).call(this);

        /**
         * @type {?String}
         */
        this.name = null;
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasNameTrait.__proto__ || Object.getPrototypeOf(HasNameTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('name', new NonEmptyStringValidator());
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasNameTrait.__proto__ || Object.getPrototypeOf(HasNameTrait), 'keys', this);

        keys.push('name');

        return keys;
      }
    }]);
    return HasNameTrait;
  }(superclass);

  return HasNameTrait;
});

var HasMetadataTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasMetadataTrait = function (_superclass) {
    inherits(HasMetadataTrait, _superclass);

    function HasMetadataTrait() {
      classCallCheck(this, HasMetadataTrait);
      return possibleConstructorReturn(this, (HasMetadataTrait.__proto__ || Object.getPrototypeOf(HasMetadataTrait)).apply(this, arguments));
    }

    createClass(HasMetadataTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasMetadataTrait.prototype.__proto__ || Object.getPrototypeOf(HasMetadataTrait.prototype), '_reset', this).call(this);

        /**
         * @type {Map}
         */
        this.metadata = new Map();
      }
    }], [{
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasMetadataTrait.__proto__ || Object.getPrototypeOf(HasMetadataTrait), 'keys', this);

        keys.push('metadata');

        return keys;
      }
    }]);
    return HasMetadataTrait;
  }(superclass);

  return HasMetadataTrait;
});

var EnumValidator = function (_AbstractValidator) {
  inherits(EnumValidator, _AbstractValidator);

  function EnumValidator(enumeration) {
    classCallCheck(this, EnumValidator);

    var _this = possibleConstructorReturn(this, (EnumValidator.__proto__ || Object.getPrototypeOf(EnumValidator)).call(this));

    _this.enum = enumeration;
    _this.enumKeys = Object.keys(_this.enum);

    _this.enumValues = [];
    _this.enumKeys.forEach(function (key) {
      _this.enumValues.push(_this.enum[key]);
    });
    return _this;
  }

  createClass(EnumValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return this.enumValues.includes(entity[property]);
    }
  }]);
  return EnumValidator;
}(AbstractValidator);

/**
 * @public
 * @typedef {string} FileContext
 */

/**
 * @public
 * @readonly
 * @enum {FileContext}
 * @alias AdsumClientApi.FILE_CONTEXTS
 */
var FILE_CONTEXTS = {
  DEFAULT: 'default',
  TEXTURE: 'texture',
  TEXTURE_MODEL: 'texture_model',
  MEDIA: 'media',
  MEDIA_FILE: 'media_file',
  MEDIA_PREVIEW: 'media_preview',
  MAP: 'map',
  PICTO: 'picto',
  CATEGORY: 'category',
  SITE: 'site',
  POI: 'poi',
  TEXTURE_LOW: 'texture_low',
  TEXTURE_OCCLUSION: 'texture_occlusion',
  TEXTURE_HELPER: 'texture_helper'
};

/* eslint-disable camelcase */

/**
 * @class
 * @name File
 * @extends AbstractEntity
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var FileBase = function (_HasNameTrait) {
  inherits(FileBase, _HasNameTrait);

  function FileBase() {
    classCallCheck(this, FileBase);
    return possibleConstructorReturn(this, (FileBase.__proto__ || Object.getPrototypeOf(FileBase)).apply(this, arguments));
  }

  createClass(FileBase, [{
    key: 'fromBlob',


    /**
     * Only available on Browser environment
     *
     * @param {Blob} blob
     */
    value: function fromBlob(blob) {
      // eslint-disable-line no-unused-vars
      throw new Error('File#fromBlob is available in Browser environment');
    }

    /**
     * @package
     */

  }, {
    key: '_reset',
    value: function _reset() {
      get(FileBase.prototype.__proto__ || Object.getPrototypeOf(FileBase.prototype), '_reset', this).call(this);

      /**
       *
       * @type {?String}
       */
      this.reference = null;
      /**
       *
       * @type {?String}
       */
      this.content_hash = null;
      /**
       *
       * @type {?String}
       */
      this.file_type = null;
      /**
       *
       * @type {?String}
       */
      this.uri = null;
      /**
       *
       * @type {FILE_CONTEXTS}
       */
      this.context = FILE_CONTEXTS.DEFAULT;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'File';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: 'fromFileEntity',


    /**
     *
     * @param {File} file
     * @return {File}
     */
    value: function fromFileEntity(file) {
      if (!(file instanceof this)) {
        throw new TypeError('Expected an instance of File');
      }

      var newOne = new this();

      // noinspection JSAnnotator
      newOne.name = file.name;
      newOne.uri = file.uri;
      newOne.file_type = file.file_type;
      newOne.content_hash = file.content_hash;
      newOne.site = file.site;

      return newOne;
    }

    /**
     * Only available on Browser environment
     *
     * @param {Blob} blob
     * @returns {File}
     */

  }, {
    key: 'fromBlob',
    value: function fromBlob(blob) {
      var file = new this();
      file.fromBlob(blob);

      return file;
    }
  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(FileBase.__proto__ || Object.getPrototypeOf(FileBase), '_buildValidators', this).call(this);

      this._setPropertyValidator('uri', new NonEmptyStringValidator());
      this._setPropertyValidator('context', new EnumValidator(FILE_CONTEXTS));
    }
  }, {
    key: '_getBlobFromUri',
    value: function _getBlobFromUri(uri) {
      // eslint-disable-line no-unused-vars
      throw new Error('File#_getBlobFromUri is available in Browser environment');
    }
  }, {
    key: '_addBlobUri',
    value: function _addBlobUri(uri, blob) {
      // eslint-disable-line no-unused-vars
      throw new Error('File#_addBlobUri is available in Browser environment');
    }
  }, {
    key: '_getBufferFromUri',
    value: function _getBufferFromUri(uri) {
      // eslint-disable-line no-unused-vars
      throw new Error('File#_getBufferFromUri is available in Node environment');
    }
  }, {
    key: '_addBufferUri',
    value: function _addBufferUri(uri, buffer) {
      // eslint-disable-line no-unused-vars
      throw new Error('File#_addBufferUri is available in Node environment');
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(FileBase.__proto__ || Object.getPrototypeOf(FileBase), 'keys', this);

      keys.push('reference');
      keys.push('context');
      keys.push('file_type');
      keys.push('content_hash');
      keys.push('uri');

      return keys;
    }
  }]);
  return FileBase;
}(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))));

/* eslint-disable camelcase */

var _uriToBuffer = new Map();

/**
 * @class
 * @name File
 * @extends AbstractEntity
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var File = function (_FileBase) {
  inherits(File, _FileBase);

  function File() {
    classCallCheck(this, File);
    return possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).apply(this, arguments));
  }

  createClass(File, null, [{
    key: '_getBufferFromUri',
    value: function _getBufferFromUri(uri) {
      if (uri === null) {
        return null;
      }

      return _uriToBuffer.has(uri) ? _uriToBuffer.get(uri) : null;
    }
  }, {
    key: '_addBufferUri',
    value: function _addBufferUri(uri, buffer) {
      _uriToBuffer.set(uri, buffer);
    }
  }]);
  return File;
}(FileBase);

var _url = new WeakMap();

var axiosClient = axios.create({
  timeout: 0,
  maxContentLength: -1
});

/**
 * @class
 */

var RequestBase = function () {
  createClass(RequestBase, null, [{
    key: 'sendRequest',

    /**
     *
     * @param request
     * @return {Promise}
     */
    value: function sendRequest(request) {
      if (!(request instanceof this)) {
        throw new Error('Request instance expected');
      }

      return axiosClient.request({
        headers: request.headers,
        method: request.method,
        url: request.url,
        params: request.parameters,
        data: request.data,
        responseType: request.responseType
      }).then(function (result) {
        // Ensure adsum-web-map compatibility
        if (request.responseType === 'document') {
          // eslint-disable-next-line no-param-reassign
          result.responseXML = result.data;
        }

        return result;
      });
    }

    /**
     *
     * @param {string} uri
     * @return {Promise}
     */

  }, {
    key: 'getUriContentHash',
    value: function getUriContentHash(uri) {
      var _this = this;

      return this._getBufferFromUri(uri).then(function (buf) {
        return _this.getBufferContentHash(buf);
      });
    }

    /**
     *
     * @param buffer
     * @return {string}
     */

  }, {
    key: 'getBufferContentHash',
    value: function getBufferContentHash(buffer) {
      // eslint-disable-line no-unused-vars
      throw new Error('This is abstract');
    }
  }, {
    key: '_getBufferFromUri',
    value: function _getBufferFromUri(uri) {
      var buffer = File._getBufferFromUri(uri);
      if (buffer !== null) {
        return Promise.resolve(buffer);
      }

      var request = new this();
      request.method = 'get';
      request.responseType = 'arraybuffer';
      request.url = uri;

      return this.sendRequest(request).then(function (response) {
        buffer = response.data;
        File._addBufferUri(uri, buffer);

        return buffer;
      });
    }
  }, {
    key: 'formatRequestContext',
    value: function formatRequestContext(request) {
      return {
        request: {
          headers: request.headers,
          method: request.method,
          url: request.url,
          params: request.parameters,
          data: request.data,
          responseType: request.responseType
        }
      };
    }
  }, {
    key: 'formatApiError',
    value: function formatApiError(error, request) {
      var requestContext = this.formatRequestContext(request);

      var message = null;
      var context = null;

      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        var _error$response = error.response,
            status = _error$response.status,
            data = _error$response.data,
            headers = _error$response.headers;

        if (status >= 400 && status < 500) {
          if (status === 403) {
            message = 'Authentication failed; check your credentials, clock and authorizations';
          } else {
            message = 'Request failed due to invalid request';
          }
          context = {
            response: { data: data, headers: headers },
            request: requestContext
          };
        } else if (status === 503) {
          message = 'Server is busy';
          context = {
            response: { data: data, headers: headers },
            request: requestContext
          };
        } else {
          message = 'Server error';
          context = {
            response: { data: data, headers: headers },
            request: requestContext
          };
        }
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        message = 'No response from Server';
        context = {
          request: requestContext
        };
      } else {
        // Something happened in setting up the request that triggered an Error
        message = 'No response from Server';
        context = error;
      }

      return { message: message, context: context };
    }
  }]);

  function RequestBase() {
    classCallCheck(this, RequestBase);

    this.parameters = {};
    this.headers = {};
    this.method = 'GET';
    this.url = null;
    this.data = null;
    this.responseType = 'json';
  }

  /**
   *
   * @param {string} name
   * @param {string} value
   * @returns {Request}
   */


  createClass(RequestBase, [{
    key: 'addParameter',
    value: function addParameter(name, value) {
      this.parameters[name] = value;

      return this;
    }

    /**
     * @param {object} parameters
     * @returns {Request}
     */

  }, {
    key: 'addParameters',
    value: function addParameters(parameters) {
      var keys = Object.keys(parameters);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        this.addParameter(key, parameters[key]);
      }

      return this;
    }

    /**
     *
     * @returns {string}
     */

  }, {
    key: 'formattedParameters',
    value: function formattedParameters() {
      var str = [];
      var keys = Object.keys(this.parameters);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = this.parameters[key];
        str.push(key + '=' + value);
      }

      return str.join('&');
    }

    /**
     *
     * @param {String} name
     * @param {String} value
     * @returns {Request}
     */

  }, {
    key: 'addHeader',
    value: function addHeader(name, value) {
      this.headers[name] = value;

      return this;
    }

    /**
     *
     * @param {object} headers
     * @returns {Request}
     */

  }, {
    key: 'addHeaders',
    value: function addHeaders(headers) {
      var keys = Object.keys(headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        this.addHeader(key, headers[key]);
      }

      return this;
    }

    /**
     * @member {String}
     */

  }, {
    key: 'formattedUrl',


    /**
     *
     * @returns {string}
     */
    value: function formattedUrl() {
      return this.url + '?' + this.formattedParameters();
    }
  }, {
    key: 'url',
    get: function get$$1() {
      return _url.get(this);
    },
    set: function set$$1(url) {
      var urlNormalized = url;
      if (url !== null && url.indexOf('?') !== -1) {
        var parts = url.split('?');

        var _parts$splice = parts.splice(0, 1);

        var _parts$splice2 = slicedToArray(_parts$splice, 1);

        urlNormalized = _parts$splice2[0];

        var serializedParameters = parts.join('?');
        var parametersParts = serializedParameters.split('&');
        for (var i = 0; i < parametersParts.length; i++) {
          var parameterParts = parametersParts[i].split('=');
          var name = parameterParts.splice(0, 1)[0];
          var value = parameterParts.join('=');
          this.addParameter(name, value);
        }
      }

      _url.set(this, urlNormalized);

      return this;
    }
  }]);
  return RequestBase;
}();

var Request = function (_RequestBase) {
  inherits(Request, _RequestBase);

  function Request() {
    classCallCheck(this, Request);
    return possibleConstructorReturn(this, (Request.__proto__ || Object.getPrototypeOf(Request)).apply(this, arguments));
  }

  createClass(Request, null, [{
    key: 'getBufferContentHash',
    value: function getBufferContentHash(buffer) {
      return crypto.createHash('md5').update(buffer).digest('hex');
    }
  }]);
  return Request;
}(RequestBase);

/**
 * @package
 */
var Storage = function () {
  function Storage() {
    classCallCheck(this, Storage);

    this._idToEntityMap = new Map();
    this._entityList = null;
  }

  createClass(Storage, [{
    key: Symbol.iterator,
    value: function value() {
      return this.getAll()[Symbol.iterator]();
    }
  }, {
    key: "store",
    value: function store(entity) {
      this._idToEntityMap.set(entity.id, entity);
      this._entityList = null;

      return entity;
    }
  }, {
    key: "remove",
    value: function remove(entity) {
      if (!this.has(entity.id)) {
        return;
      }

      this._idToEntityMap.delete(entity.id);
      this._entityList = null;
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var _this = this;

      if (this._entityList === null) {
        this._entityList = [];
        this._idToEntityMap.forEach(function (value) {
          _this._entityList.push(value);
        });
      }

      return this._entityList;
    }
  }, {
    key: "get",
    value: function get$$1(id) {
      return this.has(id) ? this._idToEntityMap.get(id) : null;
    }
  }, {
    key: "has",
    value: function has(id) {
      return this._idToEntityMap.has(id);
    }
  }, {
    key: "clone",
    value: function clone() {
      var copy = new Storage();

      var entities = this.getAll();
      entities.forEach(function (entity) {
        copy._idToEntityMap.set(entity.id, entity.clone());
      });

      return copy;
    }
  }]);
  return Storage;
}();

/**
 * @abstract
 * @public
 * @hideconstructor
 */

var AbstractRepository = function () {
  /**
   * A read-only copy of the newly created entity
   *
   * @public
   * @event AbstractRepository#CREATE
   * @type {AbstractEntity}
   */

  /**
   * @public
   * @event AbstractRepository#UPDATE
   * @type {Object}
   * @property {AbstractEntity} current A read-only copy of the newly updated entity
   * @property {AbstractEntity} previous A read-only copy of the previous entity
   * @property {string[]} changes An array containing all updated properties
   */

  /**
   * A read-only copy of the removed entity
   *
   * @public
   * @event AbstractRepository#REMOVE
   * @type {AbstractEntity}
   */

  /**
   * This event is fired during flush BEFORE the object identifier is updated according to the remote server. <br/>
   * Usage: When a new entity is created, the EntityManager will assign a Symbol() as id. When flushing, the entity is
   * saved on the remote server which will send it's real id
   *
   * An array of size 2 elements [first, second] respectively the next and current id
   *
   * @public
   * @event AbstractRepository#IDENTIFIER_WILL_CHANGE
   * @type {Array<number|symbol>}
   */

  /**
   * This event is fired during flush AFTER the object identifier is updated according to the remote server. <br/>
   * Usage: When a new entity is created, the EntityManager will assign a Symbol() as id. When flushing, the entity is
   * saved on the remote server which will send it's real id
   *
   * An array of size 2 elements [first, second] respectively the current and previous id
   *
   *
   * @public
   * @event AbstractRepository#IDENTIFIER_DID_CHANGE
   * @type {Array<number|symbol>}
   */

  /**
   * @package
   * @param {EntityManager} em The EntityManager instance associated to the current Entity
   */
  function AbstractRepository(em) {
    classCallCheck(this, AbstractRepository);

    /**
     * @package
     * @type {string}
     */
    this._expectedClassOf = this.constructor.getEntityClass().getName();

    /**
     * @protected
     * @type {AdactiveLogger.AbstractLogger}
     */
    this._logger = new adactiveLogger.ChildLogger(em.options.logger, this._expectedClassOf);

    this._init(em);
  }

  /**
   * @public
   * @return {boolean}
   */


  createClass(AbstractRepository, [{
    key: 'isLoaded',
    value: function isLoaded() {
      return this._status === REPOSITORY_STATUSES.LOADED;
    }

    /**
     * @public
     * @return {boolean}
     */

  }, {
    key: 'isLoading',
    value: function isLoading() {
      return this._status === REPOSITORY_STATUSES.LOADING;
    }

    /**
     * @async
     *
     * @public
     * @param {boolean} [fallbackOnCache=true]
     * @return {Promise<void, Error>}
     */

  }, {
    key: 'load',
    value: function load() {
      var _this = this;

      var fallbackOnCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this.isLoading() || this.isLoaded()) {
        return this.isLoading() ? this._task : Promise.resolve();
      }

      this._logger.info('loading start');

      this._status = REPOSITORY_STATUSES.LOADING;

      var loading = this._loadIntoNewStorage(fallbackOnCache).then(function (storage) {
        _this._logger.debug('loading storing data');

        _this._storage = storage;

        _this._status = REPOSITORY_STATUSES.LOADED;

        _this._logger.info('loading success');
      }).catch(function (error) {
        _this._logger.error('loading fail', { error: error });
        _this._status = REPOSITORY_STATUSES.ERROR;

        return Promise.reject(error);
      });

      this._task = loading;

      return loading;
    }

    /**
     * @async
     *
     * @public
     * @param {boolean} [allowOutdated=false]
     * @return {Promise<void, Error>}
     */

  }, {
    key: 'loadFromCache',
    value: function loadFromCache() {
      var _this2 = this;

      var allowOutdated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this.isLoading() || this.isLoaded()) {
        return this.isLoading() ? this._task : Promise.resolve();
      }

      this._logger.info('loading start');

      this._status = REPOSITORY_STATUSES.LOADING;

      var loading = this._loadFromCacheIntoNewStorage(allowOutdated).then(function (storage) {
        _this2._logger.debug('loading storing data');

        _this2._storage = storage;

        _this2._status = REPOSITORY_STATUSES.LOADED;

        _this2._logger.info('loading success');
      }).catch(function (error) {
        _this2._logger.error('loading fail', { error: error });
        _this2._status = REPOSITORY_STATUSES.ERROR;

        return Promise.reject(error);
      });

      this._task = loading;

      return loading;
    }

    /**
     * @public
     * @return {AbstractEntity[]}
     */

  }, {
    key: 'getAll',
    value: function getAll() {
      this._assertIsLoaded();

      return this._storage.getAll();
    }

    /**
     * @public
     * @param {Number|AbstractEntity|Reference|null} id
     * @return {AbstractEntity|null}
     */

  }, {
    key: 'get',
    value: function get$$1(id) {
      this._assertIsLoaded();

      switch (true) {
        case id instanceof Reference:
          if (id.classOf !== this._expectedClassOf) {
            throw new TypeError('Expected a Reference<' + this._expectedClassOf + '> but got Reference<' + id.classOf + '>');
          }

          return this._storage.get(id.value);
        case (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id !== null:
          return this._storage.get(id.id);
        case typeof id === 'string':
          return this._storage.get(parseInt(id, 10));
        default:
          return this._storage.get(id);
      }
    }

    /**
     * @public
     * @param {Array<Number|AbstractEntity|Reference|null>} ids
     * @return {Array<AbstractEntity|null>}
     */

  }, {
    key: 'getList',
    value: function getList(ids) {
      var _this3 = this;

      var result = [];
      ids.forEach(function (id) {
        result.push(_this3.get(id));
      });

      return result;
    }

    /**
     * @public
     * @param {Object<string, *>} filters An object with entity property as key and associated filter function as value.
     * @return {Array<AbstractEntity>}
     */

  }, {
    key: 'findBy',
    value: function findBy(filters) {
      if ((typeof filters === 'undefined' ? 'undefined' : _typeof(filters)) !== 'object') {
        throw new Error('Filters need to be specified');
      }

      var getters = Object.keys(filters);
      var result = this.getAll();

      return result.filter(function (entity) {
        for (var i = 0; i < getters.length; i++) {
          var getter = getters[i];
          var filter = filters[getter];
          var doesMatch = false;
          switch (typeof filter === 'undefined' ? 'undefined' : _typeof(filter)) {
            case 'function':
              doesMatch = filter(entity[getter]);
              break;
            default:
              doesMatch = entity[getter] === filter;
          }
          if (!doesMatch) {
            return false;
          }
        }

        return true;
      });
    }

    /**
     * @public
     * @param {Object<string, *>} filters An object with entity property as key and associated filter function as value.
     * @return {AbstractEntity|null}
     */

  }, {
    key: 'findOneBy',
    value: function findOneBy(filters) {
      var result = this.findBy(filters);

      if (result.length > 1) {
        throw new Error("Result isn't unique, please use #findBy method instead");
      }

      return result.length === 0 ? null : result[0];
    }

    /**
     * Create / Update an entity
     *
     * @public
     * @param {AbstractEntity} entity
     * @fires AbstractRepository#event:CREATE
     * @fires AbstractRepository#event:UPDATE
     */

  }, {
    key: 'persist',
    value: function persist(entity) {
      this._logger.info('persist entity', { entity: entity });
      this.em._assertIsNotLocked();
      this._persist(entity);
    }

    /**
     * Remove an entity
     *
     * @public
     * @param {AbstractEntity|Reference|Symbol|Number} id
     * @fires AbstractEntity#event:REMOVE
     */

  }, {
    key: 'remove',
    value: function remove(id) {
      this._logger.info('remove entity', { id: id });
      this.em._assertIsNotLocked();
      this._remove(id);
    }

    /**
     *
     * @public
     * @param {AbstractEntity} entity
     * @return {Map<string,string>} A Map of invalid properties associated to error message
     */

  }, {
    key: 'validate',
    value: function validate(entity) {
      this._logger.info('validate entity', { entity: entity });
      this.constructor._throwExceptionIfNotSupported(entity);
      this._assertIsLoaded();

      return this._validate(entity);
    }

    /**
     *
     * @public
     * @param {AbstractEntity} entity
     * @param {string} property
     * @return {?string} The error message or null if it's valid
     */

  }, {
    key: 'validateProperty',
    value: function validateProperty(entity, property) {
      this._logger.info('validate entity', { entity: entity });
      this.constructor._throwExceptionIfNotSupported(entity);
      this._assertIsLoaded();

      return this._validateProperty(entity, property);
    }

    /**
     * @public
     * @param {AbstractEntity} entity
     * @return {boolean}
     */

  }, {
    key: 'isValid',
    value: function isValid(entity) {
      return this.validate(entity).size === 0;
    }

    /**
     * @package
     * @param {EntityManager} em The EntityManager instance associated to the current Entity
     */

  }, {
    key: '_init',
    value: function _init(em) {
      this._logger.debug('initialisation');

      /**
       * @public
       * @type {EntityManager}
       */
      this.em = em;

      /**
       * @type {EventDispatcher}
       * @protected
       */
      this._eventDispatcher = EventDispatcher;

      /**
       * @protected
       * @type {Storage}
       */
      this._storage = new Storage();

      /**
       * @protected
       * @type {RepositoryStatuses}
       */
      this._status = REPOSITORY_STATUSES.INITIAL;

      /**
       * @protected
       * @type {null|Promise}
       */
      this._task = null;
    }

    /**
     * @param {boolean} [allowOutdated=false]
     * @return {*}
     * @package
     */

  }, {
    key: '_loadFromCacheIntoNewStorage',
    value: function _loadFromCacheIntoNewStorage() {
      var _this4 = this;

      var allowOutdated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cacheManager = this.em.options.cacheManager;

      if (cacheManager === null) {
        return Promise.reject(new Error('AbstractRepository.loadFromCache: no CacheManager'));
      }

      return cacheManager.get(this.constructor.getName(), this.em.options, allowOutdated).then(function (result) {
        return _this4._putResultIntoNewStorage(result);
      });
    }

    /**
     * @package
     * @param {AbstractEntity} entity
     * @param {string} property
     * @return {?string} The error message or null if it's valid
     */

  }, {
    key: '_validateProperty',
    value: function _validateProperty(entity, property) {
      var validators = entity.constructor._validators;

      if (!validators.has(property)) {
        return null;
      }

      var validator = validators.get(property);

      if (validator.isValid(this.em, entity, property)) {
        return null;
      }

      return validator.constructor.message;
    }

    /**
     *
     * @param start
     * @package
     */

  }, {
    key: '_getLoadRequest',
    value: function _getLoadRequest(start) {
      var request = new Request();
      request.url = this.em.options.getEndpoint() + '/' + this.constructor._endpoint;
      request.parameters.start = start || 0;

      return request;
    }

    /**
     *
     * @param entity
     * @package
     */

  }, {
    key: '_getCreateRequest',
    value: function _getCreateRequest(entity) {
      var request = new Request();

      var json = entity.toJSON();

      delete json.id;

      this.constructor._readOnlyKeys.forEach(function (key) {
        delete json[key];
      });

      request.method = 'POST';
      request.url = this.em.options.getEndpoint() + '/' + this.constructor._endpoint;
      request.data = JSON.stringify(json);
      request.addHeader('Content-Type', 'application/json');

      return request;
    }

    /**
     *
     * @param entity
     * @param changes
     * @package
     */

  }, {
    key: '_getUpdateRequest',
    value: function _getUpdateRequest(entity, changes) {
      var request = new Request();

      var json = entity.toJSON();

      var readOnlyKeys = this.constructor._readOnlyKeys;

      var keys = Object.keys(json);
      keys.forEach(function (key) {
        if (changes.indexOf(key) === -1 || readOnlyKeys.indexOf(key) !== -1) {
          delete json[key];
        }
      });

      request.method = 'POST';
      request.url = this.em.options.getEndpoint() + '/' + this.constructor._endpoint + '/' + entity.id;
      request.data = JSON.stringify(json);
      request.addHeader('Content-Type', 'application/json');

      return request;
    }

    /**
     *
     * @param entities
     * @package
     */

  }, {
    key: '_getRemoveRequest',
    value: function _getRemoveRequest(entities) {
      var request = new Request();

      request.method = 'DELETE';
      request.url = this.em.options.getEndpoint() + '/' + this.constructor._endpoint;

      var queryParam = entities.map(function (entity) {
        return entity.id;
      }).join(',');

      request.addParameter('id', queryParam);

      return request;
    }

    /**
     *
     * @package
     */

  }, {
    key: '_assertIsLoaded',
    value: function _assertIsLoaded() {
      if (!this.isLoaded()) {
        this._logger.error('is not loaded');
        throw new Error('The repository ' + this.constructor.getName() + ' must be loaded but it\'s in ' + this._status + ' state for now !');
      }
    }

    /**
     *
     * @param fallbackOnCache
     * @return {Promise<T>}
     * @package
     */

  }, {
    key: '_loadIntoNewStorage',
    value: function _loadIntoNewStorage() {
      var _this5 = this;

      var fallbackOnCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._logger.verbose('loading first page');

      return this._loadFromCacheIntoNewStorage(false).catch(function () {
        return _this5._loadFromApiIntoNewStorage();
      }).catch(function (error) {
        if (fallbackOnCache) {
          _this5._logger.error('loading failed, fallback to outdated cache', { error: error });

          return _this5._loadFromCacheIntoNewStorage(true).catch(function () {
            return Promise.reject(error);
          }); // Fallback to original error;
        }

        return Promise.reject(error);
      });
    }

    /**
     *
     * @return {Promise}
     * @package
     */

  }, {
    key: '_loadFromApiIntoNewStorage',
    value: function _loadFromApiIntoNewStorage() {
      var _this6 = this;

      return this.em._xhr(this._getLoadRequest(), 200).then(function (response) {
        _this6._logger.verbose('loading first page success');
        var defs = [];
        var range = response.headers['content-range'];
        if (!range) {
          throw new Error('Content-Range is not present');
        }
        var matches = range.match(/^(-?[0-9]+)-(-?[0-9]+)\/([0-9]+)$/);
        if (!matches) {
          throw new Error('Content-Range invalid');
        }

        var start = parseInt(matches[1], 10);
        var end = parseInt(matches[2], 10);
        var totalCount = parseInt(matches[3], 10);

        var inc = end - start;

        defs.push(Promise.resolve(response));

        while (end + 1 < totalCount) {
          _this6._logger.verbose('loading next page');
          start = end + 1;
          end = start + inc;
          defs.push(_this6.em._xhr(_this6._getLoadRequest(start), 200));
        }

        return Promise.all(defs).then(function (results) {
          _this6._logger.verbose('loading all pages success');

          var merged = [];
          for (var i = 0; i < results.length; i++) {
            var data = results[i].data;

            if (!Array.isArray(data)) {
              var message = 'Return format expected to be an array while loading ' + _this6.constructor.getName();
              throw new Error(message);
            }
            merged = merged.concat(data);
          }
          if (merged.length !== totalCount) {
            // TODO: retry !
            throw new Error('"Expected ' + totalCount + ' results for but got ' + merged.length);
          }

          return merged;
        });
      }).then(function (result) {
        return _this6._putResultIntoNewStorage(result);
      });
    }

    /**
     *
     * @param result
     * @package
     */

  }, {
    key: '_putResultIntoNewStorage',
    value: function _putResultIntoNewStorage(result) {
      var storage = new Storage();

      for (var i = 0; i < result.length; i++) {
        var entity = this.constructor.fromJSON(result[i]);
        if (entity !== null) {
          storage.store(entity);
        }
      }

      return storage;
    }

    /**
     *
     * @param {Storage} newStorage
     * @return {object}
     * @package
     */

  }, {
    key: '_replaceStorage',
    value: function _replaceStorage(newStorage) {
      var _commits,
          _this7 = this;

      var previousStorage = this._storage;
      this._storage = newStorage;

      var commits = (_commits = {}, defineProperty(_commits, REPOSITORY_EVENTS.CREATE, []), defineProperty(_commits, REPOSITORY_EVENTS.UPDATE, []), defineProperty(_commits, REPOSITORY_EVENTS.REMOVE, []), _commits);

      // Track Deletions
      previousStorage.getAll().forEach(function (entity) {
        if (_this7.get(entity.id) === null) {
          commits[REPOSITORY_EVENTS.REMOVE].push(entity);
        }
      });

      // Track Update & Addition
      this.getAll().forEach(function (entity) {
        if (!previousStorage.has(entity.id)) {
          commits[REPOSITORY_EVENTS.CREATE] = entity;
          return;
        }

        var previousEntity = previousStorage.get(entity.id);
        var changes = _this7.constructor._compare(previousEntity, entity);

        if (changes.length === 0) {
          return;
        }

        commits[REPOSITORY_EVENTS.UPDATE] = { current: entity, previous: previousEntity, changes: changes };
      });

      return commits;
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @param {boolean} internal
     * @package
     */

  }, {
    key: '_persist',
    value: function _persist(entity, internal) {
      this._logger.debug('persist', { entity: entity, internal: internal });

      this._assertIsLoaded();
      this.constructor._throwExceptionIfNotSupported(entity);
      this._assertIsValid(entity);

      if (entity.id === null) {
        this._create(entity, internal);
      } else {
        this._update(entity, internal);
      }
    }

    /**
     *
     * @param id
     * @param internal
     * @package
     */

  }, {
    key: '_remove',
    value: function _remove(id, internal) {
      this._logger.debug('remove', { id: id, internal: internal });
      this._assertIsLoaded();
      var entity = this.get(id);

      if (entity === null) {
        return;
      }

      this._storage.remove(entity);
      this._eventDispatcher.publish(this, REPOSITORY_EVENTS.REMOVE, entity);

      if (!internal) {
        var commit = [this, REPOSITORY_EVENTS.REMOVE, [entity.clone()]];
        this._logger.debug('commit', { commit: commit });
        this.em._uow.commits.add(commit);
      }
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @return {Map<string, string>}
     * @package
     */

  }, {
    key: '_validate',
    value: function _validate(entity) {
      var _this8 = this;

      var validators = entity.constructor._validators;
      var errors = new Map();
      validators.forEach(function (_ref) {
        var _ref2 = slicedToArray(_ref, 2),
            property = _ref2[0],
            validator = _ref2[1];

        if (!validator.isValid(_this8.em, entity, property)) {
          errors.set(property, validator.constructor.message);
        }
      });

      return errors;
    }

    /**
     * @param {AbstractEntity} entity
     * @package
     */

  }, {
    key: '_assertIsValid',
    value: function _assertIsValid(entity) {
      if (!this.isValid(entity)) {
        var outputMessage = 'Given ' + entity.constructor.getName() + ' is not valid';
        var errors = this.validate(entity);
        errors.forEach(function (_ref3) {
          var _ref4 = slicedToArray(_ref3, 2),
              key = _ref4[0],
              message = _ref4[1];

          outputMessage += '\n\t' + key + ': ' + message;
        });

        throw new TypeError(outputMessage);
      }
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @param {boolean} internal
     * @package
     */

  }, {
    key: '_create',
    value: function _create(entity, internal) {
      // We need to allow already set id in order to be used by UOW to create dist entities
      if (entity.id === null) {
        // eslint-disable-next-line no-param-reassign
        entity.id = Symbol('AdsumClientApi_entity_id');
      }

      this._overrideSiteEntity(entity);

      this._storage.store(entity);

      this._logger.debug('create', { entity: entity, internal: internal });
      this._eventDispatcher.publish(this, REPOSITORY_EVENTS.CREATE, entity);

      if (!internal) {
        var commit = [this, REPOSITORY_EVENTS.CREATE, entity.clone()];
        this._logger.debug('commit', { commit: commit });
        this.em._uow.commits.add(commit);
      }
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @param {boolean} internal
     * @package
     */

  }, {
    key: '_update',
    value: function _update(entity, internal) {
      var previous = this.get(entity.id);

      if (previous === null) {
        throw new TypeError('Provided entity has id set but is not found, are you sure the entity is not remove ?');
      }

      if (previous.constructor !== entity.constructor) {
        this._switchType(entity, previous, internal);
        return;
      }

      var changes = this.constructor._compare(previous, entity);

      if (changes.length === 0) {
        return;
      }

      this._logger.debug('update', {
        entity: entity, previous: previous, changes: changes, internal: internal
      });

      this._storage.store(entity);
      this._eventDispatcher.publish(this, REPOSITORY_EVENTS.UPDATE, { current: entity, previous: previous, changes: changes });

      if (!internal) {
        var commit = [this, REPOSITORY_EVENTS.UPDATE, { current: entity.clone(), previous: previous, changes: changes }];
        this._logger.debug('commit', { commit: commit });

        this.em._uow.commits.add(commit);
      }
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @package
     */

  }, {
    key: '_overrideSiteEntity',
    value: function _overrideSiteEntity(entity) {
      if (entity.constructor.keys.indexOf('site') !== -1) {
        // eslint-disable-next-line no-param-reassign
        entity.site = this.em.options.site;
      }
    }

    /**
     *
     * @param {AbstractEntity} entity
     * @param {AbstractEntity} previous
     * @param {boolean} internal
     * @package
     */

  }, {
    key: '_switchType',
    value: function _switchType(entity, previous, internal) {
      this._logger.debug('switch type', { entity: entity, previous: previous, internal: internal });

      // The order matter to prevent cascade removal
      // eslint-disable-next-line no-param-reassign
      entity.id = null;
      this._create(entity, internal);
      this._remove(previous, internal);
    }

    /**
     * @public
     * @return {string}
     */

  }], [{
    key: 'getName',
    value: function getName() {
      return this.getEntityClass().getName();
    }

    /**
     *
     * @abstract
     * @package
     * @return {AbstractEntity.constructor}
     */

  }, {
    key: 'getEntityClass',
    value: function getEntityClass() {
      throw new Error('You must implements #getEntityClass');
    }

    /**
     * @package
     *
     * @param {?Object} json Used to constructor from a JSON representation {@see ~fromJSON}
     * @return {AbstractEntity}
     */

  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      return this.getEntityClass().create(json);
    }

    /**
     *
     * @return {Array}
     * @package
     */

  }, {
    key: '_compare',


    /**
     *
     * @param base
     * @param against
     * @return {Array}
     * @package
     */
    value: function _compare(base, against) {
      var _this9 = this;

      this._throwExceptionIfNotSupported(base);
      this._throwExceptionIfNotSupported(against);

      if (against.constructor !== base.constructor) {
        throw new TypeError('Cannot compare two entity of different classes');
      }

      var baseJSON = base.toJSON();
      var againstJSON = against.toJSON();
      var properties = Object.keys(baseJSON);

      var diff = [];

      properties.forEach(function (property) {
        var baseValue = baseJSON[property];
        var againstValue = againstJSON[property];

        if (!_this9._areDeepEqual(baseValue, againstValue)) {
          diff.push(property);
        }
      });

      return diff;
    }

    /**
     *
     * @param base
     * @param against
     * @return {boolean}
     * @package
     */

  }, {
    key: '_areDeepEqual',
    value: function _areDeepEqual(base, against) {
      if (base === against) {
        return true;
      }

      if ((typeof base === 'undefined' ? 'undefined' : _typeof(base)) !== 'object' || (typeof base === 'undefined' ? 'undefined' : _typeof(base)) !== (typeof against === 'undefined' ? 'undefined' : _typeof(against))) {
        return false;
      }

      if (base === null || against === null) {
        return false;
      }

      if (base.constructor !== against.constructor) {
        return false;
      }

      if (Array.isArray(base)) {
        if (base.length !== against.length) {
          return false;
        }

        var tookIntoAccount = new Set();

        for (var i = 0; i < base.length; i++) {
          var baseElmt = base[i];
          var found = false;
          for (var j = 0; j < against.length; j++) {
            if (!tookIntoAccount.has(j) && this._areDeepEqual(baseElmt, against[j])) {
              tookIntoAccount.add(j);
              found = true;
              break;
            }
          }

          if (!found) {
            return false;
          }
        }

        return true;
      }

      var properties = Object.keys(base);

      if (!this._areDeepEqual(properties, Object.keys(against))) {
        return false;
      }

      for (var _i = 0; _i < properties.length; _i++) {
        var property = properties[_i];
        if (!this._areDeepEqual(base[property], against[property])) {
          return false;
        }
      }

      return true;
    }

    /**
     *
     * @return {string}
     * @package
     */

  }, {
    key: '_throwExceptionIfNotSupported',


    /**
     *
     * @param entity
     * @package
     */
    value: function _throwExceptionIfNotSupported(entity) {
      if (!(entity instanceof this.getEntityClass())) {
        throw new TypeError('Unsupported entity');
      }
    }
  }, {
    key: '_readOnlyKeys',
    get: function get$$1() {
      return [];
    }
  }, {
    key: '_endpoint',
    get: function get$$1() {
      return this.getEntityClass().getName().toLowerCase();
    }
  }]);
  return AbstractRepository;
}();

var ReferenceValidator = function (_AbstractValidator) {
  inherits(ReferenceValidator, _AbstractValidator);

  function ReferenceValidator() {
    classCallCheck(this, ReferenceValidator);
    return possibleConstructorReturn(this, (ReferenceValidator.__proto__ || Object.getPrototypeOf(ReferenceValidator)).apply(this, arguments));
  }

  createClass(ReferenceValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return this.constructor.isReference(em, entity[property]);
    }
  }], [{
    key: 'isReference',
    value: function isReference(em, reference) {
      if (!(reference instanceof Reference)) {
        return false;
      }

      var repository = em.getRepository(reference.classOf);

      if (repository === null) {
        return false;
      }

      return reference.is(null) || repository.get(reference) !== null;
    }
  }]);
  return ReferenceValidator;
}(AbstractValidator);

var NotNullReferenceValidator = function (_ReferenceValidator) {
  inherits(NotNullReferenceValidator, _ReferenceValidator);

  function NotNullReferenceValidator() {
    classCallCheck(this, NotNullReferenceValidator);
    return possibleConstructorReturn(this, (NotNullReferenceValidator.__proto__ || Object.getPrototypeOf(NotNullReferenceValidator)).apply(this, arguments));
  }

  createClass(NotNullReferenceValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return get(NotNullReferenceValidator.prototype.__proto__ || Object.getPrototypeOf(NotNullReferenceValidator.prototype), 'isValid', this).call(this, em, entity, property) && !entity[property].is(null);
    }
  }]);
  return NotNullReferenceValidator;
}(ReferenceValidator);

var VectorValidator = function (_AbstractValidator) {
  inherits(VectorValidator, _AbstractValidator);

  function VectorValidator() {
    classCallCheck(this, VectorValidator);
    return possibleConstructorReturn(this, (VectorValidator.__proto__ || Object.getPrototypeOf(VectorValidator)).apply(this, arguments));
  }

  createClass(VectorValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      var value = entity[property];
      if (!(value instanceof Vector)) {
        return false;
      }

      return Number.isFinite(value.x) && Number.isFinite(value.y) && Number.isFinite(value.z);
    }
  }]);
  return VectorValidator;
}(AbstractValidator);

var IntegerValidator$1 = function (_AbstractValidator) {
  inherits(IntegerValidator, _AbstractValidator);

  function IntegerValidator() {
    classCallCheck(this, IntegerValidator);
    return possibleConstructorReturn(this, (IntegerValidator.__proto__ || Object.getPrototypeOf(IntegerValidator)).apply(this, arguments));
  }

  createClass(IntegerValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return Number.isFinite(entity[property]);
    }
  }]);
  return IntegerValidator;
}(AbstractValidator);

var BooleanValidator = function (_AbstractValidator) {
  inherits(BooleanValidator, _AbstractValidator);

  function BooleanValidator() {
    classCallCheck(this, BooleanValidator);
    return possibleConstructorReturn(this, (BooleanValidator.__proto__ || Object.getPrototypeOf(BooleanValidator)).apply(this, arguments));
  }

  createClass(BooleanValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return typeof entity[property] === 'boolean';
    }
  }]);
  return BooleanValidator;
}(AbstractValidator);

/**
 * @public
 * @typedef {string} CustomObjectOrientationMode
 */

/**
 * @public
 * @readonly
 * @enum {CustomObjectOrientationMode}
 * @alias AdsumClientApi.CUSTOM_OBJECT_ORIENTATION_MODES
 */
var CUSTOM_OBJECT_ORIENTATION_MODES = {
  BILLBOARD: 'BILLBOARD',
  STATIC: 'STATIC',
  FLIP: 'FLIP'
};

/* eslint-disable camelcase */

/**
 * @abstract
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var CustomObject = function (_HasSiteTrait) {
  inherits(CustomObject, _HasSiteTrait);

  function CustomObject() {
    classCallCheck(this, CustomObject);
    return possibleConstructorReturn(this, (CustomObject.__proto__ || Object.getPrototypeOf(CustomObject)).apply(this, arguments));
  }

  createClass(CustomObject, [{
    key: '_reset',


    /**
     * @protected
     */
    value: function _reset() {
      get(CustomObject.prototype.__proto__ || Object.getPrototypeOf(CustomObject.prototype), '_reset', this).call(this);

      /**
       *
       * @readonly
       * @type {CUSTOM_OBJECT_TYPES}
       */
      this.type = null;

      /**
       * @type {Reference<Place>}
       */
      this.place = new Reference('Place', null);

      /**
       * @type {Reference<Poi>}
       */
      this.poi = new Reference('Poi', null);

      /**
       * @type {Vector}
       */
      this.offset = new Vector();

      /**
       *
       * @type {boolean}
       */
      this.autoscale = false;

      /**
       *
       * @type {number}
       */
      this.rotation = 0;

      /**
       *
       * @type {number}
       */
      this.priority = 0;

      /**
       *
       * @type {ORIENTATION_MODES}
       */
      this.orientation_mode = CUSTOM_OBJECT_ORIENTATION_MODES.BILLBOARD;

      /**
       *
       * @type {boolean}
       */
      this.permanent_display = true;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'CustomObject';
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(CustomObject.__proto__ || Object.getPrototypeOf(CustomObject), '_buildValidators', this).call(this);

      this._setPropertyValidator('place', new NotNullReferenceValidator());
      this._setPropertyValidator('poi', new ReferenceValidator());
      this._setPropertyValidator('offset', new VectorValidator());
      this._setPropertyValidator('autoscale', new BooleanValidator());
      this._setPropertyValidator('rotation', new IntegerValidator$1());
      this._setPropertyValidator('priority', new IntegerValidator());
      this._setPropertyValidator('orientation_mode', new EnumValidator(CUSTOM_OBJECT_ORIENTATION_MODES));
      this._setPropertyValidator('permanent_display', new BooleanValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(CustomObject.__proto__ || Object.getPrototypeOf(CustomObject), 'keys', this);

      keys.push('type');
      keys.push('place');
      keys.push('poi');
      keys.push('offset');
      keys.push('autoscale');
      keys.push('rotation');
      keys.push('priority');
      keys.push('orientation_mode');
      keys.push('permanent_display');

      return keys;
    }
  }]);
  return CustomObject;
}(HasSiteTrait(HasMetadataTrait(AbstractEntity)));

/**
 * @public
 * @typedef {string} CustomObjectType
 */

/**
 * @public
 * @readonly
 * @enum {CustomObjectType}
 * @alias AdsumClientApi.CUSTOM_OBJECT_TYPES
 */
var CUSTOM_OBJECT_TYPES = {
  PICTO: 'picto',
  LABEL: 'label'
};

/**
 * @public
 * @typedef {string} LabelAlignment
 */

/**
 * @public
 * @readonly
 * @enum {LabelAlignment}
 * @alias AdsumClientApi.LABEL_ALIGNMENTS
 */
var LABEL_ALIGNMENTS = { LEFT: 'left', RIGHT: 'right', CENTER: 'center' };

var PositiveValidator = function (_AbstractValidator) {
  inherits(PositiveValidator, _AbstractValidator);

  function PositiveValidator() {
    classCallCheck(this, PositiveValidator);
    return possibleConstructorReturn(this, (PositiveValidator.__proto__ || Object.getPrototypeOf(PositiveValidator)).apply(this, arguments));
  }

  createClass(PositiveValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return Number.isFinite(entity[property]) && entity[property] > 0;
    }
  }]);
  return PositiveValidator;
}(AbstractValidator);

var ConstantValidator = function (_AbstractValidator) {
  inherits(ConstantValidator, _AbstractValidator);

  function ConstantValidator(constant) {
    classCallCheck(this, ConstantValidator);

    var _this = possibleConstructorReturn(this, (ConstantValidator.__proto__ || Object.getPrototypeOf(ConstantValidator)).call(this));

    _this.constant = constant;
    return _this;
  }

  createClass(ConstantValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return entity[property] === this.constant;
    }
  }]);
  return ConstantValidator;
}(AbstractValidator);

var StringValidator = function (_AbstractValidator) {
  inherits(StringValidator, _AbstractValidator);

  function StringValidator(regex) {
    classCallCheck(this, StringValidator);

    var _this = possibleConstructorReturn(this, (StringValidator.__proto__ || Object.getPrototypeOf(StringValidator)).call(this));

    _this.regex = regex;
    return _this;
  }

  createClass(StringValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return typeof entity[property] === 'string' && entity[property].match(this.regex) !== null;
    }
  }]);
  return StringValidator;
}(AbstractValidator);

/* eslint-disable camelcase */

/**
 * @extends CustomObject
 */

var Label = function (_CustomObject) {
  inherits(Label, _CustomObject);

  function Label() {
    classCallCheck(this, Label);
    return possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
  }

  createClass(Label, [{
    key: '_reset',
    value: function _reset() {
      get(Label.prototype.__proto__ || Object.getPrototypeOf(Label.prototype), '_reset', this).call(this);

      this.type = CUSTOM_OBJECT_TYPES.LABEL;
      /**
       *
       * @type {LABEL_ALIGNMENTS}
       */
      this.alignment = LABEL_ALIGNMENTS.CENTER;
      /**
       *
       * @type {?String}
       */
      this.font = 'Arial';
      /**
       *
       * @type {number}
       */
      this.font_size = 5;
      /**
       *
       * @type {?String}
       */
      this.font_color = '#000000';
      /**
       *
       * @type {?String}
       */
      this.background_color = null;
      /**
       *
       * @type {?String}
       */
      this.label = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Label';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Label.__proto__ || Object.getPrototypeOf(Label), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(CUSTOM_OBJECT_TYPES.LABEL));
      this._setPropertyValidator('font', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('alignment', new EnumValidator(LABEL_ALIGNMENTS));
      this._setPropertyValidator('font_size', new AllValidator([new IntegerValidator(), new PositiveValidator()]));
      this._setPropertyValidator('background_color', new AnyValidator([new NullValidator(), new StringValidator(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)]));
      this._setPropertyValidator('font_color', new StringValidator(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/));
      this._setPropertyValidator('label', new NonEmptyStringValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Label.__proto__ || Object.getPrototypeOf(Label), 'keys', this);

      keys.push('font');
      keys.push('alignment');
      keys.push('font_size');
      keys.push('font_color');
      keys.push('background_color');
      keys.push('label');

      return keys;
    }
  }]);
  return Label;
}(CustomObject);

var HasFileTrait = (function (superclass) {
  /**
   *
   * @mixin
   */
  var HasFileTrait = function (_superclass) {
    inherits(HasFileTrait, _superclass);

    function HasFileTrait() {
      classCallCheck(this, HasFileTrait);
      return possibleConstructorReturn(this, (HasFileTrait.__proto__ || Object.getPrototypeOf(HasFileTrait)).apply(this, arguments));
    }

    createClass(HasFileTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasFileTrait.prototype.__proto__ || Object.getPrototypeOf(HasFileTrait.prototype), '_reset', this).call(this);

        /**
         * @type {Reference<File>}
         */
        this.file = new Reference('File', null);
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasFileTrait.__proto__ || Object.getPrototypeOf(HasFileTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('file', new NotNullReferenceValidator());
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasFileTrait.__proto__ || Object.getPrototypeOf(HasFileTrait), 'keys', this);

        keys.push('file');

        return keys;
      }
    }]);
    return HasFileTrait;
  }(superclass);

  return HasFileTrait;
});

/* eslint-disable camelcase */

/**
 * @extends CustomObject
 * @extends HasFileTrait
 */

var Picto = function (_HasFileTrait) {
  inherits(Picto, _HasFileTrait);

  function Picto() {
    classCallCheck(this, Picto);
    return possibleConstructorReturn(this, (Picto.__proto__ || Object.getPrototypeOf(Picto)).apply(this, arguments));
  }

  createClass(Picto, [{
    key: '_reset',
    value: function _reset() {
      get(Picto.prototype.__proto__ || Object.getPrototypeOf(Picto.prototype), '_reset', this).call(this);

      this.type = CUSTOM_OBJECT_TYPES.PICTO;
      /**
       *
       * @type {Number}
       */
      this.width = null;
      /**
       *
       * @type {Number}
       */
      this.height = null;
      /**
       *
       * @type {?String}
       */
      this.original_md5 = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Picto';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Picto.__proto__ || Object.getPrototypeOf(Picto), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(CUSTOM_OBJECT_TYPES.PICTO));
      this._setPropertyValidator('width', new PositiveValidator());
      this._setPropertyValidator('height', new PositiveValidator());
      this._setPropertyValidator('original_md5', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Picto.__proto__ || Object.getPrototypeOf(Picto), 'keys', this);

      keys.push('width');
      keys.push('height');
      keys.push('original_md5');

      return keys;
    }
  }]);
  return Picto;
}(HasFileTrait(CustomObject));

/**
 * @public
 * @extends AbstractRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var CustomObjectRepository = function (_AbstractRepository) {
  inherits(CustomObjectRepository, _AbstractRepository);

  function CustomObjectRepository() {
    classCallCheck(this, CustomObjectRepository);
    return possibleConstructorReturn(this, (CustomObjectRepository.__proto__ || Object.getPrototypeOf(CustomObjectRepository)).apply(this, arguments));
  }

  createClass(CustomObjectRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return CustomObject;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== 'object' || json === null) {
        throw new TypeError('Expected an object');
      }

      switch (json.type) {
        case 'label':
          return new Label(json);
        case 'picto':
          return new Picto(json);
        default:
          throw new Error('Unable to parse CustomObject ' + json.type);
      }
    }
  }]);
  return CustomObjectRepository;
}(AbstractRepository);

/**
 * Utils to Map ES6
 * @private
 */
var DateUtils = function () {
  function DateUtils() {
    classCallCheck(this, DateUtils);
  }

  createClass(DateUtils, null, [{
    key: 'fromJSON',
    value: function fromJSON(value) {
      if (value === null || value === undefined) {
        return null;
      }

      if (value instanceof Date) {
        return Number.isFinite(value.getTime()) ? value : null;
      }

      if (typeof value !== 'string' && !Number.isFinite(value)) {
        return null;
      }

      var result = new Date();
      result.setTime(typeof value === 'string' ? Date.parse(value) : value);

      return Number.isFinite(result.getTime()) ? result : null;
    }
  }]);
  return DateUtils;
}();

var DateValidator = function (_AbstractValidator) {
  inherits(DateValidator, _AbstractValidator);

  function DateValidator() {
    classCallCheck(this, DateValidator);
    return possibleConstructorReturn(this, (DateValidator.__proto__ || Object.getPrototypeOf(DateValidator)).apply(this, arguments));
  }

  createClass(DateValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return entity[property] instanceof Date && Number.isFinite(entity[property].getTime());
    }
  }]);
  return DateValidator;
}(AbstractValidator);

/* eslint-disable camelcase */

/**
 * @abstract
 * @extends AbstractEntity
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var Device = function (_HasNameTrait) {
  inherits(Device, _HasNameTrait);

  function Device() {
    classCallCheck(this, Device);
    return possibleConstructorReturn(this, (Device.__proto__ || Object.getPrototypeOf(Device)).apply(this, arguments));
  }

  createClass(Device, [{
    key: 'set',
    value: function set$$1(property, value) {
      if (property === 'validate_at') {
        this[property] = DateUtils.fromJSON(value);

        return this;
      }

      return get(Device.prototype.__proto__ || Object.getPrototypeOf(Device.prototype), 'set', this).call(this, property, value);
    }

    /**
     * @package
     */

  }, {
    key: '_reset',
    value: function _reset() {
      get(Device.prototype.__proto__ || Object.getPrototypeOf(Device.prototype), '_reset', this).call(this);

      /**
       *
       * @type {DEVICE_TYPES}
       */
      this.type = null;
      /**
       *
       * @type {?String}
       */
      this.core_version = null;
      /**
       *
       * @type {?Number}
       */
      this.width = null;
      /**
       *
       * @type {?Number}
       */
      this.height = null;

      /**
       * @type {?Date}
       */
      this.validate_at = null;

      /**
       * @type {Reference<SiteCalibration>}
       */
      this.site_calibration = new Reference('SiteCalibration', null);
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Device';
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Device.__proto__ || Object.getPrototypeOf(Device), '_buildValidators', this).call(this);

      this._setPropertyValidator('site_calibration', new ReferenceValidator());
      this._setPropertyValidator('core_version', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('width', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('height', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('validate_at', new AnyValidator([new NullValidator(), new DateValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Device.__proto__ || Object.getPrototypeOf(Device), 'keys', this);

      keys.push('type');
      keys.push('site_calibration');
      keys.push('core_version');
      keys.push('width');
      keys.push('height');
      keys.push('validate_at');

      return keys;
    }
  }]);
  return Device;
}(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))));

/**
 * @public
 * @typedef {string} DeviceType
 */

/**
 * @public
 * @readonly
 * @enum {DeviceType}
 * @alias AdsumClientApi.DEVICE_TYPES
 */
var DEVICE_TYPES = {
  KIOSK: 'kiosk',
  MOBILE: 'mobile',
  WEB: 'web'
};

/**
 * @extends Device
 */

var Kiosk = function (_Device) {
  inherits(Kiosk, _Device);

  function Kiosk() {
    classCallCheck(this, Kiosk);
    return possibleConstructorReturn(this, (Kiosk.__proto__ || Object.getPrototypeOf(Kiosk)).apply(this, arguments));
  }

  createClass(Kiosk, [{
    key: '_reset',
    value: function _reset() {
      get(Kiosk.prototype.__proto__ || Object.getPrototypeOf(Kiosk.prototype), '_reset', this).call(this);

      this.type = DEVICE_TYPES.KIOSK;

      /**
       * @type {Vector}
       */
      this.position = new Vector();

      /**
       *
       * @type {?String}
       */
      this.os = null;

      /**
       *
       * @type {?String}
       */
      this.location = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Kiosk';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Kiosk.__proto__ || Object.getPrototypeOf(Kiosk), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(DEVICE_TYPES.KIOSK));
      this._setPropertyValidator('position', new VectorValidator());
      this._setPropertyValidator('os', new AnyValidator([new NonEmptyStringValidator(), new NullValidator()]));
      this._setPropertyValidator('location', new AnyValidator([new NonEmptyStringValidator(), new NullValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Kiosk.__proto__ || Object.getPrototypeOf(Kiosk), 'keys', this);

      keys.push('position');
      keys.push('os');
      keys.push('location');

      return keys;
    }
  }]);
  return Kiosk;
}(Device);

/**
 * @extends Device
 */

var Mobile = function (_Device) {
  inherits(Mobile, _Device);

  function Mobile() {
    classCallCheck(this, Mobile);
    return possibleConstructorReturn(this, (Mobile.__proto__ || Object.getPrototypeOf(Mobile)).apply(this, arguments));
  }

  createClass(Mobile, [{
    key: '_reset',
    value: function _reset() {
      get(Mobile.prototype.__proto__ || Object.getPrototypeOf(Mobile.prototype), '_reset', this).call(this);

      this.type = DEVICE_TYPES.MOBILE;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Mobile';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Mobile.__proto__ || Object.getPrototypeOf(Mobile), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(DEVICE_TYPES.MOBILE));
    }
  }]);
  return Mobile;
}(Device);

/**
 * @extends Device
 */

var Web = function (_Device) {
  inherits(Web, _Device);

  function Web() {
    classCallCheck(this, Web);
    return possibleConstructorReturn(this, (Web.__proto__ || Object.getPrototypeOf(Web)).apply(this, arguments));
  }

  createClass(Web, [{
    key: '_reset',
    value: function _reset() {
      get(Web.prototype.__proto__ || Object.getPrototypeOf(Web.prototype), '_reset', this).call(this);

      this.type = DEVICE_TYPES.WEB;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Web';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Web.__proto__ || Object.getPrototypeOf(Web), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(DEVICE_TYPES.WEB));
    }
  }]);
  return Web;
}(Device);

/**
 * @public
 * @extends AbstractRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var DeviceRepository = function (_AbstractRepository) {
  inherits(DeviceRepository, _AbstractRepository);

  function DeviceRepository() {
    classCallCheck(this, DeviceRepository);
    return possibleConstructorReturn(this, (DeviceRepository.__proto__ || Object.getPrototypeOf(DeviceRepository)).apply(this, arguments));
  }

  createClass(DeviceRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Device;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== 'object' || json === null) {
        throw new TypeError('Expected an object');
      }

      switch (json.type) {
        case 'kiosk':
          return new Kiosk(json);
        case 'mobile':
          return new Mobile(json);
        case 'web':
          return new Web(json);
        default:
          throw new Error('Unable to parse Device ' + json.type);
      }
    }
  }]);
  return DeviceRepository;
}(AbstractRepository);

/* eslint-disable camelcase */

var IsVersionedTrait = (function (superclass) {
  /**
   * @mixin
   */
  var IsVersionedTrait = function (_superclass) {
    inherits(IsVersionedTrait, _superclass);

    function IsVersionedTrait() {
      classCallCheck(this, IsVersionedTrait);
      return possibleConstructorReturn(this, (IsVersionedTrait.__proto__ || Object.getPrototypeOf(IsVersionedTrait)).apply(this, arguments));
    }

    createClass(IsVersionedTrait, [{
      key: 'set',
      value: function set$$1(property, value) {
        if (property === 'created_at' || property === 'updated_at') {
          this[property] = DateUtils.fromJSON(value);

          return this;
        }

        return get(IsVersionedTrait.prototype.__proto__ || Object.getPrototypeOf(IsVersionedTrait.prototype), 'set', this).call(this, property, value);
      }
    }, {
      key: '_reset',
      value: function _reset() {
        get(IsVersionedTrait.prototype.__proto__ || Object.getPrototypeOf(IsVersionedTrait.prototype), '_reset', this).call(this);

        /**
         *
         * @type {?Number}
         */
        this.version = null;

        /**
         * @type {?Date}
         */
        this.created_at = null;

        /**
         * @type {?Date}
         */
        this.updated_at = null;
      }
    }], [{
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(IsVersionedTrait.__proto__ || Object.getPrototypeOf(IsVersionedTrait), 'keys', this);

        keys.push('version');
        keys.push('created_at');
        keys.push('updated_at');

        return keys;
      }
    }]);
    return IsVersionedTrait;
  }(superclass);

  return IsVersionedTrait;
});

/**
 * @abstract
 * @extends AbstractEntity
 * @extends HasNameTrait
 * @extends IsVersionedTrait
 * @extends HasSiteTrait
 * @extends HasFileTrait
 * @extends HasMetadataTrait
 */

var MapFile = function (_HasNameTrait) {
  inherits(MapFile, _HasNameTrait);

  function MapFile() {
    classCallCheck(this, MapFile);
    return possibleConstructorReturn(this, (MapFile.__proto__ || Object.getPrototypeOf(MapFile)).apply(this, arguments));
  }

  createClass(MapFile, [{
    key: '_reset',
    value: function _reset() {
      get(MapFile.prototype.__proto__ || Object.getPrototypeOf(MapFile.prototype), '_reset', this).call(this);

      /**
       * @readonly
       * @type {MAP_FILE_TYPES}
       */
      this.type = null;
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapFile';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return true;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(MapFile.__proto__ || Object.getPrototypeOf(MapFile), 'keys', this);

      keys.push('type');

      return keys;
    }
  }]);
  return MapFile;
}(HasNameTrait(IsVersionedTrait(HasSiteTrait(HasFileTrait(HasMetadataTrait(AbstractEntity))))));

/**
 * @public
 * @typedef {string} MapFileType
 */

/**
 * @public
 * @readonly
 * @enum {MapFileType}
 * @alias AdsumClientApi.MAP_FILE_TYPES
 */
var MAP_FILE_TYPES = {
  AO_DAE: 'aoDae',
  CONFIG: 'config',
  DAE: 'dae',
  HELPER: 'helper',
  IVE: 'ive',
  LIGHT: 'light',
  OSG: 'osg',
  PATH: 'path'
};

/**
 * @extends MapFile
 */

var MapConfig = function (_MapFile) {
  inherits(MapConfig, _MapFile);

  function MapConfig() {
    classCallCheck(this, MapConfig);
    return possibleConstructorReturn(this, (MapConfig.__proto__ || Object.getPrototypeOf(MapConfig)).apply(this, arguments));
  }

  createClass(MapConfig, [{
    key: '_reset',
    value: function _reset() {
      get(MapConfig.prototype.__proto__ || Object.getPrototypeOf(MapConfig.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.CONFIG;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapConfig';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MapConfig.__proto__ || Object.getPrototypeOf(MapConfig), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.CONFIG));
    }
  }]);
  return MapConfig;
}(MapFile);

/**
 * @extends MapFile
 */

var MapDae = function (_MapFile) {
  inherits(MapDae, _MapFile);

  function MapDae() {
    classCallCheck(this, MapDae);
    return possibleConstructorReturn(this, (MapDae.__proto__ || Object.getPrototypeOf(MapDae)).apply(this, arguments));
  }

  createClass(MapDae, [{
    key: '_reset',
    value: function _reset() {
      get(MapDae.prototype.__proto__ || Object.getPrototypeOf(MapDae.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.DAE;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapDae';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MapDae.__proto__ || Object.getPrototypeOf(MapDae), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.DAE));
    }
  }]);
  return MapDae;
}(MapFile);

/**
 * @extends MapFile
 */

var MapAoDae = function (_MapFile) {
  inherits(MapAoDae, _MapFile);

  function MapAoDae() {
    classCallCheck(this, MapAoDae);
    return possibleConstructorReturn(this, (MapAoDae.__proto__ || Object.getPrototypeOf(MapAoDae)).apply(this, arguments));
  }

  createClass(MapAoDae, [{
    key: '_reset',
    value: function _reset() {
      get(MapAoDae.prototype.__proto__ || Object.getPrototypeOf(MapAoDae.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.AO_DAE;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapAoDae';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MapAoDae.__proto__ || Object.getPrototypeOf(MapAoDae), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.AO_DAE));
    }
  }]);
  return MapAoDae;
}(MapFile);

/**
 * @extends MapFile
 */

var MapLight = function (_MapFile) {
  inherits(MapLight, _MapFile);

  function MapLight() {
    classCallCheck(this, MapLight);
    return possibleConstructorReturn(this, (MapLight.__proto__ || Object.getPrototypeOf(MapLight)).apply(this, arguments));
  }

  createClass(MapLight, [{
    key: '_reset',
    value: function _reset() {
      get(MapLight.prototype.__proto__ || Object.getPrototypeOf(MapLight.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.LIGHT;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapLight';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MapLight.__proto__ || Object.getPrototypeOf(MapLight), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.LIGHT));
    }
  }]);
  return MapLight;
}(MapFile);

/**
 * @extends MapFile
 */

var MapHelper = function (_MapFile) {
  inherits(MapHelper, _MapFile);

  function MapHelper() {
    classCallCheck(this, MapHelper);
    return possibleConstructorReturn(this, (MapHelper.__proto__ || Object.getPrototypeOf(MapHelper)).apply(this, arguments));
  }

  createClass(MapHelper, [{
    key: '_reset',
    value: function _reset() {
      get(MapHelper.prototype.__proto__ || Object.getPrototypeOf(MapHelper.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.HELPER;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapHelper';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MapHelper.__proto__ || Object.getPrototypeOf(MapHelper), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.HELPER));
    }
  }]);
  return MapHelper;
}(MapFile);

/**
 * @typedef {{id: Number, location: {type: string, id: Number}, position: {x: Number, y: Number, z: Number}, isGate: boolean, links: Number[], groundId: Number }} Node
 */

/**
 * @typedef {{id: Number, type: Number, bidirectional: boolean, weight: Number, from: Number, to: Number}} Link
 */

/**
 * @extends MapFile
 */

var MapPath = function (_MapFile) {
  inherits(MapPath, _MapFile);

  function MapPath() {
    classCallCheck(this, MapPath);
    return possibleConstructorReturn(this, (MapPath.__proto__ || Object.getPrototypeOf(MapPath)).apply(this, arguments));
  }

  createClass(MapPath, [{
    key: '_reset',
    value: function _reset() {
      get(MapPath.prototype.__proto__ || Object.getPrototypeOf(MapPath.prototype), '_reset', this).call(this);

      this.type = MAP_FILE_TYPES.PATH;

      /**
       * @type {Map}
       */
      this.paths = new Map();
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MapPath';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(MapPath.__proto__ || Object.getPrototypeOf(MapPath), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MAP_FILE_TYPES.PATH));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(MapPath.__proto__ || Object.getPrototypeOf(MapPath), 'keys', this);

      keys.push('paths');

      return keys;
    }
  }]);
  return MapPath;
}(MapFile);

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var MapFileRepository = function (_AbstractRepository) {
  inherits(MapFileRepository, _AbstractRepository);

  function MapFileRepository() {
    classCallCheck(this, MapFileRepository);
    return possibleConstructorReturn(this, (MapFileRepository.__proto__ || Object.getPrototypeOf(MapFileRepository)).apply(this, arguments));
  }

  createClass(MapFileRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return MapFile;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== 'object' || json === null) {
        throw new TypeError('Expected an object');
      }

      switch (json.type) {
        case 'config':
          return new MapConfig(json);
        case 'dae':
          return new MapDae(json);
        case 'aoDae':
          return new MapAoDae(json);
        case 'light':
          return new MapLight(json);
        case 'helper':
          return new MapHelper(json);
        case 'path':
          return new MapPath(json);
        case 'ive':
        case 'osg':
        case 'model':
        case 'aoOsg':
          // just ignore
          return null;
        default:
          throw new Error('Unable to parse MapFile ' + json.type);
      }
    }
  }, {
    key: '_endpoint',
    get: function get$$1() {
      return 'map';
    }
  }]);
  return MapFileRepository;
}(AbstractRepository);

var StringValidator$1 = function (_AbstractValidator) {
  inherits(StringValidator, _AbstractValidator);

  function StringValidator() {
    classCallCheck(this, StringValidator);
    return possibleConstructorReturn(this, (StringValidator.__proto__ || Object.getPrototypeOf(StringValidator)).apply(this, arguments));
  }

  createClass(StringValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      return typeof entity[property] === 'string';
    }
  }]);
  return StringValidator;
}(AbstractValidator);

var HasDescriptionTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasDescriptionTrait = function (_superclass) {
    inherits(HasDescriptionTrait, _superclass);

    function HasDescriptionTrait() {
      classCallCheck(this, HasDescriptionTrait);
      return possibleConstructorReturn(this, (HasDescriptionTrait.__proto__ || Object.getPrototypeOf(HasDescriptionTrait)).apply(this, arguments));
    }

    createClass(HasDescriptionTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasDescriptionTrait.prototype.__proto__ || Object.getPrototypeOf(HasDescriptionTrait.prototype), '_reset', this).call(this);

        /**
         *
         * @type {?String}
         */
        this.description = null;
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasDescriptionTrait.__proto__ || Object.getPrototypeOf(HasDescriptionTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('description', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasDescriptionTrait.__proto__ || Object.getPrototypeOf(HasDescriptionTrait), 'keys', this);

        keys.push('description');

        return keys;
      }
    }]);
    return HasDescriptionTrait;
  }(superclass);

  return HasDescriptionTrait;
});

var HasSignatureTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasSignatureTrait = function (_superclass) {
    inherits(HasSignatureTrait, _superclass);

    function HasSignatureTrait() {
      classCallCheck(this, HasSignatureTrait);
      return possibleConstructorReturn(this, (HasSignatureTrait.__proto__ || Object.getPrototypeOf(HasSignatureTrait)).apply(this, arguments));
    }

    createClass(HasSignatureTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasSignatureTrait.prototype.__proto__ || Object.getPrototypeOf(HasSignatureTrait.prototype), '_reset', this).call(this);

        /**
         * @type {?String}
         */
        this.signature = null;
      }
    }], [{
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasSignatureTrait.__proto__ || Object.getPrototypeOf(HasSignatureTrait), 'keys', this);

        keys.push('signature');

        return keys;
      }
    }]);
    return HasSignatureTrait;
  }(superclass);

  return HasSignatureTrait;
});

var HasClientIdTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasClientIdTrait = function (_superclass) {
    inherits(HasClientIdTrait, _superclass);

    function HasClientIdTrait() {
      classCallCheck(this, HasClientIdTrait);
      return possibleConstructorReturn(this, (HasClientIdTrait.__proto__ || Object.getPrototypeOf(HasClientIdTrait)).apply(this, arguments));
    }

    createClass(HasClientIdTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasClientIdTrait.prototype.__proto__ || Object.getPrototypeOf(HasClientIdTrait.prototype), '_reset', this).call(this);

        /**
         *
         * @type {?String}
         */
        this.client_id = null;
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasClientIdTrait.__proto__ || Object.getPrototypeOf(HasClientIdTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('client_id', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasClientIdTrait.__proto__ || Object.getPrototypeOf(HasClientIdTrait), 'keys', this);

        keys.push('client_id');

        return keys;
      }
    }]);
    return HasClientIdTrait;
  }(superclass);

  return HasClientIdTrait;
});

var CollectionValidator = function (_AbstractValidator) {
  inherits(CollectionValidator, _AbstractValidator);

  function CollectionValidator() {
    classCallCheck(this, CollectionValidator);
    return possibleConstructorReturn(this, (CollectionValidator.__proto__ || Object.getPrototypeOf(CollectionValidator)).apply(this, arguments));
  }

  createClass(CollectionValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      var collection = entity[property];

      if (!(collection instanceof Collection)) {
        return false;
      }

      var result = true;

      collection.forEach(function (id) {
        if (id === null) {
          result = false;
          return;
        }

        var reference = new Reference(collection.classOf, id);

        if (!ReferenceValidator.isReference(em, reference) || reference.is(null)) {
          result = false;
        }
      });

      return result;
    }
  }]);
  return CollectionValidator;
}(AbstractValidator);

var OrderedCollectionValidator = function (_AbstractValidator) {
  inherits(OrderedCollectionValidator, _AbstractValidator);

  function OrderedCollectionValidator() {
    classCallCheck(this, OrderedCollectionValidator);
    return possibleConstructorReturn(this, (OrderedCollectionValidator.__proto__ || Object.getPrototypeOf(OrderedCollectionValidator)).apply(this, arguments));
  }

  createClass(OrderedCollectionValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      var orderedCollection = entity[property];

      if (!(orderedCollection instanceof OrderedCollection)) {
        return false;
      }

      var result = true;
      orderedCollection.forEach(function (id) {
        if (id === null) {
          result = false;
          return;
        }

        var reference = new Reference(orderedCollection.classOf, id);

        if (!ReferenceValidator.isReference(em, reference) || reference.is(null)) {
          result = false;
        }
      });

      return result;
    }
  }]);
  return OrderedCollectionValidator;
}(AbstractValidator);

/* eslint-disable camelcase */

/**
 * @abstract
 * @extends AbstractEntity
 * @extends HasClientIdTrait
 * @extends HasSignatureTrait
 * @extends IsVersionedTrait
 * @extends HasDescriptionTrait
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var Media = function (_HasClientIdTrait) {
  inherits(Media, _HasClientIdTrait);

  function Media() {
    classCallCheck(this, Media);
    return possibleConstructorReturn(this, (Media.__proto__ || Object.getPrototypeOf(Media)).apply(this, arguments));
  }

  createClass(Media, [{
    key: 'set',
    value: function set$$1(property, value) {
      if (property !== 'start_at' && property !== 'end_at') {
        return get(Media.prototype.__proto__ || Object.getPrototypeOf(Media.prototype), 'set', this).call(this, property, value);
      }

      this[property] = DateUtils.fromJSON(value);

      return this;
    }

    /**
     * @package
     */

  }, {
    key: '_reset',
    value: function _reset() {
      get(Media.prototype.__proto__ || Object.getPrototypeOf(Media.prototype), '_reset', this).call(this);
      /**
       * @readonly
       * @type {MEDIA_TYPES}
       */
      this.type = null;

      /**
       * @type {?Date}
       */
      this.start_at = null;

      /**
       * @type {?Date}
       */
      this.end_at = null;

      /**
       * @type {Collection<Tag>}
       */
      this.tags = new Collection('Tag');

      /**
       * @type {OrderedCollection<Playlist>}
       */
      this.playlists = new OrderedCollection('Playlist');

      /**
       * @type {Collection<Poi>}
       */
      this.pois = new Collection('Poi');

      /**
       * @type {Reference<File>}
       */
      this.preview = new Reference('File', null);
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Media';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Media.__proto__ || Object.getPrototypeOf(Media), '_buildValidators', this).call(this);

      this._setPropertyValidator('tags', new CollectionValidator());
      this._setPropertyValidator('playlists', new OrderedCollectionValidator());
      this._setPropertyValidator('pois', new CollectionValidator());
      this._setPropertyValidator('preview', new ReferenceValidator());
      this._setPropertyValidator('start_at', new AnyValidator([new NullValidator(), new DateValidator()]));
      this._setPropertyValidator('end_at', new AnyValidator([new NullValidator(), new DateValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Media.__proto__ || Object.getPrototypeOf(Media), 'keys', this);

      keys.push('type');
      keys.push('tags');
      keys.push('playlists');
      keys.push('pois');
      keys.push('preview');
      keys.push('start_at');
      keys.push('end_at');

      return keys;
    }
  }]);
  return Media;
}(HasClientIdTrait(HasSignatureTrait(IsVersionedTrait(HasDescriptionTrait(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))))))));

/**
 * @public
 * @typedef {string} MediaType
 */

/**
 * @readonly
 * @enum {MediaType}
 * @alias AdsumClientApi.MEDIA_TYPES
 */
var MEDIA_TYPES = {
  IMAGE: 'image',
  PDF: 'pdf',
  TEXT: 'text',
  URL: 'url',
  VIDEO: 'video',
  MOVIE: 'movie'
};

/**
 * @extends MapFile
 */

var MediaText = function (_Media) {
  inherits(MediaText, _Media);

  function MediaText() {
    classCallCheck(this, MediaText);
    return possibleConstructorReturn(this, (MediaText.__proto__ || Object.getPrototypeOf(MediaText)).apply(this, arguments));
  }

  createClass(MediaText, [{
    key: '_reset',
    value: function _reset() {
      get(MediaText.prototype.__proto__ || Object.getPrototypeOf(MediaText.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.TEXT;
      /**
       *
       * @type {?String}
       */
      this.format = null;
      /**
       *
       * @type {?String}
       */
      this.identifier = null;
      /**
       *
       * @type {?String}
       */
      this.content = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MediaText';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MediaText.__proto__ || Object.getPrototypeOf(MediaText), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.TEXT));
      this._setPropertyValidator('format', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('identifier', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('content', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(MediaText.__proto__ || Object.getPrototypeOf(MediaText), 'keys', this);

      keys.push('format');
      keys.push('identifier');
      keys.push('content');

      return keys;
    }
  }]);
  return MediaText;
}(Media);

/**
 * @extends MapFile
 * @extends HasFileTrait
 */

var MediaImage = function (_HasFileTrait) {
  inherits(MediaImage, _HasFileTrait);

  function MediaImage() {
    classCallCheck(this, MediaImage);
    return possibleConstructorReturn(this, (MediaImage.__proto__ || Object.getPrototypeOf(MediaImage)).apply(this, arguments));
  }

  createClass(MediaImage, [{
    key: '_reset',
    value: function _reset() {
      get(MediaImage.prototype.__proto__ || Object.getPrototypeOf(MediaImage.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.IMAGE;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MediaImage';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MediaImage.__proto__ || Object.getPrototypeOf(MediaImage), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.IMAGE));
    }
  }]);
  return MediaImage;
}(HasFileTrait(Media));

/**
 * @extends MapFile
 * @extends HasFileTrait
 */

var MediaPdf = function (_HasFileTrait) {
  inherits(MediaPdf, _HasFileTrait);

  function MediaPdf() {
    classCallCheck(this, MediaPdf);
    return possibleConstructorReturn(this, (MediaPdf.__proto__ || Object.getPrototypeOf(MediaPdf)).apply(this, arguments));
  }

  createClass(MediaPdf, [{
    key: '_reset',
    value: function _reset() {
      get(MediaPdf.prototype.__proto__ || Object.getPrototypeOf(MediaPdf.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.PDF;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MediaPdf';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }
  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MediaPdf.__proto__ || Object.getPrototypeOf(MediaPdf), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.PDF));
    }
  }]);
  return MediaPdf;
}(HasFileTrait(Media));

/**
 * @extends MapFile
 */

var MediaUrl = function (_Media) {
  inherits(MediaUrl, _Media);

  function MediaUrl() {
    classCallCheck(this, MediaUrl);
    return possibleConstructorReturn(this, (MediaUrl.__proto__ || Object.getPrototypeOf(MediaUrl)).apply(this, arguments));
  }

  createClass(MediaUrl, [{
    key: '_reset',
    value: function _reset() {
      get(MediaUrl.prototype.__proto__ || Object.getPrototypeOf(MediaUrl.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.URL;
      /**
       *
       * @type {?String}
       */
      this.link = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MediaUrl';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MediaUrl.__proto__ || Object.getPrototypeOf(MediaUrl), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.URL));
      this._setPropertyValidator('link', new NonEmptyStringValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(MediaUrl.__proto__ || Object.getPrototypeOf(MediaUrl), 'keys', this);

      keys.push('link');

      return keys;
    }
  }]);
  return MediaUrl;
}(Media);

/**
 * @extends MapFile
 * @extends HasFileTrait
 */

var MediaVideo = function (_HasFileTrait) {
  inherits(MediaVideo, _HasFileTrait);

  function MediaVideo() {
    classCallCheck(this, MediaVideo);
    return possibleConstructorReturn(this, (MediaVideo.__proto__ || Object.getPrototypeOf(MediaVideo)).apply(this, arguments));
  }

  createClass(MediaVideo, [{
    key: '_reset',
    value: function _reset() {
      get(MediaVideo.prototype.__proto__ || Object.getPrototypeOf(MediaVideo.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.VIDEO;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'MediaVideo';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }
  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(MediaVideo.__proto__ || Object.getPrototypeOf(MediaVideo), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.VIDEO));
    }
  }]);
  return MediaVideo;
}(HasFileTrait(Media));

var SetValidator = function (_AbstractValidator) {
  inherits(SetValidator, _AbstractValidator);

  function SetValidator() {
    var validator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, SetValidator);

    var _this = possibleConstructorReturn(this, (SetValidator.__proto__ || Object.getPrototypeOf(SetValidator)).call(this));

    _this.validator = validator;
    return _this;
  }

  createClass(SetValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      if (this.validator === null) {
        return true;
      }

      if (!(entity[property] instanceof Set)) {
        return false;
      }

      var values = Array.from(entity[property]);

      for (var i = 0; i < values.length; i++) {
        if (!this.validator.isValid(em, values, i)) {
          return false;
        }
      }

      return true;
    }
  }]);
  return SetValidator;
}(AbstractValidator);

/* eslint-disable camelcase */

/**
 * @extends MapFile
 * @extends HasFileTrait
 */

var Movie = function (_HasFileTrait) {
  inherits(Movie, _HasFileTrait);

  function Movie() {
    classCallCheck(this, Movie);
    return possibleConstructorReturn(this, (Movie.__proto__ || Object.getPrototypeOf(Movie)).apply(this, arguments));
  }

  createClass(Movie, [{
    key: 'set',
    value: function set$$1(property, value) {
      if (property !== 'coming_sessions') {
        return get(Movie.prototype.__proto__ || Object.getPrototypeOf(Movie.prototype), 'set', this).call(this, property, value);
      }

      var sessions = [];
      value.forEach(function (session) {
        var s = DateUtils.fromJSON(session);
        sessions.push(s);
      });

      SetUtils.set(this.coming_sessions, sessions);

      return this;
    }
  }, {
    key: '_reset',
    value: function _reset() {
      get(Movie.prototype.__proto__ || Object.getPrototypeOf(Movie.prototype), '_reset', this).call(this);

      this.type = MEDIA_TYPES.MOVIE;

      /**
       * @type {Set<String>}
       */
      this.actors = new Set();

      /**
       * @type {Set<Date>}
       */
      this.coming_sessions = new Set();

      /**
       *
       * @type {?String}
       */
      this.director = null;
      /**
       *
       * @type {?String}
       */
      this.certification = null;
      /**
       *
       * @type {?Number}
       */
      this.duration = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Movie';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Movie.__proto__ || Object.getPrototypeOf(Movie), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(MEDIA_TYPES.MOVIE));
      this._setPropertyValidator('actors', new SetValidator(new StringValidator$1()));
      this._setPropertyValidator('coming_sessions', new SetValidator(new DateValidator()));
      this._setPropertyValidator('director', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('certification', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Movie.__proto__ || Object.getPrototypeOf(Movie), 'keys', this);

      keys.push('actors');
      keys.push('coming_sessions');
      keys.push('director');
      keys.push('certification');
      keys.push('duration');

      return keys;
    }
  }]);
  return Movie;
}(HasFileTrait(Media));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var MediaRepository = function (_AbstractRepository) {
  inherits(MediaRepository, _AbstractRepository);

  function MediaRepository() {
    classCallCheck(this, MediaRepository);
    return possibleConstructorReturn(this, (MediaRepository.__proto__ || Object.getPrototypeOf(MediaRepository)).apply(this, arguments));
  }

  createClass(MediaRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Media;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== 'object' || json === null) {
        throw new TypeError('Expected an object');
      }

      switch (json.type) {
        case 'text':
          return new MediaText(json);
        case 'image':
          return new MediaImage(json);
        case 'pdf':
          return new MediaPdf(json);
        case 'url':
          return new MediaUrl(json);
        case 'video':
          return new MediaVideo(json);
        case 'movie':
          return new Movie(json);
        default:
          throw new Error('Unable to parse Media ' + json.type);
      }
    }
  }]);
  return MediaRepository;
}(AbstractRepository);

/* eslint-disable camelcase */

/**
 * @abstract
 * @extends AbstractEntity
 * @extends HasDescriptionTrait
 * @extends HasNameTrait
 * @extends IsVersionedTrait
 * @extends HasMetadataTrait
 * @extends HasSignatureTrait
 * @extends HasClientIdTrait
 * @extends HasSiteTrait
 */

var Poi = function (_HasDescriptionTrait) {
  inherits(Poi, _HasDescriptionTrait);

  function Poi() {
    classCallCheck(this, Poi);
    return possibleConstructorReturn(this, (Poi.__proto__ || Object.getPrototypeOf(Poi)).apply(this, arguments));
  }

  createClass(Poi, [{
    key: '_reset',
    value: function _reset() {
      get(Poi.prototype.__proto__ || Object.getPrototypeOf(Poi.prototype), '_reset', this).call(this);

      /**
       * @type {Collection<Category>}
       */
      this.categories = new Collection('Category');

      /**
       * @type {OrderedCollection<Poi>}
       */
      this.children = new OrderedCollection('Poi');

      /**
       * @type {Collection<CustomObject>}
       */
      this.custom_objects = new Collection('CustomObject');

      /**
       * @type {OrderedCollection<File>}
       */
      this.logos = new OrderedCollection('File');

      /**
       * @type {OrderedCollection<Media>}
       */
      this.medias = new OrderedCollection('Media');

      /**
       *
       * @type {boolean}
       */
      this.new = true;

      /**
       * @type {Collection<Poi>}
       */
      this.parents = new Collection('Poi');

      /**
       * @type {OrderedCollection<File>}
       */
      this.pictures = new OrderedCollection('File');

      /**
       * @type {Collection<Place>}
       */
      this.places = new Collection('Place');

      /**
       * @type {Collection<Tag>}
       */
      this.tags = new Collection('Tag');

      /**
       * @readonly
       * @type {POI_TYPES}
       */
      this.type = null;
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Poi';
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Poi.__proto__ || Object.getPrototypeOf(Poi), '_buildValidators', this).call(this);

      this._setPropertyValidator('new', new BooleanValidator());
      this._setPropertyValidator('categories', new CollectionValidator());
      this._setPropertyValidator('custom_objects', new CollectionValidator());
      this._setPropertyValidator('places', new CollectionValidator());
      this._setPropertyValidator('tags', new CollectionValidator());
      this._setPropertyValidator('parents', new CollectionValidator());
      this._setPropertyValidator('children', new OrderedCollectionValidator());
      this._setPropertyValidator('logos', new OrderedCollectionValidator());
      this._setPropertyValidator('pictures', new OrderedCollectionValidator());
      this._setPropertyValidator('medias', new OrderedCollectionValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Poi.__proto__ || Object.getPrototypeOf(Poi), 'keys', this);

      keys.push('type');
      keys.push('new');
      keys.push('categories');
      keys.push('custom_objects');
      keys.push('places');
      keys.push('tags');
      keys.push('parents');
      keys.push('children');
      keys.push('logos');
      keys.push('pictures');
      keys.push('medias');

      return keys;
    }
  }]);
  return Poi;
}(HasDescriptionTrait(HasNameTrait(IsVersionedTrait(HasMetadataTrait(HasSignatureTrait(HasClientIdTrait(HasSiteTrait(AbstractEntity))))))));

/**
 * @public
 * @typedef {string} PoiType
 */

/**
 * @readonly
 * @enum {PoiType}
 * @public
 * @alias AdsumClientApi.POI_TYPES
 */
var POI_TYPES = {
  EXHIBITOR: 'exhibitor',
  PERSON: 'person',
  PRODUCT: 'product',
  ROOM: 'room',
  SERVICE: 'service',
  STORE: 'store'
};

/**
 * @extends Poi
 */

var Exhibitor = function (_Poi) {
  inherits(Exhibitor, _Poi);

  function Exhibitor() {
    classCallCheck(this, Exhibitor);
    return possibleConstructorReturn(this, (Exhibitor.__proto__ || Object.getPrototypeOf(Exhibitor)).apply(this, arguments));
  }

  createClass(Exhibitor, [{
    key: '_reset',
    value: function _reset() {
      get(Exhibitor.prototype.__proto__ || Object.getPrototypeOf(Exhibitor.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.EXHIBITOR;
      /**
       *
       * @type {?String}
       */
      this.phone = null;
      /**
       *
       * @type {?String}
       */
      this.url = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Exhibitor';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Exhibitor.__proto__ || Object.getPrototypeOf(Exhibitor), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.EXHIBITOR));
      this._setPropertyValidator('phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('url', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Exhibitor.__proto__ || Object.getPrototypeOf(Exhibitor), 'keys', this);

      keys.push('phone');
      keys.push('url');

      return keys;
    }
  }]);
  return Exhibitor;
}(Poi);

/* eslint-disable camelcase */

/**
 * @extends Poi
 */

var Person = function (_Poi) {
  inherits(Person, _Poi);

  function Person() {
    classCallCheck(this, Person);
    return possibleConstructorReturn(this, (Person.__proto__ || Object.getPrototypeOf(Person)).apply(this, arguments));
  }

  createClass(Person, [{
    key: '_reset',
    value: function _reset() {
      get(Person.prototype.__proto__ || Object.getPrototypeOf(Person.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.PERSON;
      /**
       *
       * @type {?String}
       */
      this.firstname = null;
      /**
       *
       * @type {?String}
       */
      this.lastname = null;
      /**
       *
       * @type {?String}
       */
      this.desk_phone = null;
      /**
       *
       * @type {?String}
       */
      this.mobile_phone = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Person';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Person.__proto__ || Object.getPrototypeOf(Person), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.PERSON));
      this._setPropertyValidator('firstname', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('lastname', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('desk_phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('mobile_phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Person.__proto__ || Object.getPrototypeOf(Person), 'keys', this);

      keys.push('firstname');
      keys.push('lastname');
      keys.push('desk_phone');
      keys.push('mobile_phone');

      return keys;
    }
  }]);
  return Person;
}(Poi);

/* eslint-disable camelcase */

/**
 * @extends Poi
 */

var Product = function (_Poi) {
  inherits(Product, _Poi);

  function Product() {
    classCallCheck(this, Product);
    return possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).apply(this, arguments));
  }

  createClass(Product, [{
    key: '_reset',
    value: function _reset() {
      get(Product.prototype.__proto__ || Object.getPrototypeOf(Product.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.PRODUCT;
      /**
       *
       * @type {?String}
       */
      this.brand_name = null;
      /**
       *
       * @type {?String}
       */
      this.currency = null;
      /**
       *
       * @type {?String}
       */
      this.description1 = null;
      /**
       *
       * @type {?String}
       */
      this.description2 = null;
      /**
       *
       * @type {Number}
       */
      this.discount_value = null;
      /**
       *
       * @type {?String}
       */
      this.ean = null;
      /**
       *
       * @type {?String}
       */
      this.full_description = null;
      /**
       *
       * @type {?String}
       */
      this.full_name = null;
      /**
       *
       * @type {Number}
       */
      this.price = null;
      /**
       *
       * @type {Number}
       */
      this.priority = null;
      /**
       *
       * @type {Number}
       */
      this.rating = null;
      /**
       *
       * @type {Number}
       */
      this.rating_count = null;
      /**
       *
       * @type {?String}
       */
      this.reference = null;
      /**
       *
       * @type {Number}
       */
      this.remaining_quantity = null;
      /**
       *
       * @type {?String}
       */
      this.status = null;
      /**
       *
       * @type {?String}
       */
      this.url = null;
      /**
       * @type {Collection<FeatureValue>}
       */
      this.values = new Collection('FeatureValue');
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Product';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Product.__proto__ || Object.getPrototypeOf(Product), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.PRODUCT));
      this._setPropertyValidator('priority', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('reference', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('full_name', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('description1', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('description2', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('full_description', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('brand_name', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('url', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('status', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('price', new AnyValidator([new NullValidator(), new IntegerValidator$1()]));
      this._setPropertyValidator('currency', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('rating', new AnyValidator([new NullValidator(), new IntegerValidator$1()]));
      this._setPropertyValidator('rating_count', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('remaining_quantity', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('discount_value', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('ean', new AnyValidator([new NullValidator(), new StringValidator(/^[0-9]{8,13}$/)]));
      this._setPropertyValidator('values', new CollectionValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Product.__proto__ || Object.getPrototypeOf(Product), 'keys', this);

      keys.push('priority');
      keys.push('reference');
      keys.push('full_name');
      keys.push('description1');
      keys.push('description2');
      keys.push('full_description');
      keys.push('brand_name');
      keys.push('url');
      keys.push('status');
      keys.push('price');
      keys.push('currency');
      keys.push('rating');
      keys.push('rating_count');
      keys.push('remaining_quantity');
      keys.push('discount_value');
      keys.push('ean');
      keys.push('values');

      return keys;
    }
  }]);
  return Product;
}(Poi);

/**
 * @extends Poi
 */

var Room = function (_Poi) {
  inherits(Room, _Poi);

  function Room() {
    classCallCheck(this, Room);
    return possibleConstructorReturn(this, (Room.__proto__ || Object.getPrototypeOf(Room)).apply(this, arguments));
  }

  createClass(Room, [{
    key: '_reset',
    value: function _reset() {
      get(Room.prototype.__proto__ || Object.getPrototypeOf(Room.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.ROOM;
      /**
       *
       * @type {?String}
       */
      this.reference = null;
      /**
       *
       * @type {?String}
       */
      this.kind = null;
      /**
       *
       * @type {?Number}
       */
      this.capacity = null;
      /**
       *
       * @type {?String}
       */
      this.phone = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Room';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Room.__proto__ || Object.getPrototypeOf(Room), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.ROOM));
      this._setPropertyValidator('reference', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('kind', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('capacity', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Room.__proto__ || Object.getPrototypeOf(Room), 'keys', this);

      keys.push('reference');
      keys.push('kind');
      keys.push('capacity');
      keys.push('phone');

      return keys;
    }
  }]);
  return Room;
}(Poi);

/**
 * @extends Poi
 */

var Service = function (_Poi) {
  inherits(Service, _Poi);

  function Service() {
    classCallCheck(this, Service);
    return possibleConstructorReturn(this, (Service.__proto__ || Object.getPrototypeOf(Service)).apply(this, arguments));
  }

  createClass(Service, [{
    key: '_reset',
    value: function _reset() {
      get(Service.prototype.__proto__ || Object.getPrototypeOf(Service.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.SERVICE;

      /**
       * @type {Map}
       */
      this.schedule = new Map();
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Service';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Service.__proto__ || Object.getPrototypeOf(Service), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.SERVICE));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Service.__proto__ || Object.getPrototypeOf(Service), 'keys', this);

      keys.push('schedule');

      return keys;
    }
  }]);
  return Service;
}(Poi);

/* eslint-disable camelcase */

/**
 * @extends Poi
 */

var Store = function (_Poi) {
  inherits(Store, _Poi);

  function Store() {
    classCallCheck(this, Store);
    return possibleConstructorReturn(this, (Store.__proto__ || Object.getPrototypeOf(Store)).apply(this, arguments));
  }

  createClass(Store, [{
    key: '_reset',
    value: function _reset() {
      get(Store.prototype.__proto__ || Object.getPrototypeOf(Store.prototype), '_reset', this).call(this);

      this.type = POI_TYPES.STORE;
      /**
       * @default 0
       * @type {number}
       */
      this.priority = 0;
      /**
       *
       * @type {?String}
       */
      this.opening_time = null;
      /**
       *
       * @type {?String}
       */
      this.phone = null;
      /**
       *
       * @type {?String}
       */
      this.url = null;
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Store';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Store.__proto__ || Object.getPrototypeOf(Store), '_buildValidators', this).call(this);

      this._setPropertyValidator('type', new ConstantValidator(POI_TYPES.STORE));
      this._setPropertyValidator('priority', new IntegerValidator());
      this._setPropertyValidator('opening_time', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('url', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Store.__proto__ || Object.getPrototypeOf(Store), 'keys', this);

      keys.push('priority');
      keys.push('opening_time');
      keys.push('phone');
      keys.push('url');

      return keys;
    }
  }]);
  return Store;
}(Poi);

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var PoiRepository = function (_AbstractRepository) {
  inherits(PoiRepository, _AbstractRepository);

  function PoiRepository() {
    classCallCheck(this, PoiRepository);
    return possibleConstructorReturn(this, (PoiRepository.__proto__ || Object.getPrototypeOf(PoiRepository)).apply(this, arguments));
  }

  createClass(PoiRepository, [{
    key: '_switchType',
    value: function _switchType(entity, previous, internal) {
      // WARN: If poi has a signature, we need to update in order to prevent unique entity constraint error
      if (previous.signature !== null) {
        var clone = previous.clone();
        clone.signature = null;

        this._persist(clone, internal);
      }

      get(PoiRepository.prototype.__proto__ || Object.getPrototypeOf(PoiRepository.prototype), '_switchType', this).call(this, entity, previous, internal);
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Poi;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if ((typeof json === 'undefined' ? 'undefined' : _typeof(json)) !== 'object' || json === null) {
        throw new TypeError('Expected an object');
      }

      switch (json.type) {
        case 'exhibitor':
          return new Exhibitor(json);
        case 'person':
          return new Person(json);
        case 'product':
          return new Product(json);
        case 'room':
          return new Room(json);
        case 'service':
          return new Service(json);
        case 'store':
          return new Store(json);
        default:
          throw new Error('Unable to parse Poi ' + json.type);
      }
    }
  }]);
  return PoiRepository;
}(AbstractRepository);

var HasLogoTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasLogoTrait = function (_superclass) {
    inherits(HasLogoTrait, _superclass);

    function HasLogoTrait() {
      classCallCheck(this, HasLogoTrait);
      return possibleConstructorReturn(this, (HasLogoTrait.__proto__ || Object.getPrototypeOf(HasLogoTrait)).apply(this, arguments));
    }

    createClass(HasLogoTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasLogoTrait.prototype.__proto__ || Object.getPrototypeOf(HasLogoTrait.prototype), '_reset', this).call(this);

        /**
         * @type {Reference<File>}
         */
        this.logo = new Reference('File', null);
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasLogoTrait.__proto__ || Object.getPrototypeOf(HasLogoTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('logo', new ReferenceValidator());
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasLogoTrait.__proto__ || Object.getPrototypeOf(HasLogoTrait), 'keys', this);

        keys.push('logo');

        return keys;
      }
    }]);
    return HasLogoTrait;
  }(superclass);

  return HasLogoTrait;
});

/**
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends IsVersionedTrait
 * @extends HasMetadataTrait
 * @extends HasLogoTrait
 * @extends HasClientIdTrait
 * @extends HasSignatureTrait
 * @extends HasNameTrait
 *
 */

var Category = function (_HasSite) {
  inherits(Category, _HasSite);

  function Category() {
    classCallCheck(this, Category);
    return possibleConstructorReturn(this, (Category.__proto__ || Object.getPrototypeOf(Category)).apply(this, arguments));
  }

  createClass(Category, [{
    key: '_reset',
    value: function _reset() {
      get(Category.prototype.__proto__ || Object.getPrototypeOf(Category.prototype), '_reset', this).call(this);

      /**
       *
       * @type {?String}
       */
      this.color = null;
      /**
       *
       * @type {int}
       */
      this.rank = 0;
      /**
       *
       * @type {?String}
       */
      this.type = null;

      /**
       * @type {Set<String>}
       */
      this.parameters = new Set();

      /**
       * @type {Collection<Category>}
       */
      this.parents = new Collection('Category');

      /**
       * @type {OrderedCollection<Category>}
       */
      this.children = new OrderedCollection('Category');

      /**
       * @type {Collection<Poi>}
       */
      this.pois = new Collection('Poi');

      /**
       * @type {Collection<Tag>}
       */
      this.tags = new Collection('Tag');
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Category';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Category.__proto__ || Object.getPrototypeOf(Category), '_buildValidators', this).call(this);

      this._setPropertyValidator('color', new AnyValidator([new NullValidator(), new StringValidator(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)]));
      this._setPropertyValidator('parameters', new SetValidator(new StringValidator$1()));
      this._setPropertyValidator('parents', new CollectionValidator());
      this._setPropertyValidator('children', new OrderedCollectionValidator());
      this._setPropertyValidator('pois', new CollectionValidator());
      this._setPropertyValidator('tags', new CollectionValidator());
      this._setPropertyValidator('rank', new IntegerValidator());
      this._setPropertyValidator('type', new AnyValidator([new NonEmptyStringValidator(), new NullValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Category.__proto__ || Object.getPrototypeOf(Category), 'keys', this);

      keys.push('children');
      keys.push('color');
      keys.push('parameters');
      keys.push('parents');
      keys.push('pois');
      keys.push('rank');
      keys.push('type');
      keys.push('tags');

      return keys;
    }
  }]);
  return Category;
}(HasSiteTrait(IsVersionedTrait(HasMetadataTrait(HasLogoTrait(HasClientIdTrait(HasSignatureTrait(HasNameTrait(AbstractEntity))))))));

/**
 * @public
 * @extends AbstractRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var CategoryRepository = function (_AbstractRepository) {
  inherits(CategoryRepository, _AbstractRepository);

  function CategoryRepository() {
    classCallCheck(this, CategoryRepository);
    return possibleConstructorReturn(this, (CategoryRepository.__proto__ || Object.getPrototypeOf(CategoryRepository)).apply(this, arguments));
  }

  createClass(CategoryRepository, null, [{
    key: 'getEntityClass',

    /**
     * @inheritDoc
     * @return {Category}
     */
    value: function getEntityClass() {
      return Category;
    }
  }]);
  return CategoryRepository;
}(AbstractRepository);

/**
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends HasSignatureTrait
 * @extends HasClientIdTrait
 * @extends HasMetadataTrait
 * @extends HasNameTrait
 */

var Feature = function (_HasSiteTrait) {
  inherits(Feature, _HasSiteTrait);

  function Feature() {
    classCallCheck(this, Feature);
    return possibleConstructorReturn(this, (Feature.__proto__ || Object.getPrototypeOf(Feature)).apply(this, arguments));
  }

  createClass(Feature, [{
    key: '_reset',
    value: function _reset() {
      get(Feature.prototype.__proto__ || Object.getPrototypeOf(Feature.prototype), '_reset', this).call(this);

      /**
       * @type {Collection<FeatureValue>}
       */
      this.values = new Collection('FeatureValue');

      /**
       * @type {Collection<Feature>}
       */
      this.parents = new Collection('Feature');

      /**
       * @type {OrderedCollection<Feature>}
       */
      this.children = new OrderedCollection('Feature');
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Feature';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Feature.__proto__ || Object.getPrototypeOf(Feature), '_buildValidators', this).call(this);

      this._setPropertyValidator('values', new CollectionValidator());
      this._setPropertyValidator('parents', new CollectionValidator());
      this._setPropertyValidator('children', new OrderedCollectionValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Feature.__proto__ || Object.getPrototypeOf(Feature), 'keys', this);

      keys.push('values');
      keys.push('parents');
      keys.push('children');

      return keys;
    }
  }]);
  return Feature;
}(HasSiteTrait(HasMetadataTrait(HasSignatureTrait(HasClientIdTrait(HasNameTrait(AbstractEntity))))));

/**
 * @public
 * @extends AbstractRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var FeatureRepository = function (_AbstractRepository) {
  inherits(FeatureRepository, _AbstractRepository);

  function FeatureRepository() {
    classCallCheck(this, FeatureRepository);
    return possibleConstructorReturn(this, (FeatureRepository.__proto__ || Object.getPrototypeOf(FeatureRepository)).apply(this, arguments));
  }

  createClass(FeatureRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Feature;
    }
  }]);
  return FeatureRepository;
}(AbstractRepository);

/**
 * @extends AbstractEntity
 * @extends HasSignatureTrait
 * @extends HasClientIdTrait
 * @extends HasNameTrait
 * @extends HasMetadataTrait
 * @extends HasSiteTrait
 */

var FeatureValue = function (_HasSignatureTrait) {
  inherits(FeatureValue, _HasSignatureTrait);

  function FeatureValue() {
    classCallCheck(this, FeatureValue);
    return possibleConstructorReturn(this, (FeatureValue.__proto__ || Object.getPrototypeOf(FeatureValue)).apply(this, arguments));
  }

  createClass(FeatureValue, [{
    key: '_reset',
    value: function _reset() {
      get(FeatureValue.prototype.__proto__ || Object.getPrototypeOf(FeatureValue.prototype), '_reset', this).call(this);

      /**
       *
       * @type {number}
       */
      this.rank = 0;
      /**
       *
       * @type {?String}
       */
      this.unit = null;

      /**
       * @type {Reference<Feature>}
       */
      this.feature = new Reference('Feature', null);

      /**
       * @type {Collection<Product>}
       */
      this.products = new Collection('Product');
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'FeatureValue';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(FeatureValue.__proto__ || Object.getPrototypeOf(FeatureValue), '_buildValidators', this).call(this);

      this._setPropertyValidator('feature', new ReferenceValidator());
      this._setPropertyValidator('products', new CollectionValidator());
      this._setPropertyValidator('rank', new IntegerValidator());
      this._setPropertyValidator('unit', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(FeatureValue.__proto__ || Object.getPrototypeOf(FeatureValue), 'keys', this);

      keys.push('feature');
      keys.push('products');
      keys.push('rank');
      keys.push('unit');

      return keys;
    }
  }]);
  return FeatureValue;
}(HasSignatureTrait(HasClientIdTrait(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))))));

/**
 * @public
 * @extends AbstractRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var FeatureValueRepository = function (_AbstractRepository) {
  inherits(FeatureValueRepository, _AbstractRepository);

  function FeatureValueRepository() {
    classCallCheck(this, FeatureValueRepository);
    return possibleConstructorReturn(this, (FeatureValueRepository.__proto__ || Object.getPrototypeOf(FeatureValueRepository)).apply(this, arguments));
  }

  createClass(FeatureValueRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return FeatureValue;
    }
  }, {
    key: '_endpoint',
    get: function get$$1() {
      return 'feature-value';
    }
  }]);
  return FeatureValueRepository;
}(AbstractRepository);

/**
 * @public
 * @extends AbstractRepository
 * @class FileRepository
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var FileRepositoryBase = function (_AbstractRepository) {
  inherits(FileRepositoryBase, _AbstractRepository);

  function FileRepositoryBase() {
    classCallCheck(this, FileRepositoryBase);
    return possibleConstructorReturn(this, (FileRepositoryBase.__proto__ || Object.getPrototypeOf(FileRepositoryBase)).apply(this, arguments));
  }

  createClass(FileRepositoryBase, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return File;
    }
  }]);
  return FileRepositoryBase;
}(AbstractRepository);

var FileRepository = function (_FileRepositoryBase) {
  inherits(FileRepository, _FileRepositoryBase);

  function FileRepository() {
    classCallCheck(this, FileRepository);
    return possibleConstructorReturn(this, (FileRepository.__proto__ || Object.getPrototypeOf(FileRepository)).apply(this, arguments));
  }

  return FileRepository;
}(FileRepositoryBase);

/* eslint-disable camelcase */

/**
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var FloorCalibration = function (_HasSiteTrait) {
  inherits(FloorCalibration, _HasSiteTrait);

  function FloorCalibration() {
    classCallCheck(this, FloorCalibration);
    return possibleConstructorReturn(this, (FloorCalibration.__proto__ || Object.getPrototypeOf(FloorCalibration)).apply(this, arguments));
  }

  createClass(FloorCalibration, [{
    key: '_reset',
    value: function _reset() {
      get(FloorCalibration.prototype.__proto__ || Object.getPrototypeOf(FloorCalibration.prototype), '_reset', this).call(this);

      /**
       *
       * @type {?Number}
       */
      this.floor_id = null;

      /**
       * @type {Vector}
       */
      this.eye = new Vector();

      /**
       * @type {Vector}
       */
      this.target = new Vector();

      /**
       * @type {Vector}
       */
      this.up = new Vector();
      /**
       *
       * @type {?Number}
       */
      this.zoom_max = null;
      /**
       *
       * @type {?Number}
       */
      this.zoom_min = null;

      /**
       * @type {Reference<SiteCalibration>}
       */
      this.site_calibration = new Reference('SiteCalibration', null);
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'FloorCalibration';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(FloorCalibration.__proto__ || Object.getPrototypeOf(FloorCalibration), '_buildValidators', this).call(this);

      this._setPropertyValidator('site_calibration', new NotNullReferenceValidator());
      this._setPropertyValidator('floor_id', new IntegerValidator());
      this._setPropertyValidator('eye', new VectorValidator());
      this._setPropertyValidator('target', new VectorValidator());
      this._setPropertyValidator('up', new VectorValidator());
      this._setPropertyValidator('zoom_min', new AnyValidator([new NullValidator(), new IntegerValidator$1()]));
      this._setPropertyValidator('zoom_max', new AnyValidator([new NullValidator(), new IntegerValidator$1()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(FloorCalibration.__proto__ || Object.getPrototypeOf(FloorCalibration), 'keys', this);

      keys.push('site_calibration');
      keys.push('floor_id');
      keys.push('eye');
      keys.push('target');
      keys.push('up');
      keys.push('zoom_min');
      keys.push('zoom_max');

      return keys;
    }
  }]);
  return FloorCalibration;
}(HasSiteTrait(HasMetadataTrait(AbstractEntity)));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var FloorCalibrationRepository = function (_AbstractRepository) {
  inherits(FloorCalibrationRepository, _AbstractRepository);

  function FloorCalibrationRepository() {
    classCallCheck(this, FloorCalibrationRepository);
    return possibleConstructorReturn(this, (FloorCalibrationRepository.__proto__ || Object.getPrototypeOf(FloorCalibrationRepository)).apply(this, arguments));
  }

  createClass(FloorCalibrationRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return FloorCalibration;
    }
  }]);
  return FloorCalibrationRepository;
}(AbstractRepository);

/* eslint-disable camelcase */

/**
 * @extends AbstractEntity
 * @extends IsVersionedTrait
 * @extends HasSignatureTrait
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var Place = function (_IsVersionedTrait) {
  inherits(Place, _IsVersionedTrait);

  function Place() {
    classCallCheck(this, Place);
    return possibleConstructorReturn(this, (Place.__proto__ || Object.getPrototypeOf(Place)).apply(this, arguments));
  }

  createClass(Place, [{
    key: '_reset',
    value: function _reset() {
      get(Place.prototype.__proto__ || Object.getPrototypeOf(Place.prototype), '_reset', this).call(this);

      /**
       *
       * @type {?Number}
       */
      this.building_id = null;
      /**
       *
       * @type {?Number}
       */
      this.floor_id = null;
      /**
       *
       * @type {?Number}
       */
      this.shape_id = null;

      /**
       * @type {Vector}
       */
      this.position = new Vector();

      /**
       * @type {Collection<Poi>}
       */
      this.pois = new Collection('Poi');

      /**
       * @type {Collection<CustomObject>}
       */
      this.custom_objects = new Collection('CustomObject');
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Place';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Place.__proto__ || Object.getPrototypeOf(Place), '_buildValidators', this).call(this);

      this._setPropertyValidator('pois', new CollectionValidator());
      this._setPropertyValidator('custom_objects', new CollectionValidator());
      this._setPropertyValidator('building_id', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('floor_id', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('shape_id', new AnyValidator([new NullValidator(), new IntegerValidator()]));
      this._setPropertyValidator('position', new VectorValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Place.__proto__ || Object.getPrototypeOf(Place), 'keys', this);

      keys.push('pois');
      keys.push('custom_objects');
      keys.push('building_id');
      keys.push('floor_id');
      keys.push('shape_id');
      keys.push('position');

      return keys;
    }
  }]);
  return Place;
}(IsVersionedTrait(HasSignatureTrait(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))))));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var PlaceRepository = function (_AbstractRepository) {
  inherits(PlaceRepository, _AbstractRepository);

  function PlaceRepository() {
    classCallCheck(this, PlaceRepository);
    return possibleConstructorReturn(this, (PlaceRepository.__proto__ || Object.getPrototypeOf(PlaceRepository)).apply(this, arguments));
  }

  createClass(PlaceRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Place;
    }
  }]);
  return PlaceRepository;
}(AbstractRepository);

/**
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends IsVersionedTrait
 * @extends HasSignatureTrait
 * @extends HasClientIdTrait
 * @extends HasDescriptionTrait
 * @extends HasNameTrait
 * @extends HasMetadataTrait
 */

var Playlist = function (_HasSiteTrait) {
  inherits(Playlist, _HasSiteTrait);

  function Playlist() {
    classCallCheck(this, Playlist);
    return possibleConstructorReturn(this, (Playlist.__proto__ || Object.getPrototypeOf(Playlist)).apply(this, arguments));
  }

  createClass(Playlist, [{
    key: '_reset',
    value: function _reset() {
      get(Playlist.prototype.__proto__ || Object.getPrototypeOf(Playlist.prototype), '_reset', this).call(this);

      /**
       * @type {Collection<Tag>}
       */
      this.tags = new Collection('Tag');

      /**
       * @type {OrderedCollection<Media>}
       */
      this.medias = new OrderedCollection('Media');

      /**
       * @type {Set<String>}
       */
      this.parameters = new Set();
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Playlist';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Playlist.__proto__ || Object.getPrototypeOf(Playlist), '_buildValidators', this).call(this);

      this._setPropertyValidator('tags', new CollectionValidator());
      this._setPropertyValidator('medias', new OrderedCollectionValidator());
      this._setPropertyValidator('parameters', new SetValidator(new StringValidator$1()));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Playlist.__proto__ || Object.getPrototypeOf(Playlist), 'keys', this);

      keys.push('tags');
      keys.push('medias');
      keys.push('parameters');

      return keys;
    }
  }]);
  return Playlist;
}(HasSiteTrait(IsVersionedTrait(HasSignatureTrait(HasClientIdTrait(HasDescriptionTrait(HasNameTrait(HasMetadataTrait(AbstractEntity))))))));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var PlaylistRepository = function (_AbstractRepository) {
  inherits(PlaylistRepository, _AbstractRepository);

  function PlaylistRepository() {
    classCallCheck(this, PlaylistRepository);
    return possibleConstructorReturn(this, (PlaylistRepository.__proto__ || Object.getPrototypeOf(PlaylistRepository)).apply(this, arguments));
  }

  createClass(PlaylistRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Playlist;
    }
  }]);
  return PlaylistRepository;
}(AbstractRepository);

/* eslint-disable camelcase */

/**
 * @extends AbstractEntity
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var SiteCalibration = function (_HasSiteTrait) {
  inherits(SiteCalibration, _HasSiteTrait);

  function SiteCalibration() {
    classCallCheck(this, SiteCalibration);
    return possibleConstructorReturn(this, (SiteCalibration.__proto__ || Object.getPrototypeOf(SiteCalibration)).apply(this, arguments));
  }

  createClass(SiteCalibration, [{
    key: '_reset',
    value: function _reset() {
      get(SiteCalibration.prototype.__proto__ || Object.getPrototypeOf(SiteCalibration.prototype), '_reset', this).call(this);

      /**
       * @type {Reference<Device>}
       */
      this.device = new Reference('Device', null);

      /**
       * @type {Collection<FloorCalibration>}
       */
      this.floor_calibrations = new Collection('FloorCalibration');

      /**
       *
       * @type {?number}
       */
      this.start_floor = null;

      /**
       *
       * @type {?number}
       */
      this.start_point_floor = null;

      /**
       * @type {Vector}
       */
      this.start_point_position = new Vector();
    }
  }], [{
    key: 'getName',

    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'SiteCalibration';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(SiteCalibration.__proto__ || Object.getPrototypeOf(SiteCalibration), '_buildValidators', this).call(this);

      this._setPropertyValidator('device', new NotNullReferenceValidator());
      this._setPropertyValidator('floor_calibrations', new CollectionValidator());
      this._setPropertyValidator('start_floor', new IntegerValidator());
      this._setPropertyValidator('start_point_floor', new AnyValidator([new IntegerValidator(), new NullValidator()]));
      this._setPropertyValidator('start_point_position', new AnyValidator([new VectorValidator(), new NullValidator()]));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(SiteCalibration.__proto__ || Object.getPrototypeOf(SiteCalibration), 'keys', this);

      keys.push('device');
      keys.push('floor_calibrations');
      keys.push('start_floor');
      keys.push('start_point_floor');
      keys.push('start_point_position');

      return keys;
    }
  }]);
  return SiteCalibration;
}(HasSiteTrait(HasMetadataTrait(AbstractEntity)));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var SiteCalibrationRepository = function (_AbstractRepository) {
  inherits(SiteCalibrationRepository, _AbstractRepository);

  function SiteCalibrationRepository() {
    classCallCheck(this, SiteCalibrationRepository);
    return possibleConstructorReturn(this, (SiteCalibrationRepository.__proto__ || Object.getPrototypeOf(SiteCalibrationRepository)).apply(this, arguments));
  }

  createClass(SiteCalibrationRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return SiteCalibration;
    }
  }]);
  return SiteCalibrationRepository;
}(AbstractRepository);

var HasEmailTrait = (function (superclass) {
  /**
   * @mixin
   */
  var HasEmailTrait = function (_superclass) {
    inherits(HasEmailTrait, _superclass);

    function HasEmailTrait() {
      classCallCheck(this, HasEmailTrait);
      return possibleConstructorReturn(this, (HasEmailTrait.__proto__ || Object.getPrototypeOf(HasEmailTrait)).apply(this, arguments));
    }

    createClass(HasEmailTrait, [{
      key: '_reset',
      value: function _reset() {
        get(HasEmailTrait.prototype.__proto__ || Object.getPrototypeOf(HasEmailTrait.prototype), '_reset', this).call(this);

        /**
         *
         * @type {?String}
         */
        this.email = null;
      }
    }], [{
      key: '_buildValidators',
      value: function _buildValidators() {
        get(HasEmailTrait.__proto__ || Object.getPrototypeOf(HasEmailTrait), '_buildValidators', this).call(this);

        this._setPropertyValidator('email', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      }
    }, {
      key: 'keys',

      /**
       * @package
       * @return {string[]}
       */
      get: function get$$1() {
        var keys = get(HasEmailTrait.__proto__ || Object.getPrototypeOf(HasEmailTrait), 'keys', this);

        keys.push('email');

        return keys;
      }
    }]);
    return HasEmailTrait;
  }(superclass);

  return HasEmailTrait;
});

var GpsPositionValidator = function (_AbstractValidator) {
  inherits(GpsPositionValidator, _AbstractValidator);

  function GpsPositionValidator() {
    classCallCheck(this, GpsPositionValidator);
    return possibleConstructorReturn(this, (GpsPositionValidator.__proto__ || Object.getPrototypeOf(GpsPositionValidator)).apply(this, arguments));
  }

  createClass(GpsPositionValidator, [{
    key: 'isValid',
    value: function isValid(em, entity, property) {
      var value = entity[property];
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {
        return false;
      }

      return Number.isFinite(value.x) && Number.isFinite(value.y) && Number.isFinite(value.z) && Number.isFinite(value.latitude) && Number.isFinite(value.longitude) && Number.isFinite(value.altitude);
    }
  }]);
  return GpsPositionValidator;
}(AbstractValidator);

/* eslint-disable camelcase */

/**
 * @typedef {Object} GpsPosition
 * @property {Number} longitude
 * @property {Number} latitude
 * @property {Number} altitude
 * @property {Number} x
 * @property {Number} y
 * @property {Number} z
 * */

/**
 * @extends AbstractEntity
 * @extends HasMetadataTrait
 * @extends IsVersionedTrait
 * @extends HasLogoTrait
 * @extends HasSignatureTrait
 * @extends HasClientIdTrait
 * @extends HasEmailTrait
 * @extends HasDescriptionTrait
 * @extends HasNameTrait
 */

var Site = function (_HasMetadataTrait) {
  inherits(Site, _HasMetadataTrait);

  function Site() {
    classCallCheck(this, Site);
    return possibleConstructorReturn(this, (Site.__proto__ || Object.getPrototypeOf(Site)).apply(this, arguments));
  }

  createClass(Site, [{
    key: '_reset',
    value: function _reset() {
      get(Site.prototype.__proto__ || Object.getPrototypeOf(Site.prototype), '_reset', this).call(this);

      /**
       *
       * @type {?String}
       */
      this.opening = null;
      /**
       *
       * @type {?String}
       */
      this.direction = null;
      /**
       *
       * @type {?String}
       */
      this.city = null;
      /**
       *
       * @type {?String}
       */
      this.cp = null;
      /**
       *
       * @type {?String}
       */
      this.address = null;
      /**
       *
       * @type {?String}
       */
      this.phone = null;
      /**
       *
       * @type {?String}
       */
      this.locale = null;

      /**
       * @type {Set<String>}
       */
      this.languages = new Set();

      /**
       * @type {Set<GpsPosition>}
       */
      this.gps_positions = new Set();

      /**
       * @type {Set<number>}
       */
      this.gps_transform = new Set();

      /**
       * @type {Set<number>}
       */
      this.gps_translate = new Set();

      /**
       * @type {Set<string>}
       */
      this.target_platforms = new Set();
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Site';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',
    value: function _buildValidators() {
      get(Site.__proto__ || Object.getPrototypeOf(Site), '_buildValidators', this).call(this);

      this._setPropertyValidator('opening', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('direction', new AnyValidator([new NullValidator(), new StringValidator$1()]));
      this._setPropertyValidator('city', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('cp', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('address', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('phone', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('locale', new AnyValidator([new NullValidator(), new NonEmptyStringValidator()]));
      this._setPropertyValidator('languages', new SetValidator(new StringValidator$1()));
      this._setPropertyValidator('gps_positions', new SetValidator(new GpsPositionValidator()));
      this._setPropertyValidator('gps_transform', new SetValidator(new IntegerValidator$1()));
      this._setPropertyValidator('gps_translate', new SetValidator(new IntegerValidator$1()));
      this._setPropertyValidator('target_platforms', new SetValidator(new StringValidator$1()));
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Site.__proto__ || Object.getPrototypeOf(Site), 'keys', this);

      keys.push('opening');
      keys.push('direction');
      keys.push('city');
      keys.push('cp');
      keys.push('address');
      keys.push('phone');
      keys.push('locale');
      keys.push('languages');
      keys.push('gps_positions');
      keys.push('gps_transform');
      keys.push('gps_translate');
      keys.push('target_platforms');

      return keys;
    }
  }]);
  return Site;
}(HasMetadataTrait(IsVersionedTrait(HasLogoTrait(HasSignatureTrait(HasClientIdTrait(HasEmailTrait(HasDescriptionTrait(HasNameTrait(AbstractEntity)))))))));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var SiteRepository = function (_AbstractRepository) {
  inherits(SiteRepository, _AbstractRepository);

  function SiteRepository() {
    classCallCheck(this, SiteRepository);
    return possibleConstructorReturn(this, (SiteRepository.__proto__ || Object.getPrototypeOf(SiteRepository)).apply(this, arguments));
  }

  createClass(SiteRepository, [{
    key: 'getCurrent',


    /**
     * Returns the site entity corresponding to the site
     * @return {AbstractEntity|null}
     */
    value: function getCurrent() {
      return this.get(this.em.options.site);
    }
  }, {
    key: '_getLoadRequest',
    value: function _getLoadRequest() {
      var request = new Request();
      request.url = this.em.options.getEndpoint() + '/' + this.constructor._endpoint + '/' + this.em.options.site;

      return request;
    }
  }, {
    key: '_loadFromApiIntoNewStorage',
    value: function _loadFromApiIntoNewStorage() {
      var _this2 = this;

      return this.em._xhr(this._getLoadRequest(), 200).then(function (response) {
        var storage = new Storage();
        storage.store(_this2.constructor.fromJSON(response.data));

        return storage;
      });
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Site;
    }
  }]);
  return SiteRepository;
}(AbstractRepository);

/**
 * @extends AbstractEntity
 * @extends IsVersionedTrait
 * @extends HasSignatureTrait
 * @extends HasNameTrait
 * @extends HasSiteTrait
 * @extends HasMetadataTrait
 */

var Tag = function (_IsVersionedTrait) {
  inherits(Tag, _IsVersionedTrait);

  function Tag() {
    classCallCheck(this, Tag);
    return possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).apply(this, arguments));
  }

  createClass(Tag, [{
    key: '_reset',
    value: function _reset() {
      get(Tag.prototype.__proto__ || Object.getPrototypeOf(Tag.prototype), '_reset', this).call(this);

      /**
       * @type {Collection<Category>}
       */
      this.categories = new Collection('Category');

      /**
       * @type {Collection<Media>}
       */
      this.medias = new Collection('Media');

      /**
       * @type {Collection<Poi>}
       */
      this.pois = new Collection('Poi');

      /**
       * @type {Collection<Playlist>}
       */
      this.playlists = new Collection('Playlist');
    }
  }], [{
    key: 'getName',
    // eslint-disable-line max-len
    /**
     * @public
     * @return {string}
     */
    value: function getName() {
      return 'Tag';
    }

    /**
     *
     * @return {boolean}
     * @package
     */

  }, {
    key: '_isAbstract',
    value: function _isAbstract() {
      return false;
    }

    /**
     * @package
     * @return {string[]}
     */

  }, {
    key: '_buildValidators',


    /**
     * @package
     */
    value: function _buildValidators() {
      get(Tag.__proto__ || Object.getPrototypeOf(Tag), '_buildValidators', this).call(this);

      this._setPropertyValidator('categories', new CollectionValidator());
      this._setPropertyValidator('medias', new CollectionValidator());
      this._setPropertyValidator('pois', new CollectionValidator());
      this._setPropertyValidator('playlists', new CollectionValidator());
    }
  }, {
    key: 'keys',
    get: function get$$1() {
      var keys = get(Tag.__proto__ || Object.getPrototypeOf(Tag), 'keys', this);

      keys.push('categories');
      keys.push('medias');
      keys.push('pois');
      keys.push('playlists');

      return keys;
    }
  }]);
  return Tag;
}(IsVersionedTrait(HasSignatureTrait(HasNameTrait(HasSiteTrait(HasMetadataTrait(AbstractEntity))))));

/**
 * @extends AbstractRepository
 * @public
 * @hideconstructor
 *
 * @docNameSpace Repositories
 */

var TagRepository = function (_AbstractRepository) {
  inherits(TagRepository, _AbstractRepository);

  function TagRepository() {
    classCallCheck(this, TagRepository);
    return possibleConstructorReturn(this, (TagRepository.__proto__ || Object.getPrototypeOf(TagRepository)).apply(this, arguments));
  }

  createClass(TagRepository, null, [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Tag;
    }
  }]);
  return TagRepository;
}(AbstractRepository);

/**
 * @abstract
 * @package
 *
 * @docNameSpace Listeners
 */

var AbstractListener = function () {
  /**
   *
   * @param {EntityManager} em
   */
  function AbstractListener(em) {
    classCallCheck(this, AbstractListener);

    this._init(em);
  }

  /**
   *
   * @param {EntityManager} em
   */


  createClass(AbstractListener, [{
    key: '_init',
    value: function _init(em) {
      this.em = em;
      this.eventDispatcher = EventDispatcher;

      if (this.constructor === AbstractListener) {
        throw new TypeError('Cannot construct AbstractListener instances directly');
      }

      this._subscribe();
    }
  }, {
    key: '_subscribe',
    value: function _subscribe() {
      var entityName = this.constructor.getEntityClass().getName();
      var repository = this.em.getRepository(entityName);

      this.eventDispatcher.subscribe(repository, REPOSITORY_EVENTS.CREATE, this.onCreate.bind(this));
      this.eventDispatcher.subscribe(repository, REPOSITORY_EVENTS.UPDATE, this.onUpdate.bind(this));
      this.eventDispatcher.subscribe(repository, REPOSITORY_EVENTS.REMOVE, this.onRemove.bind(this));
    }
  }, {
    key: 'onCreate',
    value: function onCreate(entity) {// eslint-disable-line no-unused-vars

    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {// eslint-disable-line no-unused-vars

    }
  }, {
    key: 'onRemove',
    value: function onRemove(entity) {// eslint-disable-line no-unused-vars

    }
  }, {
    key: '_cascadeRemove',
    value: function _cascadeRemove(entity, property, inversedProperty) {
      var _this = this;

      var inversedRepository = this.em.getRepository(entity[property].classOf);
      if (entity[property] instanceof Reference) {
        var inversed = inversedRepository.get(entity[property]);
        if (this.constructor._isAssociatedTo(entity, inversed, inversedProperty)) {
          inversedRepository._remove(inversed, true);
        }
      }

      if (entity[property] instanceof Collection) {
        entity[property].forEach(function (value) {
          var inversed = inversedRepository.get(value);
          if (_this.constructor._isAssociatedTo(entity, inversed, inversedProperty)) {
            inversedRepository._remove(inversed, true);
          }
        });
      }

      if (entity[property] instanceof OrderedCollection) {
        entity[property].forEach(function (_ref) {
          var id = _ref.id;

          var inversed = inversedRepository.get(id);
          if (_this.constructor._isAssociatedTo(entity, inversed, inversedProperty)) {
            inversedRepository._remove(inversed, true);
          }
        });
      }
    }
  }, {
    key: '_unsetFromInversed',
    value: function _unsetFromInversed(entity, property, inversedProperty) {
      var inversedRepository = this.em.getRepository(entity[property].classOf);
      if (entity[property] instanceof Reference && entity[property].value !== null) {
        var inversed = inversedRepository.get(entity[property]);

        if (inversed !== null) {
          var copy = inversed.clone();
          copy[inversedProperty] = null;
          inversedRepository._persist(copy, true);
        }
      }

      if (entity[property] instanceof Collection) {
        entity[property].forEach(function (value) {
          var inversed = inversedRepository.get(value);

          if (inversed === null) {
            return;
          }

          var copy = inversed.clone();

          copy[inversedProperty] = null;
          inversedRepository._persist(copy, true);
        });
      }
    }
  }, {
    key: '_removeFromInversed',
    value: function _removeFromInversed(entity, property, inversedProperty) {
      var inversedRepository = this.em.getRepository(entity[property].classOf);
      if (entity[property] instanceof Reference && entity[property].value !== null) {
        var inversed = inversedRepository.get(entity[property]);

        if (inversed !== null) {
          var copy = inversed.clone();
          copy[inversedProperty].remove(entity);
          inversedRepository._persist(copy, true);
        }
      }

      if (entity[property] instanceof Collection) {
        entity[property].forEach(function (value) {
          var inversed = inversedRepository.get(value);

          if (inversed !== null) {
            var _copy = inversed.clone();
            _copy[inversedProperty].remove(entity);
            inversedRepository._persist(_copy, true);
          }
        });
      }

      if (entity[property] instanceof OrderedCollection) {
        entity[property].forEach(function (_ref2) {
          var id = _ref2.id;

          var inversed = inversedRepository.get(id);

          if (inversed !== null) {
            var _copy2 = inversed.clone();
            _copy2[inversedProperty].remove(entity);
            inversedRepository._persist(_copy2, true);
          }
        });
      }
    }
  }, {
    key: '_onManyToManyOrToLinkPropertyChange',
    value: function _onManyToManyOrToLinkPropertyChange(current, previous, property, inversedProperty, orphanRemoval, newlyUpdater) {
      var _this2 = this;

      var formerUpdater = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

      var inversedRepository = this.em.getRepository(current[property].classOf);

      // Track creations
      current[property].forEach(function (id) {
        if (previous === null || !previous[property].has(id)) {
          _this2.constructor._addToNewlyInversed(current, null, inversedRepository, id, inversedProperty, newlyUpdater);
        }
      });

      if (previous !== null) {
        previous[property].forEach(function (id) {
          if (!current[property].has(id)) {
            if (formerUpdater !== null) {
              formerUpdater(inversedRepository.get(id), current);
            }
            _this2.constructor._removeFromFormerInversed(current, inversedRepository, id, inversedProperty, orphanRemoval);
          }
        });
      }
    }
  }, {
    key: '_onLinkToManyOrToLinkPropertyChange',
    value: function _onLinkToManyOrToLinkPropertyChange(current, previous, property, inversedProperty, orphanRemoval, newlyUpdater) {
      var _this3 = this;

      var inversedRepository = this.em.getRepository(current[property].classOf);

      // Track creations
      current[property].forEach(function (_ref3) {
        var id = _ref3.id,
            position = _ref3.position;

        if (previous === null || !previous[property].has(id) || previous[property].getPositionOf(id) !== position) {
          _this3.constructor._addToNewlyInversed(current, position, inversedRepository, id, inversedProperty, newlyUpdater);
        }
      });

      if (previous !== null) {
        // Track deletions
        previous[property].forEach(function (_ref4) {
          var id = _ref4.id;

          if (!current[property].has(id)) {
            _this3.constructor._removeFromFormerInversed(current, inversedRepository, id, inversedProperty, orphanRemoval);
          }
        });
      }
    }
  }, {
    key: '_onOneToManyPropertyChange',
    value: function _onOneToManyPropertyChange(current, previous, property, inversedProperty, orphanRemoval, newlyUpdater) {
      var _this4 = this;

      var inversedRepository = this.em.getRepository(current[property].classOf);

      // Track creations
      current[property].forEach(function (id) {
        if (previous === null || !previous[property].has(id)) {
          _this4.constructor._setToNewlyInversed(current, inversedRepository, id, inversedProperty, newlyUpdater);
        }
      });

      if (previous !== null) {
        previous[property].forEach(function (id) {
          if (!current[property].has(id) && _this4.constructor._isAssociatedTo(current, inversedRepository.get(id), inversedProperty)) {
            _this4.constructor._unsetFromFormerInversed(current, inversedRepository, id, inversedProperty, orphanRemoval);
          }
        });
      }
    }
  }, {
    key: '_onManyToOnePropertyChange',
    value: function _onManyToOnePropertyChange(current, previous, property, inversedProperty, orphanRemoval, newlyUpdater) {
      var inversedRepository = this.em.getRepository(current[property].classOf);

      this.constructor._addToNewlyInversed(current, null, inversedRepository, current[property], inversedProperty, newlyUpdater);

      if (previous !== null) {
        this.constructor._removeFromFormerInversed(current, inversedRepository, previous[property], inversedProperty, orphanRemoval);
      }
    }
  }, {
    key: '_onOneToOnePropertyChange',
    value: function _onOneToOnePropertyChange(current, previous, property, inversedProperty, orphanRemoval, newlyUpdater) {
      var inversedRepository = this.em.getRepository(current[property].classOf);

      if (inversedProperty) {
        this.constructor._setToNewlyInversed(current, inversedRepository, current[property], inversedProperty, newlyUpdater);
      }

      if (previous !== null) {
        this.constructor._unsetFromFormerInversed(current, inversedRepository, previous[property], inversedProperty, orphanRemoval);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      throw new TypeError('You need to implement static getEntityClass in AbstractListener inheritance');
    }
  }, {
    key: '_isAssociatedTo',
    value: function _isAssociatedTo(entity, base, property) {
      if (property === null || base === null) {
        // If no inversedProperty, then we assume it's an unidirectional association
        return Boolean(base);
      }

      if (base[property] instanceof Reference && base[property].is(entity)) {
        return base[property].is(entity);
      } else if (base[property] instanceof Collection || base[property] instanceof OrderedCollection) {
        return base[property].has(entity);
      }

      return false;
    }
  }, {
    key: '_isPropertyChanged',
    value: function _isPropertyChanged(property, current, previous, changes) {
      if (!current.constructor.keys.includes(property)) {
        return false;
      }

      if (previous === null) {
        return true;
      }

      return changes.indexOf(property) !== -1;
    }
  }, {
    key: '_addToNewlyInversed',
    value: function _addToNewlyInversed(current, position, inversedRepository, newlyId, inversedProperty, newlyUpdater) {
      if (!inversedProperty && !newlyUpdater) {
        return;
      }

      var newly = inversedRepository.get(newlyId);

      if (newly === null) {
        return;
      }

      var copy = newly.clone();

      if (inversedProperty) {
        copy[inversedProperty].add(current, position);
      }

      if (newlyUpdater) {
        newlyUpdater(copy);
      }

      inversedRepository._persist(copy, true);
    }
  }, {
    key: '_removeFromFormerInversed',
    value: function _removeFromFormerInversed(current, inversedRepository, formerId, inversedProperty, orphanRemoval) {
      if (!inversedProperty) {
        return;
      }

      var former = inversedRepository.get(formerId);

      if (former === null) {
        return;
      }

      if (!this._isAssociatedTo(current, former, inversedProperty)) {
        return;
      }

      var copy = former.clone();
      copy[inversedProperty].remove(current);

      if (orphanRemoval && copy[inversedProperty].size === 0) {
        inversedRepository._remove(copy, true);

        return;
      }

      inversedRepository._persist(copy, true);
    }
  }, {
    key: '_setToNewlyInversed',
    value: function _setToNewlyInversed(current, inversedRepository, newlyId, inversedProperty, newlyUpdater) {
      if (!inversedProperty && !newlyUpdater) {
        return;
      }

      var newly = inversedRepository.get(newlyId);

      if (newly === null) {
        return;
      }

      var copy = newly.clone();
      if (inversedProperty) {
        copy[inversedProperty] = current;
      }

      if (newlyUpdater) {
        newlyUpdater(copy);
      }

      inversedRepository._persist(copy, true);
    }
  }, {
    key: '_unsetFromFormerInversed',
    value: function _unsetFromFormerInversed(current, inversedRepository, formerId, inversedProperty, orphanRemoval) {
      if (!inversedProperty && !orphanRemoval) {
        return;
      }

      var former = inversedRepository.get(formerId);

      if (former === null) {
        return;
      }

      if (!this._isAssociatedTo(current, former, inversedProperty)) {
        return;
      }

      var copy = former.clone();

      if (orphanRemoval) {
        inversedRepository._remove(copy, true);

        return;
      }

      copy[inversedProperty] = null;

      inversedRepository._persist(copy, true);
    }
  }]);
  return AbstractListener;
}();

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var CustomObjectListener = function (_AbstractListener) {
  inherits(CustomObjectListener, _AbstractListener);

  function CustomObjectListener() {
    classCallCheck(this, CustomObjectListener);
    return possibleConstructorReturn(this, (CustomObjectListener.__proto__ || Object.getPrototypeOf(CustomObjectListener)).apply(this, arguments));
  }

  createClass(CustomObjectListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the associated <strong>place</strong> <br>
     * &nbsp;&nbsp;- Add to the associated <strong>poi</strong> <br>
     * &nbsp;&nbsp;- Update context to <strong>FILE_CONTEXTS.PICTO</strong> of the associated <strong>file</strong> (if it's a {@link Picto})<br>
     *
     * @public
     * @listens CustomObjectRepository#CREATE
     * @param {CustomObjectRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>place</strong> <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>poi</strong> <br>
     * &nbsp;&nbsp;- Update context to <strong>FILE_CONTEXTS.PICTO</strong> of the newly associated <strong>file</strong> (if it's a {@link Picto})<br>
     * &nbsp;&nbsp;- Remove from the previous associated <strong>place</strong> <br>
     * &nbsp;&nbsp;- Remove from the previous associated <strong>poi</strong> <br>
     * &nbsp;&nbsp;- Remove the previous associated <strong>file</strong> (if it's a {@link Picto}) <br>
     *
     * @public
     * @listens CustomObjectRepository#UPDATE
     * @param {CustomObjectRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from the previous associated <strong>place</strong> <br>
     * &nbsp;&nbsp;- Remove from the previous associated <strong>poi</strong> <br>
     * &nbsp;&nbsp;- Remove the previous associated <strong>file</strong><br> (if it's a {@link Picto})
     *
     * @public
     * @listens CustomObjectRepository#REMOVE
     * @param {CustomObjectRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'place', 'custom_objects');
      this._removeFromInversed(previous, 'poi', 'custom_objects');
      if (previous instanceof Picto) {
        this._cascadeRemove(previous, 'file', null);
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('place', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'place', 'custom_objects');
      }

      if (this.constructor._isPropertyChanged('poi', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'poi', 'custom_objects');
      }

      if (this.constructor._isPropertyChanged('file', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'file', null, true, this.constructor._onNewFile);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return CustomObject;
    }
  }, {
    key: '_onNewFile',
    value: function _onNewFile(file) {
      // eslint-disable-next-line no-param-reassign
      file.context = FILE_CONTEXTS.PICTO;
    }
  }]);
  return CustomObjectListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var DeviceListener = function (_AbstractListener) {
  inherits(DeviceListener, _AbstractListener);

  function DeviceListener() {
    classCallCheck(this, DeviceListener);
    return possibleConstructorReturn(this, (DeviceListener.__proto__ || Object.getPrototypeOf(DeviceListener)).apply(this, arguments));
  }

  createClass(DeviceListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens DeviceRepository#CREATE
     * @param {DeviceRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>site_calibration</strong> <br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens DeviceRepository#UPDATE
     * @param {DeviceRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens DeviceRepository#REMOVE
     * @param {DeviceRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._cascadeRemove(previous, 'site_calibration', 'device');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('site_calibration', current, previous, changes)) {
        this._onOneToOnePropertyChange(current, previous, 'site_calibration', 'device', true);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Device;
    }
  }]);
  return DeviceListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var MapFileListener = function (_AbstractListener) {
  inherits(MapFileListener, _AbstractListener);

  function MapFileListener() {
    classCallCheck(this, MapFileListener);
    return possibleConstructorReturn(this, (MapFileListener.__proto__ || Object.getPrototypeOf(MapFileListener)).apply(this, arguments));
  }

  createClass(MapFileListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Update the associated <strong>file</strong> context to FILE_CONTEXTS.MAP<br>
     *
     * @public
     * @listens MapFileRepository#CREATE
     * @param {MapFileRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Update the newly associated <strong>file</strong> context to FILE_CONTEXTS.MAP<br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>file</strong><br>
     *
     * @public
     * @listens MapFileRepository#UPDATE
     * @param {MapFileRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>file</strong><br>
     *
     * @public
     * @listens MapFileRepository#REMOVE
     * @param {MapFileRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._cascadeRemove(previous, 'file', null);
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('file', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'file', null, true, this.constructor._onNewFile);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return MapFile;
    }
  }, {
    key: '_onNewFile',
    value: function _onNewFile(logo) {
      if (logo !== null) {
        // eslint-disable-next-line no-param-reassign
        logo.context = 'map';
      }
    }
  }]);
  return MapFileListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var MediaListener = function (_AbstractListener) {
  inherits(MediaListener, _AbstractListener);

  function MediaListener() {
    classCallCheck(this, MediaListener);
    return possibleConstructorReturn(this, (MediaListener.__proto__ || Object.getPrototypeOf(MediaListener)).apply(this, arguments));
  }

  createClass(MediaListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Update the associated <strong>preview</strong> context to FILE_CONTEXTS.MEDIA_PREVIEW<br>
     * &nbsp;&nbsp;- Update the associated <strong>file</strong> context to FILE_CONTEXTS.MEDIA_FILE (in case of MediaImage, MediaVideo, MediaPdf or Movie)<br>
     *
     * @public
     * @listens MediaRepository#CREATE
     * @param {MediaRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Update the newly associated <strong>preview</strong> context to FILE_CONTEXTS.MEDIA_PREVIEW<br>
     * &nbsp;&nbsp;- Update the newly associated <strong>file</strong> context to FILE_CONTEXTS.MEDIA_FILE (in case of MediaImage, MediaVideo, MediaPdf or Movie)<br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>preview</strong><br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>file</strong> (in case of MediaImage, MediaVideo, MediaPdf or Movie)<br>
     *
     * @public
     * @listens MediaRepository#UPDATE
     * @param {MediaRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>preview</strong><br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>file</strong> (in case of MediaImage, MediaVideo, MediaPdf or Movie)<br>
     *
     * @public
     * @listens MediaRepository#REMOVE
     * @param {MediaRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'tags', 'medias');
      this._removeFromInversed(previous, 'playlists', 'medias');
      this._removeFromInversed(previous, 'pois', 'medias');

      if (previous instanceof MediaImage || previous instanceof MediaVideo || previous instanceof MediaPdf || previous instanceof Movie) {
        this._cascadeRemove(previous, 'file', null);
      }
      this._cascadeRemove(previous, 'preview', null);
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('tags', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'tags', 'medias');
      }

      if (this.constructor._isPropertyChanged('playlists', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'playlists', 'medias');
      }

      if (this.constructor._isPropertyChanged('pois', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'pois', 'medias');
      }

      if (this.constructor._isPropertyChanged('preview', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'preview', null, true, this.constructor._onNewPreview);
      }

      if (this.constructor._isPropertyChanged('file', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'file', null, true, this.constructor._onNewFile);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Media;
    }
  }, {
    key: '_onNewPreview',
    value: function _onNewPreview(preview) {
      // eslint-disable-next-line no-param-reassign
      preview.context = 'media_preview';
    }
  }, {
    key: '_onNewFile',
    value: function _onNewFile(file) {
      // eslint-disable-next-line no-param-reassign
      file.context = 'media_file';
    }
  }]);
  return MediaListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @class PoiListener
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var PoiListenerBase = function (_AbstractListener) {
  inherits(PoiListenerBase, _AbstractListener);

  function PoiListenerBase() {
    classCallCheck(this, PoiListenerBase);
    return possibleConstructorReturn(this, (PoiListenerBase.__proto__ || Object.getPrototypeOf(PoiListenerBase)).apply(this, arguments));
  }

  createClass(PoiListenerBase, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>parents</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>children</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>places</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;- For each associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Label}, it's {@link Label#label} attribute will take the {@link Poi#name} value.<br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Picto} and the {@link Poi#logos} is not empty, it's {@link Picto#file} attribute will take the first {@link Poi#logos} value.<br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Picto} and the {@link Poi#logos} is empty, the associated {@link Picto} will be removed.<br>
     *
     * @public
     * @listens PoiRepository#CREATE
     * @param {PoiRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>parents</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>children</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>places</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>places</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;- For each newly associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Label}, it's {@link Label#label} attribute will take the {@link Poi#name} value.<br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Picto} and the {@link Poi#logos} is not empty, it's {@link Picto#file} attribute will take the first {@link Poi#logos} value.<br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If it's a {@link Picto} and the {@link Poi#logos} is empty, the associated {@link Picto} will be removed.<br>
     * &nbsp;&nbsp;- For each removed <strong>place</strong><br>
     * &nbsp;&nbsp;&nbsp;&nbsp;- If the poi it's associated to a custom_object on that place, the custom_object will be removed.<br>
     *
     * @public
     * @listens PoiRepository#UPDATE
     * @param {PoiRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>places</strong><br>
     * &nbsp;&nbsp;- Remove previously associated <strong>custom_objects</strong><br>
     *
     * @public
     * @listens PoiRepository#REMOVE
     * @param {PoiRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'parents', 'children');
      this._removeFromInversed(previous, 'children', 'parents');
      this._removeFromInversed(previous, 'categories', 'pois');
      this._removeFromInversed(previous, 'tags', 'pois');
      this._removeFromInversed(previous, 'medias', 'pois');
      this._removeFromInversed(previous, 'places', 'pois');
      this._cascadeRemove(previous, 'custom_objects', 'poi');
      if (previous instanceof Product) {
        this._removeFromInversed(previous, 'values', 'products');
      }
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('name', current, previous, changes)) {
        this._onNameUpdated(current);
      }

      if (this.constructor._isPropertyChanged('parents', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'parents', 'children');
      }

      if (this.constructor._isPropertyChanged('children', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'children', 'parents');
      }

      if (this.constructor._isPropertyChanged('categories', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'categories', 'pois');
      }

      if (this.constructor._isPropertyChanged('tags', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'tags', 'pois');
      }

      if (this.constructor._isPropertyChanged('medias', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'medias', 'pois');
      }

      if (this.constructor._isPropertyChanged('places', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'places', 'pois', false, null, this._onPlaceRemoved.bind(this));
      }

      if (this.constructor._isPropertyChanged('custom_objects', current, previous, changes)) {
        this._onOneToManyPropertyChange(current, previous, 'custom_objects', 'poi', false, this._onNewCustomObject.bind(this));
      }

      if (this.constructor._isPropertyChanged('logos', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'logos', null, true, this.constructor._onNewLogo);

        this.constructor._onLogoUpdated(current, this.em);
      }

      if (this.constructor._isPropertyChanged('pictures', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'pictures', null, true, this.constructor._onNewPicture);
      }

      if (this.constructor._isPropertyChanged('values', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'values', 'products');
      }
    }
  }, {
    key: '_onNameUpdated',
    value: function _onNameUpdated(poi) {
      var _this2 = this;

      var repo = this.em.getRepository(poi.custom_objects.classOf);
      var customObjects = repo.getList(poi.custom_objects);

      customObjects.forEach(function (customObject) {
        if (customObject instanceof Label) {
          _this2._updateLabelNameFromPoi(customObject, poi);
        }
      });
    }
  }, {
    key: '_onPlaceRemoved',
    value: function _onPlaceRemoved(place, current) {
      var customObjectRepository = this.em.getRepository(current.custom_objects.classOf);
      var customObjects = customObjectRepository.getList(current.custom_objects);

      customObjects.forEach(function (customObject) {
        if (customObject !== null && customObject.place.is(place)) {
          customObjectRepository._remove(customObject, true);
        }
      });
    }
  }, {
    key: '_onNewCustomObject',
    value: function _onNewCustomObject(customObject) {
      var poi = this.em.getRepository('Poi').get(customObject.poi);

      if (customObject instanceof Label) {
        this._updateLabelNameFromPoi(customObject, poi);
      }

      if (customObject instanceof Picto) {
        var logo = this.constructor._getFirstPoiLogo(poi, this.em);
        this.constructor._updatePictoFileFromPoiLogo(customObject, logo, this.em);
      }
    }
  }, {
    key: '_updateLabelNameFromPoi',
    value: function _updateLabelNameFromPoi(label, poi) {
      if (label.label === poi.name) {
        return;
      }

      var copy = label.clone();
      copy.label = poi.name;

      this.em.getRepository('CustomObject')._persist(copy, true);
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Poi;
    }
  }, {
    key: '_onNewLogo',
    value: function _onNewLogo(logo) {
      // eslint-disable-next-line no-param-reassign
      logo.context = 'poi';
    }
  }, {
    key: '_onNewPicture',
    value: function _onNewPicture(picture) {
      // eslint-disable-next-line no-param-reassign
      picture.context = 'poi';
    }
  }, {
    key: '_onLogoUpdated',
    value: function _onLogoUpdated(poi, em) {
      var _this3 = this;

      var customObjects = em.getRepository(poi.custom_objects.classOf).getList(poi.custom_objects);

      var logo = this._getFirstPoiLogo(poi, em);
      customObjects.forEach(function (customObject) {
        if (customObject instanceof Picto) {
          _this3._updatePictoFileFromPoiLogo(customObject, logo, em);
        }
      });
    }
  }, {
    key: '_isFirstLogo',
    value: function _isFirstLogo(poi, logo) {
      return poi.logos.size > 0 && poi.logos.values[0].id === logo.id;
    }
  }, {
    key: '_getFirstPoiLogo',
    value: function _getFirstPoiLogo(poi, em) {
      var logos = em.getRepository(poi.logos.classOf).getList(poi.logos);

      return logos.length === 0 ? null : logos[0];
    }
  }, {
    key: '_updatePictoFileFromPoiLogo',
    value: function _updatePictoFileFromPoiLogo(picto, logo, em) {
      if (logo === null) {
        em.getRepository('CustomObject')._remove(picto, true);
        return false;
      }

      if (logo.content_hash === null) {
        em.logger.debug('PoiListener#_updatePictoFileFromPoiLogo: logo content hash is not computed, skipping');
        return false;
      }

      return picto.original_md5 !== logo.content_hash;
    }
  }]);
  return PoiListenerBase;
}(AbstractListener);

var PoiListener = function (_PoiListenerBase) {
  inherits(PoiListener, _PoiListenerBase);

  function PoiListener() {
    classCallCheck(this, PoiListener);
    return possibleConstructorReturn(this, (PoiListener.__proto__ || Object.getPrototypeOf(PoiListener)).apply(this, arguments));
  }

  createClass(PoiListener, null, [{
    key: '_updatePictoFileFromPoiLogo',
    value: function _updatePictoFileFromPoiLogo(picto, logo, em) {
      // Do we need to generate a POW picto file ?
      if (get(PoiListener.__proto__ || Object.getPrototypeOf(PoiListener), '_updatePictoFileFromPoiLogo', this).call(this, picto, logo, em)) {
        return;
      }

      em.logger.warn('PoiListener#_updatePictoFileFromPoiLogo: update picto file not supported on Node');
    }
  }]);
  return PoiListener;
}(PoiListenerBase);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var CategoryListener = function (_AbstractListener) {
  inherits(CategoryListener, _AbstractListener);

  function CategoryListener() {
    classCallCheck(this, CategoryListener);
    return possibleConstructorReturn(this, (CategoryListener.__proto__ || Object.getPrototypeOf(CategoryListener)).apply(this, arguments));
  }

  createClass(CategoryListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>pois</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>tags</strong> <br>
     * &nbsp;&nbsp;- Update context to <strong>FILE_CONTEXTS.CATEGORY</strong> of the associated <strong>logo</strong><br>
     *
     * @public
     * @listens CategoryRepository#CREATE
     * @param {CategoryRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong> <br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>logo</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>pois</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>tags</strong> <br>
     * &nbsp;&nbsp;- Update context to <strong>FILE_CONTEXTS.CATEGORY</strong> of the newly associated <strong>logo</strong><br>
     *
     * @public
     * @listens CategoryRepository#UPDATE
     * @param {CategoryRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong> <br>
     * &nbsp;&nbsp;- Remove the previously associated <strong>logo</strong> <br>
     *
     * @public
     * @listens CategoryRepository#REMOVE
     * @param {CategoryRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'parents', 'children');
      this._removeFromInversed(previous, 'children', 'parents');
      this._removeFromInversed(previous, 'pois', 'categories');
      this._removeFromInversed(previous, 'tags', 'categories');
      this._cascadeRemove(previous, 'logo', null);
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('parents', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'parents', 'children');
      }

      if (this.constructor._isPropertyChanged('children', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'children', 'parents');
      }

      if (this.constructor._isPropertyChanged('pois', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'pois', 'categories');
      }

      if (this.constructor._isPropertyChanged('tags', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'tags', 'categories');
      }

      if (this.constructor._isPropertyChanged('logo', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'logo', null, true, this.constructor._onNewLogo);
      }
    }
  }], [{
    key: 'getEntityClass',

    /**
     * @package
     * @return {Category}
     */
    value: function getEntityClass() {
      return Category;
    }
  }, {
    key: '_onNewLogo',
    value: function _onNewLogo(logo) {
      if (logo !== null) {
        // eslint-disable-next-line no-param-reassign
        logo.context = FILE_CONTEXTS.CATEGORY;
      }
    }
  }]);
  return CategoryListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var FeatureListener = function (_AbstractListener) {
  inherits(FeatureListener, _AbstractListener);

  function FeatureListener() {
    classCallCheck(this, FeatureListener);
    return possibleConstructorReturn(this, (FeatureListener.__proto__ || Object.getPrototypeOf(FeatureListener)).apply(this, arguments));
  }

  createClass(FeatureListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>values</strong> <br>
     *
     * @public
     * @listens FeatureRepository#CREATE
     * @param {FeatureRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>values</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>values</strong> <br>
     *
     * @public
     * @listens FeatureRepository#UPDATE
     * @param {FeatureRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>parents</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>children</strong> <br>
     * &nbsp;&nbsp;- Remove previously associated <strong>values</strong> <br>
     *
     * @public
     * @listens FeatureRepository#REMOVE
     * @param {FeatureRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'parents', 'children');
      this._removeFromInversed(previous, 'children', 'parents');
      this._cascadeRemove(previous, 'values', 'feature');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('parents', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'parents', 'children');
      }

      if (this.constructor._isPropertyChanged('children', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'children', 'parents');
      }

      if (this.constructor._isPropertyChanged('values', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'values', 'feature', true);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Feature;
    }
  }]);
  return FeatureListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var FeatureValueListener = function (_AbstractListener) {
  inherits(FeatureValueListener, _AbstractListener);

  function FeatureValueListener() {
    classCallCheck(this, FeatureValueListener);
    return possibleConstructorReturn(this, (FeatureValueListener.__proto__ || Object.getPrototypeOf(FeatureValueListener)).apply(this, arguments));
  }

  createClass(FeatureValueListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the associated <strong>feature</strong> <br>
     * &nbsp;&nbsp;- Add to associated <strong>products</strong> <br>
     *
     * @public
     * @listens FeatureValueRepository#CREATE
     * @param {FeatureValueRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>feature</strong> <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>products</strong> <br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>feature</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>products</strong> <br>
     *
     * @public
     * @listens FeatureValueRepository#UPDATE
     * @param {FeatureValueRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>feature</strong> <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>products</strong> <br>
     *
     * @public
     * @listens FeatureValueRepository#REMOVE
     * @param {FeatureValueRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'products', 'values');
      this._removeFromInversed(previous, 'feature', 'values');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('feature', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'feature', 'values');
      }

      if (this.constructor._isPropertyChanged('products', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'products', 'values');
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return FeatureValue;
    }
  }]);
  return FeatureValueListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @class FileListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var FileListenerBase = function (_AbstractListener) {
  inherits(FileListenerBase, _AbstractListener);

  function FileListenerBase() {
    classCallCheck(this, FileListenerBase);
    return possibleConstructorReturn(this, (FileListenerBase.__proto__ || Object.getPrototypeOf(FileListenerBase)).apply(this, arguments));
  }

  createClass(FileListenerBase, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Do nothing for now
     *
     * @public
     * @listens FileRepository#CREATE
     * @param {FileRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Do nothing for now
     *
     * @public
     * @listens FileRepository#UPDATE
     * @param {FileRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Do nothing for now
     *
     * @public
     * @listens FileRepository#REMOVE
     * @param {FileRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {// eslint-disable-line no-unused-vars

    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('uri', current, previous, changes)) {
        this._onUriUpdated(current);
      }
      if (this.constructor._isPropertyChanged('context', current, previous, changes)) {
        this._onContextUpdated(current);
      }
      if (this.constructor._isPropertyChanged('content_hash', current, previous, changes)) {
        this._onContentHashUpdated(current);
      }
    }
  }, {
    key: '_onUriUpdated',
    value: function _onUriUpdated(file) {
      if (file.context === FILE_CONTEXTS.PICTO) {
        this.em.logger.debug('FileListener#_onUriUpdated: make picto file pow2');
        this._makePictoFilePow2(file);
      }

      this.em.logger.debug('FileListener#_onUriUpdated: force update content hash');
      this._updateContentHash(file, true);
    }
  }, {
    key: '_onContentHashUpdated',
    value: function _onContentHashUpdated(file) {
      if (file.context === FILE_CONTEXTS.POI) {
        var poi = this.constructor._getPoiFromFile(file, this.em);
        if (poi !== null && PoiListener._getFirstPoiLogo(poi, this.em) === file) {
          this.em.logger.debug('FileListener#_onContentHashUpdated: update associated picto');
          PoiListener._onLogoUpdated(poi, this.em);
        }
      }
    }
  }, {
    key: '_onContextUpdated',
    value: function _onContextUpdated(file) {
      if (file.context === FILE_CONTEXTS.PICTO) {
        this.em.logger.debug('FileListener#_onContextUpdated: make picto pow2');
        this._makePictoFilePow2(file);
      }
    }
  }, {
    key: '_updateContentHash',
    value: function _updateContentHash(file) {
      var _this2 = this;

      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (file.content_hash === null || force) {
        var promise = Request.getUriContentHash(file.uri).then(function (contentHash) {
          var fileRepository = _this2.em.getRepository('File');
          var currentFile = fileRepository.get(file);
          if (currentFile === null || currentFile.uri !== file.uri) {
            _this2.em.logger.debug('FileListener#_updateContentHash: File has been removed or binary has been updated while computing ==> Skip');
            return;
          }

          var clone = currentFile.clone();
          clone.content_hash = contentHash;

          fileRepository._persist(clone, true);
        }).catch(function (err) {
          throw err;
        });

        this.em._waitFor(promise);
      }
    }
  }, {
    key: '_makePictoFilePow2',
    value: function _makePictoFilePow2(file) {
      // eslint-disable-line no-unused-vars
      this.em.logger.warn('Cannot make an image Pow2 yet');
      return Promise.resolve(false);
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return File;
    }
  }, {
    key: '_getPictoFromFile',
    value: function _getPictoFromFile(_file, em) {
      var pictos = em.getRepository('CustomObject').findBy({
        type: CUSTOM_OBJECT_TYPES.PICTO,
        file: function file(value) {
          return value.is(_file);
        }
      });

      return pictos.length === 0 ? null : pictos[0];
    }
  }, {
    key: '_getPoiFromFile',
    value: function _getPoiFromFile(file, em) {
      var pois = em.getRepository('Poi').findBy({
        logos: function logos(value) {
          return value.has(file);
        }
      });

      return pois.length === 0 ? null : pois[0];
    }
  }]);
  return FileListenerBase;
}(AbstractListener);

var FileListener = function (_FileListenerBase) {
  inherits(FileListener, _FileListenerBase);

  function FileListener() {
    classCallCheck(this, FileListener);
    return possibleConstructorReturn(this, (FileListener.__proto__ || Object.getPrototypeOf(FileListener)).apply(this, arguments));
  }

  return FileListener;
}(FileListenerBase);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var FloorCalibrationListener = function (_AbstractListener) {
  inherits(FloorCalibrationListener, _AbstractListener);

  function FloorCalibrationListener() {
    classCallCheck(this, FloorCalibrationListener);
    return possibleConstructorReturn(this, (FloorCalibrationListener.__proto__ || Object.getPrototypeOf(FloorCalibrationListener)).apply(this, arguments));
  }

  createClass(FloorCalibrationListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens FloorCalibrationRepository#CREATE
     * @param {FloorCalibrationRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>site_calibration</strong> <br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens FloorCalibrationRepository#UPDATE
     * @param {FloorCalibrationRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>site_calibration</strong> <br>
     *
     * @public
     * @listens FloorCalibrationRepository#REMOVE
     * @param {FloorCalibrationRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'site_calibration', 'floor_calibrations');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('site_calibration', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'site_calibration', 'floor_calibrations');
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return FloorCalibration;
    }
  }]);
  return FloorCalibrationListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var PlaceListener = function (_AbstractListener) {
  inherits(PlaceListener, _AbstractListener);

  function PlaceListener() {
    classCallCheck(this, PlaceListener);
    return possibleConstructorReturn(this, (PlaceListener.__proto__ || Object.getPrototypeOf(PlaceListener)).apply(this, arguments));
  }

  createClass(PlaceListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>custom_objects</strong><br>
     *
     * @public
     * @listens PlaceRepository#CREATE
     * @param {PlaceRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>custom_objects</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove previously associated <strong>custom_objects</strong><br>
     *
     * @public
     * @listens PlaceRepository#UPDATE
     * @param {PlaceRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove previously associated <strong>custom_objects</strong><br>
     *
     * @public
     * @listens PlaceRepository#REMOVE
     * @param {PlaceRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'pois', 'places');
      this._cascadeRemove(previous, 'custom_objects', 'place');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('pois', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'pois', 'places');
      }

      if (this.constructor._isPropertyChanged('custom_objects', current, previous, changes)) {
        this._onOneToManyPropertyChange(current, previous, 'custom_objects', 'place', true);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Place;
    }
  }]);
  return PlaceListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var PlaylistListener = function (_AbstractListener) {
  inherits(PlaylistListener, _AbstractListener);

  function PlaylistListener() {
    classCallCheck(this, PlaylistListener);
    return possibleConstructorReturn(this, (PlaylistListener.__proto__ || Object.getPrototypeOf(PlaylistListener)).apply(this, arguments));
  }

  createClass(PlaylistListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>tags</strong><br>
     *
     * @public
     * @listens PlaylistRepository#CREATE
     * @param {PlaylistRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>tags</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     *
     * @public
     * @listens PlaylistRepository#UPDATE
     * @param {PlaylistRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>tags</strong><br>
     *
     * @public
     * @listens PlaylistRepository#REMOVE
     * @param {PlaylistRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'medias', 'playlists');
      this._removeFromInversed(previous, 'tags', 'playlists');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('medias', current, previous, changes)) {
        this._onLinkToManyOrToLinkPropertyChange(current, previous, 'medias', 'playlists');
      }

      if (this.constructor._isPropertyChanged('tags', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'tags', 'playlists');
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Playlist;
    }
  }]);
  return PlaylistListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var SiteCalibrationListener = function (_AbstractListener) {
  inherits(SiteCalibrationListener, _AbstractListener);

  function SiteCalibrationListener() {
    classCallCheck(this, SiteCalibrationListener);
    return possibleConstructorReturn(this, (SiteCalibrationListener.__proto__ || Object.getPrototypeOf(SiteCalibrationListener)).apply(this, arguments));
  }

  createClass(SiteCalibrationListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the associated <strong>device</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>floor_calibrations</strong><br>
     *
     * @public
     * @listens SiteCalibrationRepository#CREATE
     * @param {SiteCalibrationRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to the newly associated <strong>device</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>floor_calibrations</strong><br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>device</strong><br>
     * &nbsp;&nbsp;- Remove previously associated <strong>floor_calibrations</strong><br>
     *
     * @public
     * @listens SiteCalibrationRepository#UPDATE
     * @param {SiteCalibrationRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from the previously associated <strong>device</strong><br>
     * &nbsp;&nbsp;- Remove previously associated <strong>floor_calibrations</strong><br>
     *
     * @public
     * @listens SiteCalibrationRepository#REMOVE
     * @param {SiteCalibrationRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._unsetFromInversed(previous, 'device', 'site_calibration');
      this._cascadeRemove(previous, 'floor_calibrations', 'site_calibration');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('floor_calibrations', current, previous, changes)) {
        this._onOneToManyPropertyChange(current, previous, 'floor_calibrations', 'site_calibration', true);
      }

      if (this.constructor._isPropertyChanged('device', current, previous, changes)) {
        this._onOneToOnePropertyChange(current, previous, 'device', 'site_calibration');
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return SiteCalibration;
    }
  }]);
  return SiteCalibrationListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var SiteListener = function (_AbstractListener) {
  inherits(SiteListener, _AbstractListener);

  function SiteListener() {
    classCallCheck(this, SiteListener);
    return possibleConstructorReturn(this, (SiteListener.__proto__ || Object.getPrototypeOf(SiteListener)).apply(this, arguments));
  }

  createClass(SiteListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Update the associated <strong>logo</strong>'s context to FILE_CONTEXTS.SITE<br>
     *
     * @public
     * @listens SiteRepository#CREATE
     * @param {SiteRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Update the newly associated <strong>logo</strong>'s context to FILE_CONTEXTS.SITE<br>
     * &nbsp;&nbsp;- Remove previously associated <strong>logo</strong><br>
     *
     * @public
     * @listens SiteRepository#UPDATE
     * @param {SiteRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      throw new TypeError('You cannot remove the Site !');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('logo', current, previous, changes)) {
        this._onManyToOnePropertyChange(current, previous, 'logo', null, true, this.constructor._onNewLogo);
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Site;
    }
  }, {
    key: '_onNewLogo',
    value: function _onNewLogo(logo) {
      if (logo !== null) {
        // eslint-disable-next-line no-param-reassign
        logo.context = 'site';
      }
    }
  }]);
  return SiteListener;
}(AbstractListener);

/**
 * @extends AbstractListener
 * @public
 * @hideconstructor
 *
 * @docNameSpace Listeners
 */

var TagListener = function (_AbstractListener) {
  inherits(TagListener, _AbstractListener);

  function TagListener() {
    classCallCheck(this, TagListener);
    return possibleConstructorReturn(this, (TagListener.__proto__ || Object.getPrototypeOf(TagListener)).apply(this, arguments));
  }

  createClass(TagListener, [{
    key: 'onCreate',


    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Add to associated <strong>medias</strong><br>
     *
     * @public
     * @listens TagRepository#CREATE
     * @param {TagRepository#CREATE} current Arguments passed by the event
     * @returns void
     */
    value: function onCreate(current) {
      this._onChange(current, null);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Add to newly associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Add to newly associated <strong>medias</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     *
     * @public
     * @listens TagRepository#UPDATE
     * @param {TagRepository#UPDATE} data Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data) {
      this._onChange(data.current, data.previous, data.changes);
    }

    /**
     * Keep associations up to date: <br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>categories</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>pois</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>playlists</strong><br>
     * &nbsp;&nbsp;- Remove from previously associated <strong>medias</strong><br>
     *
     * @public
     * @listens TagRepository#REMOVE
     * @param {TagRepository#REMOVE} previous Arguments passed by the event
     * @returns void
     */

  }, {
    key: 'onRemove',
    value: function onRemove(previous) {
      this._removeFromInversed(previous, 'categories', 'tags');
      this._removeFromInversed(previous, 'pois', 'tags');
      this._removeFromInversed(previous, 'playlists', 'tags');
      this._removeFromInversed(previous, 'medias', 'tags');
    }
  }, {
    key: '_onChange',
    value: function _onChange(current, previous, changes) {
      if (this.constructor._isPropertyChanged('pois', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'pois', 'tags');
      }
      if (this.constructor._isPropertyChanged('categories', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'categories', 'tags');
      }
      if (this.constructor._isPropertyChanged('medias', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'medias', 'tags');
      }
      if (this.constructor._isPropertyChanged('playlists', current, previous, changes)) {
        this._onManyToManyOrToLinkPropertyChange(current, previous, 'playlists', 'tags');
      }
    }
  }], [{
    key: 'getEntityClass',
    value: function getEntityClass() {
      return Tag;
    }
  }]);
  return TagListener;
}(AbstractListener);

/**
 * @package
 */

var UnitOfWork = function () {
  /**
   * @package
   * @param {EntityManager} em
   */
  function UnitOfWork(em) {
    classCallCheck(this, UnitOfWork);

    this.em = em;
    this.em.logger.debug('UnitOfWork: instantiate');
    this._reset();
  }

  /**
   * @package
   * @return {Promise}
   */


  createClass(UnitOfWork, [{
    key: 'flush',
    value: function flush() {
      var _this = this;

      this.em.logger.debug('UnitOfWork: flush start');
      this._prepare();

      // Make a copy in order to let editing orginal set without side effect
      var commits = new Set(this.commits);
      var iterator = commits[Symbol.iterator]();

      return this._flushCommits(iterator).then(function () {
        return _this._finish();
      });
    }
  }, {
    key: '_reset',
    value: function _reset() {
      this.em.logger.debug('UnitOfWork: reset');
      this.commits = new Set();
      this._symbolToId = new Map();
      this._symbolToRepository = new Map();
    }
  }, {
    key: '_prepare',
    value: function _prepare() {
      this.em.logger.debug('UnitOfWork: prepare');
      this._mergeConsecutiveCommits();
    }
  }, {
    key: '_mergeConsecutiveCommits',
    value: function _mergeConsecutiveCommits() {
      var _this2 = this;

      this.em.logger.debug('UnitOfWork: merge commits');
      var optimized = new Set();
      var previous = null;

      this.commits.forEach(function (commit) {
        var merged = _this2.constructor._mergeTwoConsecutiveCommits(previous, commit);
        _this2.em.logger.debug('UnitOfWork: merge two consecutive commits', {
          previous: previous,
          commit: commit,
          merged: merged
        });

        switch (merged.length) {
          case 0:
            previous = null;
            break;
          case 1:
            var _merged = slicedToArray(merged, 1);

            previous = _merged[0];

            break;
          case 2:
            optimized.add(merged[0]);

            var _merged2 = slicedToArray(merged, 2);

            previous = _merged2[1];

            break;
          default:
            throw new Error('Unexpected');
        }
      });

      if (previous !== null) {
        optimized.add(previous);
      }

      this.commits = optimized;
    }
  }, {
    key: '_finish',
    value: function _finish() {
      var _this3 = this;

      this.em.logger.debug('UnitOfWork: finish');
      var retrievedIdentifiers = new Set();

      this._symbolToId.entries().forEach(function (_ref) {
        var _ref2 = slicedToArray(_ref, 2),
            symbol = _ref2[0],
            id = _ref2[1];

        var repository = _this3._symbolToRepository.get(symbol);
        retrievedIdentifiers.add({ id: id, symbol: symbol, repository: repository });
      });

      this._reset();

      return retrievedIdentifiers;
    }

    /**
     *
     * @param {Reference} reference
     * @private
     */

  }, {
    key: '_replaceFileReferenceSymbolToId',
    value: function _replaceFileReferenceSymbolToId(reference) {
      if (_typeof(reference.value) !== 'symbol') {
        return;
      }

      // eslint-disable-next-line no-param-reassign
      reference.value = this._symbolToId.get(reference.value);
    }

    /**
     *
     * @param {Collection} collection
     * @private
     */

  }, {
    key: '_replaceFileCollectionSymbolToId',
    value: function _replaceFileCollectionSymbolToId(collection) {
      var _this4 = this;

      collection.forEach(function (id) {
        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'symbol') {
          collection.add(_this4._symbolToId.get(id));
          collection.remove(id);
        }
      });
    }

    /**
     *
     * @param {OrderedCollection} collection
     * @private
     */

  }, {
    key: '_replaceFileOrderedCollectionSymbolToId',
    value: function _replaceFileOrderedCollectionSymbolToId(collection) {
      var _this5 = this;

      collection.forEach(function (_ref3) {
        var _ref4 = slicedToArray(_ref3, 2),
            id = _ref4[0],
            position = _ref4[1];

        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'symbol') {
          collection.add(_this5._symbolToId.get(id), position);
          collection.remove(id);
        }
      });
    }
  }, {
    key: '_flushCommits',
    value: function _flushCommits(iterator) {
      var _this6 = this;

      var _iterator$next = iterator.next(),
          value = _iterator$next.value,
          done = _iterator$next.done;

      if (done) {
        return Promise.resolve();
      }

      this.em.logger.info('UnitOfWork: ' + this.commits.size + ' request to send');
      this.em.logger.debug('UnitOfWork: flush commits start', { commit: value });

      return this._flushCommit(value).then(function () {
        _this6.em.logger.debug('UnitOfWork: flush commits next', { commit: value });

        // Success
        _this6.commits.delete(value);

        // Iterate recursively
        return _this6._flushCommits(iterator);
      });
    }
  }, {
    key: '_flushCommit',
    value: function _flushCommit(commit) {
      var _commit = slicedToArray(commit, 3),
          repository = _commit[0],
          event = _commit[1],
          data = _commit[2];

      switch (event) {
        case REPOSITORY_EVENTS.CREATE:
          return this._flushCreateCommit(repository, data);
        case REPOSITORY_EVENTS.UPDATE:
          return this._flushUpdateCommit(repository, data.current, data.changes);
        case REPOSITORY_EVENTS.REMOVE:
          return this._flushRemoveCommit(repository, data);
        default:
          return Promise.reject(new Error('UOW: Unhandled event ' + event));
      }
    }
  }, {
    key: '_flushCreateCommit',
    value: function _flushCreateCommit(repository, entity) {
      var _this7 = this;

      this._replaceAssociatedSymbolToId(entity);
      var request = repository._getCreateRequest(entity);

      return this.em._xhr(request, 200).then(function (response) {
        var data = response.data;


        _this7._symbolToId.set(entity.id, data.id);
        _this7._symbolToRepository.set(entity.id, repository);

        _this7.em.logger.debug('UnitOfWork: retrieved identifier', {
          symbol: entity.id,
          id: data.id
        });

        return data.id;
      });
    }
  }, {
    key: '_flushUpdateCommit',
    value: function _flushUpdateCommit(repository, current, changes) {
      this._replaceAssociatedSymbolToId(current);
      var request = repository._getUpdateRequest(current, changes);

      return this.em._xhr(request, 204);
    }
  }, {
    key: '_flushRemoveCommit',
    value: function _flushRemoveCommit(repository, entities) {
      var _this8 = this;

      entities.forEach(function (entity) {
        _this8._replaceAssociatedSymbolToId(entity);
      });

      var promises = [];
      var chunk = 50;

      var _loop = function _loop(i) {
        var batch = entities.slice(i, i + chunk);
        var request = repository._getRemoveRequest(batch);

        promises.push(_this8.em._xhr(request, 204).catch(function (response) {
          if (response instanceof Error) {
            return Promise.reject(response);
          }

          var json = response.data;
          if (!json.hasOwnProperty('errors')) {
            return Promise.reject(new Error('Server error'));
          }

          var errors = json.errors;


          if (response.status >= 500) {
            return Promise.reject(errors);
          }

          _this8.em.logger.warn('UnitOfWork: flush remove commit invalid data supplied', { json: json });

          var properties = Object.keys(errors);
          if (properties.length !== 1 || !properties.includes('id')) {
            return Promise.reject(errors);
          }

          var invalidIndexes = Object.keys(errors.id).map(function (index) {
            return parseInt(index.replace('#', ''), 10);
          });
          var newBatch = [];
          for (var j = 0; j < batch.length; j++) {
            if (!invalidIndexes.includes(j)) {
              newBatch.push(batch[j]);
            }
          }

          if (newBatch.length === 0) {
            return Promise.resolve();
          }

          return _this8._flushRemoveCommit(repository, newBatch);
        }));
      };

      for (var i = 0; i < entities.length; i += chunk) {
        _loop(i);
      }

      return Promise.all(promises);
    }
  }, {
    key: '_replaceAssociatedSymbolToId',
    value: function _replaceAssociatedSymbolToId(entity) {
      var _this9 = this;

      this.em.logger.debug('UnitOfWork: replace associated symbol to id', { entity: entity });

      if (_typeof(entity.id) === 'symbol' && this._symbolToId.has(entity.id)) {
        // eslint-disable-next-line no-param-reassign
        entity.id = this._symbolToId.get(entity.id);
        this.em.logger.debug('UnitOfWork: replace associated symbol to id (own id replaced)', { entity: entity });
      }
      entity.constructor.keys.forEach(function (key) {
        if (entity[key] instanceof Reference) {
          _this9._replaceReferenceAssociatedSymbol(key, entity);
        }

        if (entity[key] instanceof Collection) {
          _this9._replaceCollectionAssociatedSymbol(key, entity);
        }

        if (entity[key] instanceof OrderedCollection) {
          _this9._replaceOrderedCollectionAssociatedSymbol(key, entity);
        }
      });
    }
  }, {
    key: '_replaceReferenceAssociatedSymbol',
    value: function _replaceReferenceAssociatedSymbol(key, entity) {
      var id = entity[key].value;
      if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) !== 'symbol') {
        return;
      }

      if (!this._symbolToId.has(id)) {
        this.em.logger.error('UnitOfWork: replace associated symbol to id (reference id not found)', { key: key });
        throw new Error('Unable to find Symbol <--> Id matching');
      }

      this.em.logger.debug('UnitOfWork: replace associated symbol to id (reference id replaced)', { key: key });

      // eslint-disable-next-line no-param-reassign
      entity[key] = this._symbolToId.get(id);
    }
  }, {
    key: '_replaceCollectionAssociatedSymbol',
    value: function _replaceCollectionAssociatedSymbol(key, entity) {
      var _this10 = this;

      var values = [];

      entity[key].forEach(function (id) {
        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) !== 'symbol') {
          values.push(id);
        } else {
          if (!_this10._symbolToId.has(id)) {
            _this10.em.logger.error('UnitOfWork: replace associated symbol to id (collection item id not found)', { key: key });
            throw new Error('Unable to find Symbol <--> Id matching');
          }
          _this10.em.logger.debug('UnitOfWork: replace associated symbol to id (collection item id replaced)', { key: key });

          values.push(_this10._symbolToId.get(id));
        }
      });

      // eslint-disable-next-line no-param-reassign
      entity[key] = values;
    }
  }, {
    key: '_replaceOrderedCollectionAssociatedSymbol',
    value: function _replaceOrderedCollectionAssociatedSymbol(key, entity) {
      var _this11 = this;

      var values = [];
      entity[key].forEach(function (_ref5) {
        var id = _ref5.id,
            position = _ref5.position;

        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) !== 'symbol') {
          values.push({ id: id, position: position });
        } else {
          if (!_this11._symbolToId.has(id)) {
            _this11.em.logger.error('UnitOfWork: replace associated symbol to id (ordered collection item id not found)', { key: key });
            throw new Error('Unable to find Symbol <--> Id matching');
          }
          _this11.em.logger.debug('UnitOfWork: replace associated symbol to id (ordered collection item id replaced)', { key: key });

          values.push({ id: _this11._symbolToId.get(id), position: position });
        }
      });

      // eslint-disable-next-line no-param-reassign
      entity[key] = values;
    }
  }, {
    key: '_hasPendingChanges',
    get: function get$$1() {
      this._mergeConsecutiveCommits();

      return this.commits.size !== 0;
    }
  }], [{
    key: '_mergeTwoConsecutiveCommits',
    value: function _mergeTwoConsecutiveCommits(firstCommit, secondCommit) {
      if (firstCommit === null) {
        return [secondCommit];
      }

      var _firstCommit = slicedToArray(firstCommit, 3),
          firstRepository = _firstCommit[0],
          firstEvent = _firstCommit[1],
          firstData = _firstCommit[2];

      var _secondCommit = slicedToArray(secondCommit, 3),
          secondRepository = _secondCommit[0],
          secondEvent = _secondCommit[1],
          secondData = _secondCommit[2];

      if (firstRepository !== secondRepository) {
        return [firstCommit, secondCommit];
      }

      switch (firstEvent) {
        case REPOSITORY_EVENTS.UPDATE:
          if (secondEvent === REPOSITORY_EVENTS.UPDATE && firstData.current === secondData.previous) {
            var previous = firstData.previous;
            var current = secondData.current;

            var changes = firstRepository.constructor._compare(previous, current);

            if (changes.length === 0) {
              return [];
            }

            var merged = [firstRepository, REPOSITORY_EVENTS.UPDATE, { current: current, previous: previous, changes: changes }];

            return [merged];
          }
          break;
        case REPOSITORY_EVENTS.CREATE:
          if (secondEvent === REPOSITORY_EVENTS.REMOVE && secondData.includes(firstData)) {
            // We remove directly the newly created ==> No need to keep create nor remove
            return [];
          }

          if (secondEvent === REPOSITORY_EVENTS.UPDATE && firstData === secondData.previous) {
            var _merged3 = [firstRepository, REPOSITORY_EVENTS.CREATE, secondData.current];

            return [_merged3];
          }
          break;
        case REPOSITORY_EVENTS.REMOVE:
          if (secondEvent === REPOSITORY_EVENTS.REMOVE && firstRepository === secondRepository) {
            var _merged4 = [firstRepository, REPOSITORY_EVENTS.REMOVE, [].concat(toConsumableArray(firstData), toConsumableArray(secondData))];

            return [_merged4];
          }
          break;
        default:
          throw new Error('Unexpected');
      }

      return [firstCommit, secondCommit];
    }
  }]);
  return UnitOfWork;
}();

/**
 * @private
 * @property {AbstractRepository[]}
 */
var repositoryClasses = [SiteRepository, MapFileRepository, FileRepository, CategoryRepository, PoiRepository, FeatureRepository, FeatureValueRepository, PlaceRepository, CustomObjectRepository, PlaylistRepository, MediaRepository, DeviceRepository, SiteCalibrationRepository, FloorCalibrationRepository, TagRepository];
/**
 * @private
 * @property {AbstractListener[]}
 */
var listenerClasses = [SiteListener, MapFileListener, FileListener, CategoryListener, PoiListener, FeatureListener, FeatureValueListener, PlaceListener, CustomObjectListener, PlaylistListener, MediaListener, DeviceListener, SiteCalibrationListener, FloorCalibrationListener, TagListener];

/**
 * @public
 * @class AdsumClientApi.EntityManager
 */

var EntityManager = function () {
  createClass(EntityManager, null, [{
    key: 'generateNonce',

    /**
     * @package
     * @return {string}
     */
    value: function generateNonce() {
      var r = Date.now() * Math.random();

      return MD5(r.toString(), 1);
    }

    /**
     * @package
     * @return {string}
     */

  }, {
    key: 'now',
    value: function now() {
      return Math.round(Date.now() / 1000).toString();
    }

    /**
     * @public
     * @param {Options|object} options
     */

  }]);

  function EntityManager(options) {
    classCallCheck(this, EntityManager);

    /**
     * @package
     * @type {Options}
     */
    this.options = null;

    /**
     * @package
     * @type {AdactiveLogger.AbstractLogger}
     */
    this.logger = null;

    /**
     *
     * @type {Map<string, AbstractRepository>}
     * @private
     */
    this._repositories = new Map();

    /**
     * @type {Map<string, AbstractListener>}
     * @private
     */
    this._listeners = new Map();

    /**
     * @package
     * @type {string|null}
     */
    this.locale = null;

    /**
     *
     * @type {UnitOfWork}
     * @private
     */
    this._uow = null;

    /**
     * @package
     * @type {boolean}
     */
    this.locked = false;

    /**
     *
     * @type {Set<Promise>}
     * @private
     */
    this._waiting = new Set();

    this._init(new Options(options));
  }

  /**
   * @param {Options} options
   * @private
   */


  createClass(EntityManager, [{
    key: '_init',
    value: function _init(options) {
      options.validate();

      this.options = options;

      this.logger = this.options.logger;

      this.logger.info('EntityManager: instantiate', { options: options });

      this._uow = new UnitOfWork(this);

      for (var i = 0; i < repositoryClasses.length; i++) {
        this._repositories.set(repositoryClasses[i].getName(), new repositoryClasses[i](this));
      }

      for (var _i = 0; _i < listenerClasses.length; _i++) {
        this._listeners.set(listenerClasses[_i].getEntityClass().getName(), new listenerClasses[_i](this));
      }

      this.locale = this.options.locale;
    }

    /**
     *
     * @private
     */

  }, {
    key: '_lock',
    value: function _lock() {
      this.logger.info('EntityManager: locked');
      this.locked = true;
    }

    /**
     *
     * @private
     */

  }, {
    key: '_unlock',
    value: function _unlock() {
      this.logger.info('EntityManager: unlocked');
      this.locked = false;
    }

    /**
     * @public
     * @return {boolean}
     */

  }, {
    key: 'hasPendingChanges',
    value: function hasPendingChanges() {
      return this._uow._hasPendingChanges;
    }

    /**
     * @public
     * @return {boolean}
     */

  }, {
    key: 'isFullyLoaded',
    value: function isFullyLoaded() {
      var repositories = this.getRepositories();
      for (var i = 0; i < repositories.length; i++) {
        var repository = repositories[i];
        if (repository._status !== REPOSITORY_STATUSES.LOADED) {
          return false;
        }
      }

      return true;
    }

    /**
     * @public
     * @param {String} name
     * @return {AbstractRepository}
     */

  }, {
    key: 'getRepository',
    value: function getRepository(name) {
      return this._repositories.has(name) ? this._repositories.get(name) : null;
    }

    /**
     * @public
     * @return {string[]}
     */

  }, {
    key: 'getRepositoryNames',
    value: function getRepositoryNames() {
      return Array.from(this._repositories.keys());
    }

    /**
     * @public
     * @return {AbstractRepository[]}
     */

  }, {
    key: 'getRepositories',
    value: function getRepositories() {
      return Array.from(this._repositories.values());
    }

    /**
     * @public
     * @async
     *
     * @return {Promise<void,Error>}
     */

  }, {
    key: 'load',
    value: function load() {
      var _this = this;

      var fallbackOnCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      return new Promise(function (resolve, reject) {
        _this.logger.info('EntityManager: loading start');

        var promises = [];
        _this.getRepositories().forEach(function (repository) {
          promises.push(repository.load(fallbackOnCache));
        });

        Promise.all(promises).then(function () {
          _this.logger.info('EntityManager: loading success');

          resolve();
        }, function (error) {
          _this.logger.error('EntityManager: loading failed', { error: error });

          // eslint-disable-next-line prefer-promise-reject-errors
          reject(error);
        });
      });
    }

    /**
     * @public
     * @async
     *
     * @return {Promise<void,Error>}
     */

  }, {
    key: 'loadFromCache',
    value: function loadFromCache() {
      var _this2 = this;

      var allowOutdated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return new Promise(function (resolve, reject) {
        _this2.logger.info('EntityManager: loading start');

        var promises = [];
        _this2.getRepositories().forEach(function (repository) {
          promises.push(repository.loadFromCache(allowOutdated));
        });

        Promise.all(promises).then(function () {
          _this2.logger.info('EntityManager: loading success');

          resolve();
        }, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2.logger.error('EntityManager: loading failed', { error: args });

          // eslint-disable-next-line prefer-promise-reject-errors
          reject.apply(undefined, args);
        });
      });
    }

    /**
     * Flush pending changes
     *
     * @public
     * @async
     * @return {Promise<void, Error>}
     */

  }, {
    key: 'flush',
    value: function flush() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        if (_this3.options.state === STATES.PUBLISHED) {
          _this3.logger.warn('EntityManager: your are about to flush into PUBLISHED state');
        }

        _this3.logger.info('EntityManager: flush start');
        _this3._assertIsNotLocked();
        _this3._assertIsFullyLoaded();

        _this3.logger.info('EntityManager: waiting listeners to be completed before send data');
        _this3._wait().then(resolve, reject);
      }).then(function () {
        _this3._lock();

        return _this3._uow.flush();
      }).then(function (retrievedIdentifiers) {
        _this3._unlock();

        retrievedIdentifiers.forEach(function (retrieveIdentifier) {
          EventDispatcher.publish(retrieveIdentifier.repository, REPOSITORY_EVENTS.IDENTIFIER_WILL_CHANGE, [retrieveIdentifier.id, retrieveIdentifier.symbol]);
        });

        return _this3.pull().then(function () {
          retrievedIdentifiers.forEach(function (retrieveIdentifier) {
            EventDispatcher.publish(retrieveIdentifier.repository, REPOSITORY_EVENTS.IDENTIFIER_DID_CHANGE, [retrieveIdentifier.id, retrieveIdentifier.symbol]);
          });
        });
      }).catch(function (error) {
        _this3.logger.error('EntityManager: flush failed', { error: error });
        _this3._unlock();

        throw error;
      });
    }

    /**
     * Pull external changes, it will reload the EntityManager and publish events corresponding to modifications.
     * You must ensure the EntityManager has no pending changes before trying to synchronise.
     *
     * @public
     * @async
     * @return {Promise<void, Error>}
     */

  }, {
    key: 'pull',
    value: function pull() {
      var _this4 = this;

      this.logger.info('EntityManager: pull start');

      if (this.hasPendingChanges()) {
        this.logger.error('EntityManager: pull failed (pending changes).');
        throw new Error('You cannot pull while there is unsaved modifications');
      }

      this._lock();

      var promises = [];
      this.getRepositories().forEach(function (repository) {
        promises.push(repository._loadIntoNewStorage(false).then(function (storage) {
          var commits = repository._replaceStorage(storage);

          return [repository, commits];
        }));
      });

      return Promise.all(promises).then(function (results) {
        results.forEach(function (_ref) {
          var _ref2 = slicedToArray(_ref, 2),
              repository = _ref2[0],
              commits = _ref2[1];

          commits[REPOSITORY_EVENTS.REMOVE].forEach(function (data) {
            EventDispatcher.publish(repository, REPOSITORY_EVENTS.REMOVE, data);
          });
        });
        results.forEach(function (_ref3) {
          var _ref4 = slicedToArray(_ref3, 2),
              repository = _ref4[0],
              commits = _ref4[1];

          commits[REPOSITORY_EVENTS.CREATE].forEach(function (data) {
            EventDispatcher.publish(repository, REPOSITORY_EVENTS.CREATE, data);
          });
        });
        results.forEach(function (_ref5) {
          var _ref6 = slicedToArray(_ref5, 2),
              repository = _ref6[0],
              commits = _ref6[1];

          commits[REPOSITORY_EVENTS.UPDATE].forEach(function (data) {
            EventDispatcher.publish(repository, REPOSITORY_EVENTS.UPDATE, data);
          });
        });
      }).then(function () {
        _this4._unlock();
      }).catch(function (error) {
        _this4._unlock();

        return Promise.reject(error);
      });
    }

    /**
     * @package
     */

  }, {
    key: '_assertIsFullyLoaded',


    /**
     * @private
     * @throws TypeError
     */
    value: function _assertIsFullyLoaded() {
      if (!this.isFullyLoaded()) {
        this.logger.error('EntityManager: not fully failed.');
        throw new TypeError('You need to fully load EntityManager to use write features');
      }
    }

    /**
     * @private
     * @throws Error
     */

  }, {
    key: '_assertIsNotLocked',
    value: function _assertIsNotLocked() {
      if (this.locked) {
        this.logger.error('EntityManager: locked.');
        throw new Error('The EntityManager is locked, readonly operations are permitted');
      }
    }

    /**
     * @package
     * @param {Request} request
     * @param {int} expectedStatus
     * @return {Promise<Axios.Response, Error>}
     * @private
     */

  }, {
    key: '_xhr',
    value: function _xhr(request, expectedStatus) {
      var _this5 = this;

      request.addParameter('site', this.options.site);
      request.addHeaders(this.constructor.getHeaders(this.options.username, this.options.key, this.options.locale, this.options.state));
      request.validateStatus = function (status) {
        return status === expectedStatus;
      };

      return Request.sendRequest(request).then(function (response) {
        if (response.status !== expectedStatus) {
          var msg = 'Unexpected status while requesting API\n\n                Got ' + response.status + ' instead of ' + expectedStatus + ' on route ' + request.formattedUrl();

          _this5.logger.error(msg, { response: response, request: request, expectedStatus: expectedStatus });

          return Promise.reject(response);
        }

        return response;
      }).catch(function (error) {
        return _this5._onRequestError(error, request);
      });
    }

    /**
     *
     * @param {Error} error
     * @param {Request} request
     * @return {Promise<never, Error>}
     * @private
     */

  }, {
    key: '_onRequestError',
    value: function _onRequestError(error, request) {
      var _Request$formatApiErr = Request.formatApiError(error, request),
          message = _Request$formatApiErr.message,
          context = _Request$formatApiErr.context;

      this.logger.error(message, context);

      return Promise.reject(new Error(message));
    }

    /**
     *
     * @param {Promise} promise
     * @private
     */

  }, {
    key: '_waitFor',
    value: function _waitFor(promise) {
      this._waiting.add(promise.catch(function () {
        // Silent error
      }));
    }

    /**
     * @async
     * @return {Promise<void>}
     * @private
     */

  }, {
    key: '_wait',
    value: function _wait() {
      var _this6 = this;

      var list = this._waiting;
      this._waiting = new Set();

      if (list.size === 0) {
        return Promise.resolve();
      }

      return Promise.all(list).then(function () {
        return _this6._wait();
      });
    }

    /**
     * @async
     * @package
     * @return {Promise<void>}
     */

  }, {
    key: 'wait',
    value: function wait() {
      return this._wait();
    }
  }], [{
    key: 'getHeaders',
    value: function getHeaders(username, key) {
      var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      var headers = {
        Authorization: 'WSSE profile="UsernameToken"',
        'X-WSSE': this.getWsseHeader(username, key),
        'X-API-MODE': 'get'
      };

      if (state !== null) {
        headers['X-API-STATE'] = state;
      }

      if (locale !== null) {
        headers['X-API-LOCALE'] = locale;
      }

      return headers;
    }

    /**
     * @package
     * @return {string}
     */

  }, {
    key: 'getWsseHeader',
    value: function getWsseHeader(username, key) {
      var nounce = this.generateNonce();
      var timestamp = this.now();
      var digest = SHA1(nounce + timestamp + key, 1);

      return 'UsernameToken Username="' + username + '", PasswordDigest="' + digest + '", Nonce="' + nounce + '", Created="' + timestamp + '"';
    }
  }]);
  return EntityManager;
}();

var version = "2.1.0";

/**
 * @public
 * @readonly
 * @const {String}
 *
 * @alias AdsumClientApi.VERSION
 */
var VERSION = version;

/**
 * @alias AdsumClientApi.CacheOptions
 */

var CacheOptions = function (_AbstractOptions) {
  inherits(CacheOptions, _AbstractOptions);

  function CacheOptions() {
    classCallCheck(this, CacheOptions);
    return possibleConstructorReturn(this, (CacheOptions.__proto__ || Object.getPrototypeOf(CacheOptions)).apply(this, arguments));
  }

  createClass(CacheOptions, [{
    key: 'reset',

    /**
     * @protected
     */
    value: function reset() {
      get(CacheOptions.prototype.__proto__ || Object.getPrototypeOf(CacheOptions.prototype), 'reset', this).call(this);

      /**
       * @public
       * @type {string}
       */
      this.endpoint = null;

      /**
       * @public
       * @type {string}
       */
      this.username = null;

      /**
       * @public
       * @type {string}
       */
      this.key = null;

      /**
       * If null it will load all locales, otherwise only the specified ones
       *
       * @public
       *
       * @type {string[]|null}
       */
      this.additionalLocales = null;

      /**
       * @public
       * @type {STATES}
       */
      this.state = STATES.PUBLISHED;

      /**
       * @public
       * @type {{ignoredContexts: string[], ignoredIds: int[], ignoredFileType: string[]}}
       */
      this.binDownloadPolicy = {
        ignoredContexts: [FILE_CONTEXTS.TEXTURE_LOW, FILE_CONTEXTS.TEXTURE_HELPER, FILE_CONTEXTS.TEXTURE_MODEL],
        ignoredIds: [],
        ignoredFileType: []
      };
    }

    /**
     * @package
     * @param {string[]|null} additionalLocales
     * @return {boolean}
     */

  }, {
    key: 'areSameAdditionalLocales',
    value: function areSameAdditionalLocales(additionalLocales) {
      if (additionalLocales === this.additionalLocales) {
        return true;
      }

      if (additionalLocales === null || this.additionalLocales === null) {
        return false;
      }

      return this.constructor._areSameArrays(additionalLocales, this.additionalLocales);
    }

    /**
     * @package
     *
     * @param {{ignoredContexts: string[], ignoredIds: int[], ignoredFileType: string[]}|null} binDownloadPolicy
     * @return {boolean}
     */

  }, {
    key: 'areSameBinDownloadPolicy',
    value: function areSameBinDownloadPolicy(binDownloadPolicy) {
      if (!binDownloadPolicy) {
        return false;
      }

      var areSameIgnoredContexts = this.constructor._areSameArrays(binDownloadPolicy.ignoredContexts, this.binDownloadPolicy.ignoredContexts);

      if (!areSameIgnoredContexts) {
        return false;
      }

      var areSameIgnoredIds = this.constructor._areSameArrays(binDownloadPolicy.ignoredIds, this.binDownloadPolicy.ignoredIds);

      if (!areSameIgnoredIds) {
        return false;
      }

      return this.constructor._areSameArrays(binDownloadPolicy.ignoredFileType, this.binDownloadPolicy.ignoredFileType);
    }

    /**
     * @param {Array} a
     * @param {Array} b
     * @return {boolean}
     * @private
     */

  }], [{
    key: '_areSameArrays',
    value: function _areSameArrays(a, b) {
      if (a.length !== b.length) {
        return false;
      }

      var equals = true;
      a.forEach(function (e) {
        if (equals && !b.includes(e)) {
          equals = false;
        }
      });

      return equals;
    }
  }]);
  return CacheOptions;
}(adactiveAbstractOptions.AbstractOptions);

/**
 * @abstract
 */

var CacheManager = function () {
  createClass(CacheManager, null, [{
    key: 'getTranslatableRepositories',

    /**
     * @package
     * @return {string[]}
     */
    value: function getTranslatableRepositories() {
      return [Site.getName(), Category.getName(), CustomObject.getName(), Feature.getName(), FeatureValue.getName(), Media.getName(), Playlist.getName(), Poi.getName(), Tag.getName()];
    }

    /**
     * @public
     * @param {string} directory
     */

  }]);

  function CacheManager(directory) {
    classCallCheck(this, CacheManager);

    this.directory = directory;

    /**
     * @protected
     * @type {Map<int, Promise<boolean, Error>>}
     */
    this.runningUpdates = new Map();

    /**
     * @protected
     * @type {Promise}
     */
    this.runningClean = null;
  }

  /**
   * @async
   *
   * @package
   *
   * @param {int} siteId
   * @param {CacheOptions|Options} options
   * @return {Promise<Date|null>}
   */


  createClass(CacheManager, [{
    key: 'getLastPublishDate',
    value: function getLastPublishDate(siteId, options) {
      if (options.state !== STATES.PUBLISHED) {
        // No need to call API as we want to operate on DRAFT
        return Promise.resolve(new Date());
      }

      var endpoint = Options.formatApiEndpoint(options.endpoint);
      var request = new Request();
      request.url = endpoint + '/published-version/last/' + siteId;
      request.addHeaders(EntityManager.getHeaders(options.username, options.key));

      return Request.sendRequest(request).then(function (_ref) {
        var data = _ref.data;
        return new Date(data.date);
      }).catch(function (error) {
        if (!error.response) {
          return null;
        }

        if (error.response) {
          switch (error.response.status) {
            case 404:
              return new Date();
            case 503:
              return null;
            default:
          }
        }

        var _Request$formatApiErr = Request.formatApiError(error, request),
            message = _Request$formatApiErr.message;

        return Promise.reject(new Error(message));
      });
    }

    /**
     * @package
     *
     * @async
     *
     * @param {int} siteId
     * @return {Promise<null|object, Error>}
     */

  }, {
    key: 'getCacheMetadata',
    value: function getCacheMetadata(siteId) {
      return this._readFile(this._getSiteCacheDirector(siteId) + '/metadata.json').then(function (data) {
        return JSON.parse(data);
      }).catch(function () {
        return null;
      });
    }

    /**
     * @package
     *
     * @async
     *
     * @param preventConflictWithRunningUpdates
     * @return {Promise<void, Error>}
     */

  }, {
    key: 'clean',
    value: function clean() {
      var _this = this;

      var preventConflictWithRunningUpdates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this.runningClean !== null) {
        return this.runningClean;
      }

      if (preventConflictWithRunningUpdates && this.runningUpdates.size > 0) {
        return Promise.all(Array.from(this.runningUpdates.values())).then(function () {
          return _this.clean();
        });
      }

      this.runningClean = Promise.all([this._getBinRegistry(), this._readdir(this._getBinCacheDirector())]).then(function (_ref2) {
        var _ref3 = slicedToArray(_ref2, 2),
            binRegistry = _ref3[0],
            files = _ref3[1];

        var references = [];
        var siteIds = Object.keys(binRegistry);
        siteIds.forEach(function (siteId) {
          binRegistry[siteId].forEach(function (reference) {
            if (!references.includes(reference)) {
              references.push(reference);
            }
          });
        });

        var tasks = [];
        files.forEach(function (file) {
          if (!references.includes(file)) {
            tasks.push(_this._rmrf(_this._getBinCacheDirector() + '/' + file));
          }
        });

        return Promise.all(tasks).then(function () {
          _this.runningClean = null;
        });
      });

      return this.runningClean;
    }

    /**
     * @async
     *
     * @param {int} siteId
     * @param {string[]} usedFileReferences
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_cleanUnusedBins',
    value: function _cleanUnusedBins(siteId, usedFileReferences) {
      var _this2 = this;

      return this._getBinRegistry().then(function (binRegistry) {
        // eslint-disable-next-line no-param-reassign
        binRegistry[siteId] = usedFileReferences;

        return _this2._writeFile(_this2.directory + '/binRegistry.json', JSON.stringify(binRegistry));
      }).then(function () {
        return _this2.clean(false);
      });
    }

    /**
     * @async
     * @protected
     * @return {Promise<string, Error>}
     */

  }, {
    key: '_getBinRegistry',
    value: function _getBinRegistry() {
      return this._readFile(this.directory + '/binRegistry.json').then(function (data) {
        return JSON.parse(data);
      }).catch(function () {
        return {};
      }); // eslint-disable-line arrow-body-style
    }

    /**
     * @public
     *
     * @async
     *
     * @param {int} siteId
     * @param {CacheOptions} options
     * @return {Promise<boolean, Error>}
     */

  }, {
    key: 'update',
    value: function update(siteId, options) {
      var _this3 = this;

      if (this.runningUpdates.has(siteId)) {
        return this.runningUpdates.get(siteId);
      }

      if (this.runningClean !== null) {
        return this.runningClean.then(function () {
          return _this3.update(siteId, options);
        });
      }

      var opts = new CacheOptions(options);

      var promise = this.needsUpdate(siteId, opts).then(function (_ref4) {
        var needsUpdate = _ref4.needsUpdate,
            hasCache = _ref4.hasCache,
            hasInternetConnexion = _ref4.hasInternetConnexion;

        if (!hasInternetConnexion) {
          if (!hasCache) {
            return Promise.reject(new Error('No Internet connexion and no cache'));
          }

          console.warn('No Internet connexion');
          return false;
        }

        if (needsUpdate) {
          console.log('Will update');
          return _this3._doUpdate(siteId, opts);
        }

        console.log('Skip update as it\'s valid');
        return true;
      });

      this.runningUpdates.set(siteId, promise);
      promise.then(function () {
        _this3.runningUpdates.delete(siteId);
      });

      return promise;
    }

    /**
     * @public
     *
     * @async
     *
     * @param {int} siteId
     * @param {CacheOptions} options
     * @return {Promise<{needsUpdate: true, lastPublishedDate: Date|null, hasCache: boolean, hasInternetConnexion: boolean, lastCacheUpdateDate: null|Date}, Error>}
     */

  }, {
    key: 'needsUpdate',
    value: function needsUpdate(siteId, options) {
      var opts = new CacheOptions(options);

      return Promise.all([this.getCacheMetadata(siteId), this.getLastPublishDate(siteId, opts)]).then(function (_ref5) {
        var _ref6 = slicedToArray(_ref5, 2),
            cacheMetadata = _ref6[0],
            lastPublishedDate = _ref6[1];

        var hasCache = cacheMetadata !== null;
        var hasInternetConnexion = lastPublishedDate !== null;

        var lastCacheUpdateDate = hasCache ? new Date(cacheMetadata.date) : null;

        if (!hasInternetConnexion) {
          return {
            needsUpdate: !hasCache,
            lastPublishedDate: lastPublishedDate,
            hasCache: hasCache,
            hasInternetConnexion: hasInternetConnexion,
            lastCacheUpdateDate: lastCacheUpdateDate
          };
        }

        var needsUpdate = false;
        if (!hasCache) {
          // First load
          needsUpdate = true;
        } else if (cacheMetadata.apiVersion !== Options.getApiVersion()) {
          needsUpdate = true;
        } else if (cacheMetadata.endpoint !== opts.endpoint) {
          needsUpdate = true;
        } else if (cacheMetadata.state !== opts.state) {
          needsUpdate = true;
        } else if (lastCacheUpdateDate <= lastPublishedDate) {
          needsUpdate = true;
        } else if (!opts.areSameAdditionalLocales(cacheMetadata.additionalLocales)) {
          needsUpdate = true;
        } else if (!opts.areSameBinDownloadPolicy(cacheMetadata.binDownloadPolicy)) {
          needsUpdate = true;
        }

        return {
          needsUpdate: needsUpdate,
          lastPublishedDate: lastPublishedDate,
          hasCache: hasCache,
          hasInternetConnexion: hasInternetConnexion,
          lastCacheUpdateDate: lastCacheUpdateDate
        };
      });
    }

    /**
     *
     * @param {int} siteId
     * @return {string}
     * @protected
     */

  }, {
    key: '_getSiteCacheDirector',
    value: function _getSiteCacheDirector(siteId) {
      return this.directory + '/' + siteId;
    }

    /**
     *
     * @return {string}
     * @protected
     */

  }, {
    key: '_getBinCacheDirector',
    value: function _getBinCacheDirector() {
      return this.directory + '/bin';
    }

    /**
     * @async
     *
     * @package
     *
     * @param {string} name
     * @param {Options} emOptions
     * @param {boolean} [allowOutdated=false]
     * @return {Promise<object[], Error>}
     */

  }, {
    key: 'get',
    value: function get$$1(name, emOptions) {
      var _this4 = this;

      var allowOutdated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var emOpts = new Options(emOptions);

      return this.getCacheMetadata(emOpts.site).then(function (metadata) {
        if (metadata === null) {
          return Promise.reject(new Error('CacheManager: no cache'));
        }

        if (metadata.apiVersion !== Options.getApiVersion()) {
          return Promise.reject(new Error('CacheManager: cache was created from another api version, please update it'));
        }

        if (metadata.endpoint !== emOpts.endpoint) {
          return Promise.reject(new Error('CacheManager: cache was created from another endpoint, please update it'));
        }

        if (metadata.state !== emOpts.state) {
          return Promise.reject(new Error('CacheManager: cache was created from state, please update it'));
        }

        var isDefaultLocale = emOpts.locale === null || emOpts === metadata.defaultLocale;

        if (!isDefaultLocale && !metadata.availableLocales.includes(emOpts.locale)) {
          return Promise.reject(new Error('CacheManager: requested locale is not in the cache'));
        }

        if (!allowOutdated) {
          return _this4.getLastPublishDate(emOpts.site, emOpts).then(function (lastPublishedDate) {
            if (lastPublishedDate === null || lastPublishedDate > new Date(metadata.date)) {
              return Promise.reject(new Error('CacheManger: is outdated'));
            }

            return isDefaultLocale;
          });
        }

        return isDefaultLocale;
      }).then(function (isDefaultLocale) {
        var filePath = null;
        if (isDefaultLocale || !_this4.constructor.getTranslatableRepositories().includes(name)) {
          filePath = _this4._getSiteCacheDirector(emOpts.site) + '/' + name + '.json';
        } else {
          filePath = _this4._getSiteCacheDirector(emOpts.site) + '/' + emOpts.locale + '/' + name + '.json';
        }

        var binRegistryPromise = null;
        if (name === File.getName()) {
          binRegistryPromise = _this4._getBinRegistry();
        }

        return Promise.all([_this4._readFile(filePath).then(function (data) {
          return JSON.parse(data);
        }), binRegistryPromise]);
      }).then(function (_ref7) {
        var _ref8 = slicedToArray(_ref7, 2),
            data = _ref8[0],
            binRegistry = _ref8[1];

        if (name === File.getName()) {
          var usedReference = binRegistry[emOpts.site];

          data.forEach(function (file) {
            if (!usedReference.includes(file.reference)) {
              return;
            }
            // eslint-disable-next-line no-param-reassign
            file.uri = _this4._getBinCacheDirector() + '/' + file.reference;
          });
        }

        return data;
      });
    }

    /**
     * @async
     *
     * @param {int} siteId
     * @param {CacheOptions} options
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_doUpdate',
    value: function _doUpdate(siteId, options) {
      var _this5 = this;

      var defaultEm = this._createEm(siteId, null, options);
      var additionalEms = [];

      var dest = this._getSiteCacheDirector(siteId);

      return defaultEm.load().then(function () {
        var site = defaultEm.getRepository('Site').getCurrent();

        if (defaultEm.locale === null) {
          // eslint-disable-next-line no-param-reassign
          defaultEm.locale = site.locale;
        }

        var additionalLocales = null;
        if (options.additionalLocales === null) {
          additionalLocales = [];
          site.languages.forEach(function (locale) {
            if (locale !== site.locale) {
              additionalLocales.push(locale);
            }
          });
        } else {
          additionalLocales = options.additionalLocales;
        }

        var tasks = [];
        additionalLocales.forEach(function (locale) {
          var em = _this5._createEm(siteId, locale, options);
          additionalEms.push(em);
          _this5.constructor.getTranslatableRepositories().forEach(function (translatableEntity) {
            tasks.push(em.getRepository(translatableEntity).load());
          });
        });

        return Promise.all(tasks);
      }).then(function () {
        console.log('Cleaning');

        return _this5._rmrf(dest);
      }).then(function () {
        console.log('Creating dirs');
        var tasks = [_this5._mkdirp(dest), _this5._mkdirp(_this5._getBinCacheDirector())];

        additionalEms.forEach(function (em) {
          tasks.push(_this5._mkdirp(dest + '/' + em.locale));
        });

        console.log('Creating dir');

        return Promise.all(tasks);
      }).then(function () {
        var _binDownloadPolicy$ig;

        var binDownloadPolicy = {
          ignoredContexts: options.binDownloadPolicy.ignoredContexts,
          ignoredIds: [].concat(toConsumableArray(options.binDownloadPolicy.ignoredIds)),
          ignoredFileType: options.binDownloadPolicy.ignoredFileType
        };

        var ignoredMapFileIds = defaultEm.getRepository('MapFile').findBy({
          type: function type(_type) {
            return [MAP_FILE_TYPES.PATH, MAP_FILE_TYPES.CONFIG, MAP_FILE_TYPES.HELPER, MAP_FILE_TYPES.IVE, MAP_FILE_TYPES.LIGHT, MAP_FILE_TYPES.OSG].includes(_type);
          }
        }).map(function (mapFile) {
          return mapFile.file.value;
        });

        (_binDownloadPolicy$ig = binDownloadPolicy.ignoredIds).push.apply(_binDownloadPolicy$ig, toConsumableArray(ignoredMapFileIds));

        return _this5._downloadFiles(defaultEm, binDownloadPolicy);
      }).then(function (fileReferences) {
        console.log('Saving');
        var tasks = [];
        defaultEm.getRepositories().forEach(function (repository) {
          if (repository.isLoaded()) {
            tasks.push(_this5._writeFile(dest + '/' + repository.constructor.getName() + '.json', JSON.stringify(repository.getAll())));
          }
        });

        additionalEms.forEach(function (em) {
          em.getRepositories().forEach(function (repository) {
            if (repository.isLoaded()) {
              tasks.push(_this5._writeFile(dest + '/' + em.locale + '/' + repository.constructor.getName() + '.json', JSON.stringify(repository.getAll())));
            }
          });
        });

        return Promise.all(tasks).then(function () {
          return fileReferences;
        });
      }).then(function (fileReferences) {
        return _this5._cleanUnusedBins(siteId, fileReferences);
      }).then(function () {
        var site = defaultEm.getRepository('Site').getCurrent();

        var metadata = {
          endpoint: options.endpoint,
          state: options.state,
          date: new Date(),
          additionalLocales: options.additionalLocales,
          defaultLocale: site.default,
          availableLocales: Array.from(site.languages),
          binDownloadPolicy: options.binDownloadPolicy,
          apiVersion: Options.getApiVersion()
        };

        return _this5._writeFile(dest + '/metadata.json', JSON.stringify(metadata));
      });
    }

    /**
     * @async
     *
     * @param {EntityManager} em
     * @param {{ignoredContexts: string[], ignoredIds: int[], ignoredFileType: string[]}} binDownloadPolicy
     * @return {Promise<string[], Error>}
     * @protected
     */

  }, {
    key: '_downloadFiles',
    value: function _downloadFiles(em, binDownloadPolicy) {
      var _this6 = this;

      var files = [];
      em.getRepository('File').getAll().forEach(function (file) {
        if (binDownloadPolicy.ignoredContexts.includes(file.context)) {
          return;
        }

        if (binDownloadPolicy.ignoredIds.includes(file.id)) {
          return;
        }

        if (binDownloadPolicy.ignoredFileType.includes(file.file_type)) {
          return;
        }

        files.push(file);
      });

      if (files.length === 0) {
        return Promise.resolve([]);
      }

      var usedReferences = [];
      files.forEach(function (file) {
        if (!usedReferences.includes(file.reference)) {
          usedReferences.push(file.reference);
        }
      });

      var tasks = [];
      for (var i = 0; i < 10; i++) {
        tasks.push(Promise.resolve());
      }

      var _loop = function _loop(_i) {
        var taskNumber = _i % 10;
        tasks[taskNumber] = tasks[taskNumber].then(function () {
          return _this6._downloadFile(files[_i]);
        });
      };

      for (var _i = 0; _i < files.length; _i++) {
        _loop(_i);
      }

      return Promise.all(tasks).then(function () {
        return usedReferences;
      });
    }

    /**
     *
     * @param {int} siteId
     * @param {string|null} locale
     * @param {CacheOptions} options
     * @return {EntityManager}
     * @protected
     */

  }, {
    key: '_createEm',
    value: function _createEm(siteId, locale, options) {
      return new EntityManager(new Options({
        site: siteId,
        endpoint: options.endpoint,
        username: options.username,
        key: options.key,
        state: options.state,
        locale: locale
      }));
    }

    /**
     * @async
     *
     * @param {string} file
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_downloadFile',
    value: function _downloadFile(file) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} filePath
     * @return {Promise<boolean, Error>}
     * @protected
     */

  }, {
    key: '_exists',
    value: function _exists(filePath) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} dirPath
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_mkdirp',
    value: function _mkdirp(dirPath) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} filePath
     * @return {Promise<string, Error>}
     * @protected
     */

  }, {
    key: '_readFile',
    value: function _readFile(filePath) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} filePath
     * @param {string} data
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_writeFile',
    value: function _writeFile(filePath, data) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} p
     * @return {Promise<void, Error>}
     * @protected
     */

  }, {
    key: '_rmrf',
    value: function _rmrf(p) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }

    /**
     * @async
     *
     * @param {string} dirPath
     * @return {Promise<string[], Error>}
     * @protected
     */

  }, {
    key: '_readdir',
    value: function _readdir(dirPath) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not implemented'));
    }
  }]);
  return CacheManager;
}();

/**
 * @public
 */

var LocalCacheManager = function (_CacheManager) {
  inherits(LocalCacheManager, _CacheManager);

  /**
   *
   * @param {string} [directory='./adsum/cache']
   */
  function LocalCacheManager() {
    var directory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : './adsum/cache';
    classCallCheck(this, LocalCacheManager);
    return possibleConstructorReturn(this, (LocalCacheManager.__proto__ || Object.getPrototypeOf(LocalCacheManager)).call(this, directory));
  }

  /**
   * @inheritDoc
   */


  createClass(LocalCacheManager, [{
    key: '_downloadFile',
    value: function _downloadFile(file) {
      var dest = this._getBinCacheDirector() + '/' + file.reference;
      return this._exists(dest).then(function (exist) {
        if (!exist) {
          return new Promise(function (resolve, reject) {
            axios({ url: file.uri, responseType: 'stream' }).then(function (response) {
              var stream = fs.createWriteStream(dest);

              stream.on('finish', resolve);
              stream.on('error', reject);

              response.data.pipe(stream);
            });
          });
        }

        return Promise.resolve();
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_exists',
    value: function _exists(filePath) {
      return new Promise(function (resolve) {
        fs.access(filePath, function (err) {
          resolve(!err);
        });
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_readFile',
    value: function _readFile(filePath) {
      return new Promise(function (resolve, reject) {
        fs.readFile(filePath, 'utf8', function (err, data) {
          if (err) reject(err);else resolve(data);
        });
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_mkdirp',
    value: function _mkdirp(dirPath) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        fs.mkdir(dirPath, 511, function (err) {
          if (!err) {
            console.log(dirPath + 'created');
            resolve();
            return;
          }

          switch (err.code) {
            case 'ENOENT':
              _this2._mkdirp(path.dirname(dirPath)).then(function () {
                return _this2._mkdirp(dirPath);
              }, reject).then(resolve, reject);
              return;

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
              fs.stat(dirPath, function (err2, stat) {
                // if the stat fails, then that's super weird.
                // let the original error be the failure reason.
                if (err2 || !stat.isDirectory()) {
                  reject(err);
                } else {
                  resolve();
                }
              });
              break;
          }
        });
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_writeFile',
    value: function _writeFile(filePath, data) {
      return new Promise(function (resolve, reject) {
        fs.writeFile(filePath, data, 'utf8', function (err) {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_rmrf',
    value: function _rmrf(p) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        fs.stat(p, function (err, stat) {
          if (err && err.code === 'ENOENT') {
            resolve();
            return;
          } else if (err) {
            reject(err);
            return;
          }

          if (!stat.isDirectory()) {
            fs.unlink(p, function (err2) {
              if (err2) {
                reject(err2);
              } else {
                resolve();
              }
            });
          } else {
            _this3._readdir(p).then(function (files) {
              var tasks = files.map(function (file) {
                return _this3._rmrf(p + '/' + file);
              });

              return Promise.all(tasks);
            }).then(function () {
              fs.rmdir(p, function (err2) {
                if (err2) {
                  reject(err2);
                } else {
                  resolve();
                }
              });
            }, reject);
          }
        });
      });
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_readdir',
    value: function _readdir(dirPath) {
      return new Promise(function (resolve, reject) {
        fs.readdir(dirPath, function (err, files) {
          if (err) {
            reject(err);
          } else {
            resolve(files);
          }
        });
      });
    }
  }]);
  return LocalCacheManager;
}(CacheManager);

/**
 * @alias AdsumClientApi.DistCacheManager
 */

var DistCacheManager = function (_CacheManager) {
  inherits(DistCacheManager, _CacheManager);

  /**
   *
   * @param {string} [directory='//localhost:8080/adsum/cache']
   */
  function DistCacheManager() {
    var directory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '//localhost:8080/adsum/cache';
    classCallCheck(this, DistCacheManager);
    return possibleConstructorReturn(this, (DistCacheManager.__proto__ || Object.getPrototypeOf(DistCacheManager)).call(this, directory));
  }

  /**
   * @inheritDoc
   */


  createClass(DistCacheManager, [{
    key: 'update',
    value: function update(siteId, options) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not supported'));
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'clean',
    value: function clean(siteId, options) {
      // eslint-disable-line no-unused-vars
      return Promise.reject(new Error('Not supported'));
    }

    /**
     * @inheritDoc
     */

  }, {
    key: '_readFile',
    value: function _readFile(filePath) {
      return axios.get(filePath).then(function (response) {
        if (_typeof(response.data) === 'object') {
          return JSON.stringify(response.data);
        }

        return response.data;
      });
    }
  }]);
  return DistCacheManager;
}(CacheManager);

/**
 * @public
 * @namespace AdsumClientApi
 */

exports.EntityManager = EntityManager;
exports.EventDispatcher = EventDispatcher;
exports.VERSION = VERSION;
exports.Options = Options;
exports.Request = Request;
exports.AbstractEntity = AbstractEntity;
exports.Category = Category;
exports.Feature = Feature;
exports.FeatureValue = FeatureValue;
exports.File = File;
exports.FILE_CONTEXTS = FILE_CONTEXTS;
exports.FloorCalibration = FloorCalibration;
exports.Place = Place;
exports.Playlist = Playlist;
exports.Site = Site;
exports.SiteCalibration = SiteCalibration;
exports.Tag = Tag;
exports.CustomObject = CustomObject;
exports.Picto = Picto;
exports.Label = Label;
exports.Device = Device;
exports.Kiosk = Kiosk;
exports.Mobile = Mobile;
exports.Web = Web;
exports.MapAoDae = MapAoDae;
exports.MapConfig = MapConfig;
exports.MapDae = MapDae;
exports.MapFile = MapFile;
exports.MapHelper = MapHelper;
exports.MapLight = MapLight;
exports.MapPath = MapPath;
exports.Media = Media;
exports.MediaImage = MediaImage;
exports.MediaPdf = MediaPdf;
exports.MediaText = MediaText;
exports.MediaUrl = MediaUrl;
exports.MediaVideo = MediaVideo;
exports.Movie = Movie;
exports.Exhibitor = Exhibitor;
exports.Person = Person;
exports.Poi = Poi;
exports.Product = Product;
exports.Room = Room;
exports.Service = Service;
exports.Store = Store;
exports.CUSTOM_OBJECT_ORIENTATION_MODES = CUSTOM_OBJECT_ORIENTATION_MODES;
exports.CUSTOM_OBJECT_TYPES = CUSTOM_OBJECT_TYPES;
exports.LABEL_ALIGNMENTS = LABEL_ALIGNMENTS;
exports.DEVICE_TYPES = DEVICE_TYPES;
exports.MAP_FILE_TYPES = MAP_FILE_TYPES;
exports.MEDIA_TYPES = MEDIA_TYPES;
exports.POI_TYPES = POI_TYPES;
exports.REPOSITORY_EVENTS = REPOSITORY_EVENTS;
exports.STATES = STATES;
exports.Reference = Reference;
exports.Collection = Collection;
exports.OrderedCollection = OrderedCollection;
exports.Vector = Vector;
exports.LocalCacheManager = LocalCacheManager;
exports.DistCacheManager = DistCacheManager;
exports.CacheOptions = CacheOptions;
